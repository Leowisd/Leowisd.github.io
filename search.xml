<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Google Resume/Interview Workshop 2018 FALL</title>
    <url>/2018/09/24/201809GoogleEvent/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvlmam08wyj22c01koqv6.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<p>Today, engineers from GOOGLE came to Mizzou and hold some events for us students. Here are some useful information for me learned from the resume/interview workshop.</p>
<h2 id="Resume"><a href="#Resume" class="headerlink" title="Resume"></a>Resume</h2><h3 id="Resume-Tips"><a href="#Resume-Tips" class="headerlink" title="Resume Tips"></a>Resume Tips</h3><p><em>Recruiters should be able to find pertinent info on your resume with ease.</em></p>
<ul>
<li>PDF format</li>
<li>CLean, simple, consistent, bullet-pointed</li>
<li>Action words + meteries = results + impact</li>
<li>Contact information</li>
<li>“References upon request”</li>
</ul>
<h3 id="Education"><a href="#Education" class="headerlink" title="Education"></a>Education</h3><p><em>Your education should be the first section of your resume.</em></p>
<ul>
<li>Post-secondary schools attended</li>
<li>Intended major/minor/degree</li>
<li>Graduation <strong>month</strong> and <strong>year</strong></li>
<li>Grade Point Average</li>
<li>Revevant Coursework</li>
<li>Technical Kkills*</li>
</ul>
<h4 id="Expamle"><a href="#Expamle" class="headerlink" title="Expamle"></a>Expamle</h4><p>University of Missouri || Intended grad: May 2019</p>
<p>B.S. Computer Science, Minor Mathematics || Major GPA: 3.9</p>
<p><strong>Relevant Coursework</strong>: Data Structure, Algorithms, Machine Learning, Linear Algebra, Discrete Math, Artifical Intelligence, Probablity Theory, Compilers and Interpreters</p>
<p><strong>Technical Skills</strong>: HTML/CSS(7yrs), JavaScript(6yrs), Python(5yrs), Java(4yrs), Git, MATLAB, Unity, Android Studio </p>
<h3 id="Work-Experience"><a href="#Work-Experience" class="headerlink" title="Work Experience"></a>Work Experience</h3><p><em>Focus on your impact!</em></p>
<ul>
<li>Include employer, position, dates employed</li>
<li>Keep bullet points clear, concise, and descriptive</li>
<li>Consider <strong>relevant</strong> experience</li>
</ul>
<p>“Accomplished [X], as measured by [Y], by doing[Z]”</p>
<p><strong>Before</strong></p>
<p>Company, San Francisco, CA  ||  May — August 2017</p>
<p>Software Engineering Intern</p>
<ul>
<li>Deployed company’s new and imporoved in-hourse account reconciliation system</li>
<li>Generated daily reconciliation report for Fiance team</li>
<li>Languages: Python</li>
</ul>
<p><strong>After</strong></p>
<p>Company, San Francisco, CA  ||  May — August 2017</p>
<p>Software, Engineering Intern</p>
<ul>
<li>Deployed new in-hourse account reconciliation system using <strong>Python</strong> with 90% accuracy(previously 45%) on&gt;100k daily line items by designing and implementing event-driven bi-directional reconciliation framework</li>
<li>Generated daily reconciliation report for Fiance team by automating workflow of 8 different tasks in Spark using Airflow</li>
</ul>
<h3 id="Projects"><a href="#Projects" class="headerlink" title="Projects"></a>Projects</h3><p><em>Again, focus on your impact</em></p>
<ul>
<li>Accomplished [X], as measured by [Y], by doing [Z]</li>
<li>School vs. Personal</li>
<li>Technical skills gained: Java, C++, Python, Javascript, Go</li>
</ul>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>[Course #]. [Course Name] Group Project ||  October 2017</p>
<p>Used <strong>C++</strong> to provide webmail and storage services akin to Gmail and G Drive by building a fault-tolerant, load-balancing cloud platform from scratch</p>
<p>[Name of Project]. Personal Project  || July 2017 </p>
<p>Used <strong>Objective C</strong> to create IOS app that allows users to post haikus to a real-time feed, follow other users, leave comments; 300+ downloads to date with 4.0 rating.</p>
<h3 id="Activities-Leadership"><a href="#Activities-Leadership" class="headerlink" title="Activities/Leadership"></a>Activities/Leadership</h3><p><em>Tell us what excited you</em></p>
<ul>
<li>Clubs and organizations</li>
<li>National society chapters</li>
<li>Programming competitions&amp;hackathons</li>
<li>Industry internships</li>
<li>Teaching Assistantships</li>
<li>Research opportunities</li>
<li>Open Source projects</li>
</ul>
<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><p>DAC, Co-Founder &amp; VP ||  Sept 2016 - Present</p>
<ul>
<li>Spearhead new initiative to create undergraduate data analyties community</li>
<li>Grew club from 50 to 300+ members through enhanced recruiting circuits. 20+ industy visits, and monthly high-profile speaker engagements</li>
<li>Collaborate to plan annual Data Visualization Hackathon for 200+ attendees city-wide</li>
</ul>
<p>Head Teaching Assistant, Intro to Data Structures || Sept 2017 - May 2018</p>
<ul>
<li>Led weekly office hours to 25+ students, debugging in Java, homework assistance.</li>
<li>Supervised 55 TAs with curriculum support resources for 500+ undergraduates.</li>
</ul>
<h3 id="Honors-Awards"><a href="#Honors-Awards" class="headerlink" title="Honors/Awards"></a>Honors/Awards</h3><p><em>What, in addition to what you’ve already shared, sets your apart?</em></p>
<ul>
<li>Distinguished acadamic awards</li>
<li>Speaking engagements</li>
<li>Presentations &amp; publications</li>
<li>Include selectivity, if available</li>
</ul>
<h3 id="Final-Tips"><a href="#Final-Tips" class="headerlink" title="Final Tips"></a>Final Tips</h3><p><em>Demonstrate your passion for tech</em></p>
<ul>
<li>Graduation Month/Year</li>
<li>Accomplished[X], as measured by[Y], by doing[Z]</li>
<li>Java, C, C++, Python, JavaScript, (Go)</li>
<li>Tell us your story </li>
</ul>
<h2 id="Interview"><a href="#Interview" class="headerlink" title="Interview"></a>Interview</h2><h3 id="Interview-Format"><a href="#Interview-Format" class="headerlink" title="Interview Format"></a>Interview Format</h3><p><em>Technical interviews are by phone, on-campus, or on-site at a Google office. Each interview lasts about 45 mins.</em></p>
<ul>
<li>Step 1: Short Introductions 5 MINS</li>
<li>Step 2: Technical Assessment 35 MINS</li>
<li>Step 3: Closing Questions 5 MINS</li>
</ul>
<h3 id="Communication-and-Presentation"><a href="#Communication-and-Presentation" class="headerlink" title="Communication and Presentation"></a>Communication and Presentation</h3><p><em>Verbalize your thoughts</em></p>
<ul>
<li>Restate the question to confirm understanding</li>
<li>Ask clarifying questions</li>
<li>Think out loud</li>
<li>Draw pictures to help visualize your solution (graph)</li>
<li>Prefer to think in silence? Say so, then summarize</li>
</ul>
<p><em>Listen to your interviewer</em></p>
<ul>
<li>They want you to succeed</li>
<li>View session as a “discussion” rather than an “inerview”</li>
<li>Are they providing a hint?</li>
</ul>
<h3 id="Specific-details-for-phone-interviews"><a href="#Specific-details-for-phone-interviews" class="headerlink" title="Specific details for phone interviews"></a>Specific details for phone interviews</h3><p>If you have a phone interview, you’ll type yout solutions (code!) into a Google Doc shared with your interviewr.</p>
<ul>
<li>Find a quiet location——45 MINS</li>
<li>Use <strong>Courier New</strong> font for coding</li>
<li>Charge your cellphone and computer</li>
<li>Have pen/paper ready to scribble notes</li>
<li>Share your thoughts out loud</li>
<li>Remember to manually indent</li>
<li>Don’t search for reference/the question</li>
</ul>
<h3 id="Don’t-forget-about-testing"><a href="#Don’t-forget-about-testing" class="headerlink" title="Don’t forget about testing"></a>Don’t forget about testing</h3><ul>
<li>Run through an example</li>
<li>Enumerate evil inputs-find edge cases!</li>
<li>Discuss how your code will crash, fall, run infinity, overflow the stack, etc</li>
<li>Analyze complexity (runtime and space)</li>
<li>Do a walkthrough of the code with interviewer</li>
<li>Discuss improvements or alternative solutions</li>
</ul>
<h3 id="Possible-spin-off-questions"><a href="#Possible-spin-off-questions" class="headerlink" title="Possible spin-off questions"></a>Possible spin-off questions</h3><p><strong>Code: CAn you do it faster?</strong></p>
<ul>
<li>If you think the answer is “no”, can you justify it?</li>
<li>If the answer is “yes”, can you explain it?</li>
<li>What about optimizations that don’t change asymptotic complexity?</li>
</ul>
<p><strong>Code: Can you parallelize this?</strong></p>
<p><strong>Code: What about non-rectangular maps?</strong></p>
<p><strong>Design: Can you think of a different “fairness” criteria? Try to defend it.</strong></p>
<h3 id="Final-Tips-1"><a href="#Final-Tips-1" class="headerlink" title="Final Tips"></a>Final Tips</h3><p><em>Don’t worry — Interview can be messy</em></p>
<ul>
<li>There are no shortcuts: practice, practice, practice!</li>
<li>Err on the side of over-communicating</li>
<li>Test yout code!</li>
<li>Don’t Panic. You know your stuff!</li>
</ul>
<p><em>Communicating with your recruiter</em></p>
<ul>
<li>Read all requiements your reruiter send to you</li>
<li>Reply your recruiter timely</li>
<li>Keep communicating with your recruiter with any stuffs you confused</li>
</ul>
<p><em>When to contact your recruiter</em></p>
<ul>
<li>Your university’s recruiting deadline(if any)</li>
<li>Offer deadlines with other companies</li>
<li>Major update to your resume</li>
<li>Sustained period without updates</li>
</ul>
<p><em>Balancing your offers</em></p>
<ul>
<li>Interviewing with other compaines</li>
<li>Deadlines with other compaines</li>
<li>Extending off deadlines</li>
<li>Accepting offers with other companies</li>
</ul>
<h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><p><a href="g.co/techdevguide">Google’s Tech Dev Guide</a></p>
<p>Excellent resources for interview and resume prep + skills development</p>
<p><a href="https://www.youtube.com/user/GoogleStudents" target="_blank" rel="noopener">“Google Students” YouTube Channel</a></p>
<p>Watch our videos to receive tips and information from other Googlers</p>
<p><strong>Additional resources</strong></p>
<p><a href="g.co/buildyourfuture">g.co/buildyourfuture</a></p>
<p><a href="g.co/virtualcareerfair">g.co/virtualcareerfail</a></p>
<hr />]]></content>
      <categories>
        <category>Google</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Resume</tag>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>15-puzzle</title>
    <url>/2018/09/08/15-puzzle/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fv34t6hyuaj212w0m8e83.jpg" alt="Mayer, Merkel, & Ottmann: lithographers James Albert Wales: artist - Library of Congress" title="Mayer, Merkel, & Ottmann: lithographers James Albert Wales: artist - Library of Congress" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="A-Searching"><a href="#A-Searching" class="headerlink" title="A* Searching"></a>A* Searching</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Title: 15-puzzle by A*</span></span><br><span class="line"><span class="comment"># Author: YF</span></span><br><span class="line"><span class="comment"># Time: 9/8/2018</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></span><br><span class="line">    <span class="comment"># Initiate new state</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, state, directionFlag=None, parent=None, depth=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="comment"># state is a (4,4) array to storage the state        </span></span><br><span class="line">        self.state = state</span><br><span class="line">        <span class="comment"># record the possible directions to generate the sub-states</span></span><br><span class="line">        self.direction = [<span class="string">'up'</span>, <span class="string">'down'</span>, <span class="string">'right'</span>, <span class="string">'left'</span>]</span><br><span class="line">        <span class="keyword">if</span> directionFlag:</span><br><span class="line">            self.direction.remove(directionFlag)  </span><br><span class="line">        <span class="comment"># Initialization</span></span><br><span class="line">        self.parent = parent</span><br><span class="line">        self.symbol = <span class="string">' '</span></span><br><span class="line">        self.answer = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>], [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, State.symbol]])</span><br><span class="line">        self.depth = depth</span><br><span class="line">        <span class="comment"># calculate the num of tiles which are not in the correct position</span></span><br><span class="line">        <span class="comment"># h</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(state)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(state)):</span><br><span class="line">                <span class="keyword">if</span> self.state[i, j] != <span class="string">' '</span><span class="keyword">and</span> self.state[i, j] != self.answer[i, j]:</span><br><span class="line">                    num += <span class="number">1</span></span><br><span class="line">        <span class="comment"># calculate the state's cost </span></span><br><span class="line">        <span class="comment"># f</span></span><br><span class="line">        self.cost = num + self.depth</span><br><span class="line">    <span class="comment"># print the search path</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showPath</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                <span class="keyword">if</span> self.state[i, j] == <span class="string">' '</span>:</span><br><span class="line">                    print(self.state[i, j], end=<span class="string">'   '</span>)</span><br><span class="line">                <span class="keyword">elif</span> int(self.state[i, j])&gt;<span class="number">9</span>:</span><br><span class="line">                    print(self.state[i, j], end=<span class="string">'  '</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(self.state[i, j], end=<span class="string">'   '</span>)</span><br><span class="line">            print(<span class="string">"\n"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># FInd the position of the empty </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getEmptyPos</span><span class="params">(self)</span>:</span></span><br><span class="line">        postion = np.where(self.state == self.symbol)</span><br><span class="line">        <span class="keyword">return</span> postion</span><br><span class="line">    <span class="comment"># expand notes</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expandStates</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.direction:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        subStates = []</span><br><span class="line">        <span class="comment"># the maximum of the x,y</span></span><br><span class="line">        row, col = self.getEmptyPos()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'left'</span> <span class="keyword">in</span> self.direction <span class="keyword">and</span> col &gt; <span class="number">0</span>:    </span><br><span class="line">        <span class="comment">#it can move to left place</span></span><br><span class="line">            s = self.state.copy()</span><br><span class="line">            temp = s.copy()</span><br><span class="line">            s[row, col] = s[row, col<span class="number">-1</span>]</span><br><span class="line">            s[row, col<span class="number">-1</span>] = temp[row, col]</span><br><span class="line">            news = State(s, directionFlag=<span class="string">'right'</span>, parent=self, depth=self.depth+<span class="number">1</span>)</span><br><span class="line">            subStates.append(news)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'up'</span> <span class="keyword">in</span> self.direction <span class="keyword">and</span> row &gt; <span class="number">0</span>:    </span><br><span class="line">        <span class="comment">#it can move to upper place</span></span><br><span class="line">            s = self.state.copy()</span><br><span class="line">            temp = s.copy()</span><br><span class="line">            s[row, col] = s[row<span class="number">-1</span>, col]</span><br><span class="line">            s[row<span class="number">-1</span>, col] = temp[row, col]</span><br><span class="line">            news = State(s, directionFlag=<span class="string">'down'</span>, parent=self, depth=self.depth+<span class="number">1</span>)</span><br><span class="line">            subStates.append(news)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'down'</span> <span class="keyword">in</span> self.direction <span class="keyword">and</span> row &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="comment">#it can move to down place   </span></span><br><span class="line">            s = self.state.copy()</span><br><span class="line">            temp = s.copy()</span><br><span class="line">            s[row, col] = s[row+<span class="number">1</span>, col]</span><br><span class="line">            s[row+<span class="number">1</span>, col] = temp[row, col]</span><br><span class="line">            news = State(s, directionFlag=<span class="string">'up'</span>, parent=self, depth=self.depth+<span class="number">1</span>)</span><br><span class="line">            subStates.append(news)</span><br><span class="line">        <span class="keyword">if</span> self.direction.count(<span class="string">'right'</span>) <span class="keyword">and</span> col &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="comment">#it can move to right place    </span></span><br><span class="line">            s = self.state.copy()</span><br><span class="line">            temp = s.copy()</span><br><span class="line">            s[row, col] = s[row, col+<span class="number">1</span>]</span><br><span class="line">            s[row, col+<span class="number">1</span>] = temp[row, col]</span><br><span class="line">            news = State(s, directionFlag=<span class="string">'left'</span>, parent=self, depth=self.depth+<span class="number">1</span>)</span><br><span class="line">            subStates.append(news)</span><br><span class="line">        <span class="keyword">return</span> subStates</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AStar</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># generate a empty frontierList</span></span><br><span class="line">        frontierList = []</span><br><span class="line">        <span class="comment"># generate a empty exploredList                 </span></span><br><span class="line">        exploredList = []</span><br><span class="line">        <span class="comment"># append the origin state to the frontierList                </span></span><br><span class="line">        frontierList.append(self)</span><br><span class="line">        amount = <span class="number">1</span></span><br><span class="line">        <span class="comment"># denote the steps it travels         </span></span><br><span class="line">        <span class="keyword">while</span> len(frontierList) &gt; <span class="number">0</span>:     <span class="comment"># start the loop</span></span><br><span class="line">            n = frontierList.pop(<span class="number">0</span>)</span><br><span class="line">            exploredList.append(n)</span><br><span class="line">            subStates = n.expandStates()</span><br><span class="line">            <span class="comment"># Add the number of new nodes expanded</span></span><br><span class="line">            amount += len(subStates)</span><br><span class="line">            path = []</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> subStates:</span><br><span class="line">                <span class="keyword">if</span> (s.state == s.answer).all():</span><br><span class="line">                    <span class="keyword">while</span> s.parent:</span><br><span class="line">                        path.append(s.parent)</span><br><span class="line">                        s = s.parent</span><br><span class="line">                    path.reverse()</span><br><span class="line">                    <span class="keyword">return</span> path, amount</span><br><span class="line">            frontierList.extend(subStates)</span><br><span class="line">            <span class="comment"># sort the frontierList in terms of the cost f</span></span><br><span class="line">            frontierList.sort(key=<span class="keyword">lambda</span> x: x.cost)  </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:    </span><br><span class="line">    <span class="comment"># the symbol representing the empty place</span></span><br><span class="line">    emptySite = <span class="string">' '</span></span><br><span class="line">    <span class="comment"># you can change the symbol at here              </span></span><br><span class="line">    State.symbol = emptySite</span><br><span class="line">    <span class="comment"># set the origin state of the puzzle</span></span><br><span class="line">    <span class="comment"># First test state</span></span><br><span class="line">    <span class="comment"># originState = State(np.array([[1, 2, 7, 3], [5, 6 , 11, 4], [9, 10, 15, 8], [13, 14, 12, emptySite]]))</span></span><br><span class="line">    <span class="comment"># Second test state</span></span><br><span class="line">    originState = State(np.array([[<span class="number">5</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>], [<span class="number">9</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">4</span>], [<span class="number">13</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">8</span>], [emptySite, <span class="number">10</span>, <span class="number">14</span>, <span class="number">12</span>]]))  </span><br><span class="line">    State.answer = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>],[<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, State.symbol]])       </span><br><span class="line">    s1 = State(state=originState.state)</span><br><span class="line">    start = time.perf_counter_ns()      <span class="comment"># searchiing start time</span></span><br><span class="line">    path, amount = s1.AStar()</span><br><span class="line">    <span class="keyword">if</span> path:                        <span class="comment"># if find the solution</span></span><br><span class="line">        end = time.perf_counter_ns()        <span class="comment"># searching end time </span></span><br><span class="line">        steps = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> path:</span><br><span class="line">            print(<span class="string">"Step: "</span>, steps)</span><br><span class="line">            <span class="comment"># print the path from the origin to final state         </span></span><br><span class="line">            node.showPath()</span><br><span class="line">            steps += <span class="number">1</span></span><br><span class="line">        <span class="comment"># print the goal state</span></span><br><span class="line">        print(<span class="string">"Step: "</span>, steps)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                <span class="keyword">if</span> State.answer[i, j] == <span class="string">' '</span>:</span><br><span class="line">                    print(State.answer[i, j], end=<span class="string">'   '</span>)</span><br><span class="line">                <span class="keyword">elif</span> int(State.answer[i, j])&gt;<span class="number">9</span>:</span><br><span class="line">                    print(State.answer[i, j], end=<span class="string">'  '</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(State.answer[i, j], end=<span class="string">'   '</span>)</span><br><span class="line">            print(<span class="string">"\n"</span>)</span><br><span class="line">        </span><br><span class="line">        print(<span class="string">"Total steps is: "</span>, steps)</span><br><span class="line">        print(<span class="string">"The number of notes expended: "</span>, amount)</span><br><span class="line">    print(<span class="string">"CPU execution time is"</span>, (int(end)- int(start))/<span class="number">1000000</span>, <span class="string">"ms"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOADING...</span><br></pre></td></tr></table></figure>
<h2 id="IDS"><a href="#IDS" class="headerlink" title="IDS"></a>IDS</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Title: 15-puzzle by IDS</span></span><br><span class="line"><span class="comment"># Author: YF</span></span><br><span class="line"><span class="comment"># Time: 9/9/2018</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></span><br><span class="line">    <span class="comment"># Initiate new state</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, state, directionFlag=None, parent=None, depth=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="comment"># state is a (4,4) array to storage the state        </span></span><br><span class="line">        self.state = state</span><br><span class="line">        <span class="comment"># record the possible directions to generate the sub-states</span></span><br><span class="line">        self.direction = [<span class="string">'up'</span>, <span class="string">'down'</span>, <span class="string">'right'</span>, <span class="string">'left'</span>]</span><br><span class="line">        <span class="keyword">if</span> directionFlag:</span><br><span class="line">            self.direction.remove(directionFlag)  </span><br><span class="line">        <span class="comment"># Initialization</span></span><br><span class="line">        self.parent = parent</span><br><span class="line">        self.symbol = <span class="string">' '</span></span><br><span class="line">        self.answer = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>], [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, State.symbol]])</span><br><span class="line">        self.depth = depth</span><br><span class="line">        <span class="comment"># calculate the num of tiles which are not in the correct position</span></span><br><span class="line">        <span class="comment"># h</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(state)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(state)):</span><br><span class="line">                <span class="keyword">if</span> self.state[i, j] != <span class="string">' '</span><span class="keyword">and</span> self.state[i, j] != self.answer[i, j]:</span><br><span class="line">                    num += <span class="number">1</span></span><br><span class="line">        <span class="comment"># calculate the state's cost </span></span><br><span class="line">        <span class="comment"># f</span></span><br><span class="line">        self.cost = num + self.depth</span><br><span class="line">    <span class="comment"># print the search path</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">showPath</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                <span class="keyword">if</span> self.state[i, j] == <span class="string">' '</span>:</span><br><span class="line">                    print(self.state[i, j], end=<span class="string">'   '</span>)</span><br><span class="line">                <span class="keyword">elif</span> int(self.state[i, j])&gt;<span class="number">9</span>:</span><br><span class="line">                    print(self.state[i, j], end=<span class="string">'  '</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(self.state[i, j], end=<span class="string">'   '</span>)</span><br><span class="line">            print(<span class="string">"\n"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># FInd the position of the empty </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getEmptyPos</span><span class="params">(self)</span>:</span></span><br><span class="line">        postion = np.where(self.state == self.symbol)</span><br><span class="line">        <span class="keyword">return</span> postion</span><br><span class="line">    <span class="comment"># expand notes</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">expandStates</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.direction:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        subStates = []</span><br><span class="line">        <span class="comment"># the maximum of the x,y</span></span><br><span class="line">        row, col = self.getEmptyPos()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'left'</span> <span class="keyword">in</span> self.direction <span class="keyword">and</span> col &gt; <span class="number">0</span>:    </span><br><span class="line">        <span class="comment">#it can move to left place</span></span><br><span class="line">            s = self.state.copy()</span><br><span class="line">            temp = s.copy()</span><br><span class="line">            s[row, col] = s[row, col<span class="number">-1</span>]</span><br><span class="line">            s[row, col<span class="number">-1</span>] = temp[row, col]</span><br><span class="line">            news = State(s, directionFlag=<span class="string">'right'</span>, parent=self, depth=self.depth+<span class="number">1</span>)</span><br><span class="line">            subStates.append(news)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'up'</span> <span class="keyword">in</span> self.direction <span class="keyword">and</span> row &gt; <span class="number">0</span>:    </span><br><span class="line">        <span class="comment">#it can move to upper place</span></span><br><span class="line">            s = self.state.copy()</span><br><span class="line">            temp = s.copy()</span><br><span class="line">            s[row, col] = s[row<span class="number">-1</span>, col]</span><br><span class="line">            s[row<span class="number">-1</span>, col] = temp[row, col]</span><br><span class="line">            news = State(s, directionFlag=<span class="string">'down'</span>, parent=self, depth=self.depth+<span class="number">1</span>)</span><br><span class="line">            subStates.append(news)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'down'</span> <span class="keyword">in</span> self.direction <span class="keyword">and</span> row &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="comment">#it can move to down place   </span></span><br><span class="line">            s = self.state.copy()</span><br><span class="line">            temp = s.copy()</span><br><span class="line">            s[row, col] = s[row+<span class="number">1</span>, col]</span><br><span class="line">            s[row+<span class="number">1</span>, col] = temp[row, col]</span><br><span class="line">            news = State(s, directionFlag=<span class="string">'up'</span>, parent=self, depth=self.depth+<span class="number">1</span>)</span><br><span class="line">            subStates.append(news)</span><br><span class="line">        <span class="keyword">if</span> self.direction.count(<span class="string">'right'</span>) <span class="keyword">and</span> col &lt; <span class="number">3</span>:</span><br><span class="line">            <span class="comment">#it can move to right place    </span></span><br><span class="line">            s = self.state.copy()</span><br><span class="line">            temp = s.copy()</span><br><span class="line">            s[row, col] = s[row, col+<span class="number">1</span>]</span><br><span class="line">            s[row, col+<span class="number">1</span>] = temp[row, col]</span><br><span class="line">            news = State(s, directionFlag=<span class="string">'left'</span>, parent=self, depth=self.depth+<span class="number">1</span>)</span><br><span class="line">            subStates.append(news)</span><br><span class="line">        <span class="keyword">return</span> subStates</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">IDS</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> depth <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">            path, flag = self.DLS(depth)</span><br><span class="line">            <span class="keyword">if</span> flag != <span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">return</span> path, flag</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DLS</span><span class="params">(self, depth)</span>:</span></span><br><span class="line">        <span class="comment"># the amount is used to record how many notes expanded </span></span><br><span class="line">        <span class="keyword">global</span> amount</span><br><span class="line">        amount += <span class="number">1</span></span><br><span class="line">        <span class="comment"># Goal test</span></span><br><span class="line">        <span class="keyword">if</span> (self.state == self.answer).all():</span><br><span class="line">            s = self</span><br><span class="line">            path = []</span><br><span class="line">            <span class="comment"># When s is not the root note</span></span><br><span class="line">            <span class="keyword">while</span> s.parent:</span><br><span class="line">                path.append(s.parent)</span><br><span class="line">                s = s.parent</span><br><span class="line">            path.reverse()</span><br><span class="line">            <span class="keyword">return</span> path, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> depth == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, <span class="number">-1</span></span><br><span class="line">        <span class="comment"># cutoff =&gt; cutoff occurred?</span></span><br><span class="line">        cutoff = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># Get all possible sub notes</span></span><br><span class="line">        subStates = self.expandStates()</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> subStates:</span><br><span class="line">            <span class="comment"># DLS</span></span><br><span class="line">            result, flag = s.DLS(depth<span class="number">-1</span>)</span><br><span class="line">            <span class="comment"># cutoff occurred?</span></span><br><span class="line">            <span class="keyword">if</span> flag == <span class="number">-1</span>:  <span class="comment"># cutoff occurred</span></span><br><span class="line">                cutoff = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> result != <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">return</span> result, flag</span><br><span class="line">        <span class="keyword">if</span> cutoff:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>, <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:    </span><br><span class="line">    <span class="comment"># the symbol representing the empty place</span></span><br><span class="line">    emptySite = <span class="string">' '</span></span><br><span class="line">    <span class="comment"># you can change the symbol at here              </span></span><br><span class="line">    State.symbol = emptySite</span><br><span class="line">    <span class="comment"># set the origin state of the puzzle</span></span><br><span class="line">    <span class="comment"># First test state</span></span><br><span class="line">    originState = State(np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>], [<span class="number">5</span>, <span class="number">6</span> , <span class="number">11</span>, <span class="number">4</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">8</span>], [<span class="number">13</span>, <span class="number">14</span>, <span class="number">12</span>, emptySite]]))</span><br><span class="line">    <span class="comment"># Second test state</span></span><br><span class="line">    <span class="comment"># originState = State(np.array([[5, 1, 7, 3], [9, 2, 11, 4], [13, 6, 15, 8], [emptySite, 10, 14, 12]]))  </span></span><br><span class="line">    State.answer = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>],[<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, State.symbol]])       </span><br><span class="line">    s1 = State(state=originState.state)</span><br><span class="line">    start = time.perf_counter_ns()      <span class="comment"># searchiing start time</span></span><br><span class="line">    <span class="keyword">global</span> amount</span><br><span class="line">    amount = <span class="number">0</span></span><br><span class="line">    path, flag = s1.IDS()</span><br><span class="line">    end = time.perf_counter_ns()        <span class="comment"># searching end time </span></span><br><span class="line">    <span class="keyword">if</span> path:                        <span class="comment"># if find the solution</span></span><br><span class="line">        steps = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> path:</span><br><span class="line">            print(<span class="string">"Step: "</span>, steps)</span><br><span class="line">            <span class="comment"># print the path from the origin to final state         </span></span><br><span class="line">            node.showPath()</span><br><span class="line">            steps += <span class="number">1</span></span><br><span class="line">        <span class="comment"># print the goal state</span></span><br><span class="line">        print(<span class="string">"Step: "</span>, steps)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                <span class="keyword">if</span> State.answer[i, j] == <span class="string">' '</span>:</span><br><span class="line">                    print(State.answer[i, j], end=<span class="string">'   '</span>)</span><br><span class="line">                <span class="keyword">elif</span> int(State.answer[i, j])&gt;<span class="number">9</span>:</span><br><span class="line">                    print(State.answer[i, j], end=<span class="string">'  '</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(State.answer[i, j], end=<span class="string">'   '</span>)</span><br><span class="line">            print(<span class="string">"\n"</span>)</span><br><span class="line">        </span><br><span class="line">        print(<span class="string">"Total steps is: "</span>, steps)</span><br><span class="line">        print(<span class="string">"The number of notes expended: "</span>, amount)</span><br><span class="line">    print(<span class="string">"CPU execution time is"</span>, (int(end)- int(start))/<span class="number">1000000</span>, <span class="string">"ms"</span>)</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>Algorithm Problem</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>AI</tag>
        <tag>Searching</tag>
        <tag>A*</tag>
        <tag>IDS</tag>
        <tag>Iterative Deepening Search</tag>
        <tag>DFS</tag>
        <tag>15-puzzle</tag>
      </tags>
  </entry>
  <entry>
    <title>Happy 2018 Mid-Autumn Festival</title>
    <url>/2018/09/23/2018MidAutumn/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvkfklu1yqj22c013iqv5.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<hr />]]></content>
      <categories>
        <category>Photo</category>
      </categories>
      <tags>
        <tag>Mid-Autumn</tag>
        <tag>Photo</tag>
      </tags>
  </entry>
  <entry>
    <title>The Owner of 2018 Nobel Prize in Chemistry</title>
    <url>/2018/10/03/2018NobelPrize/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvw2oxh2x2j212w0m8dyq.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<hr />]]></content>
      <categories>
        <category>Photo</category>
      </categories>
      <tags>
        <tag>Nobel</tag>
        <tag>photo</tag>
      </tags>
  </entry>
  <entry>
    <title>3-Local search algorithms</title>
    <url>/2018/09/17/AINote-3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvdcczwxmlj212w0m8n0c.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Hill-Climbing"><a href="#Hill-Climbing" class="headerlink" title="Hill Climbing"></a>Hill Climbing</h2><p><em>“Like climbing Everest in thick fog with amnesia”</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function HILL-CLIMBING(problem) returns a state that is a local maximum</span><br><span class="line">    inputs: problem, a problem</span><br><span class="line">    local variables: current, a node</span><br><span class="line">                     neighbor, a node</span><br><span class="line">    current &lt;- MAKE-NODE(INITIAL-STATE[problem])</span><br><span class="line">    loop do</span><br><span class="line">        neighbor &lt;- a highest-valued successor of current</span><br><span class="line">        if VALUE[neighbor] &lt;&#x3D; VALUE[current] then return STATE[current]</span><br><span class="line">        current &lt;- neighbor</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>
<p>Random-restart hill climbing overcomes local maxima—trivially complete</p>
<p>Random sideways moves escape from shoulders loop on flat maxima </p>
<h2 id="Simulated-annealing"><a href="#Simulated-annealing" class="headerlink" title="Simulated annealing"></a>Simulated annealing</h2><p>Idea: escape local maxima by allowing some “bad” moves</p>
<p>but gradually decrease their size and frequency</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function SIMULATED-ANNEALING(problem, schedule) returns a solution state</span><br><span class="line">    inputs: problem, a problem</span><br><span class="line">            schedule, a mapping from time to &quot;temperature&quot;</span><br><span class="line">    local variables: current, a node</span><br><span class="line">                     next, a node</span><br><span class="line">                     T1 a &quot;temperature&quot; controlling prob. of downward steps</span><br><span class="line">    current &lt;- MAKE-NODE(INITIAL-STATE[problem])</span><br><span class="line">    for t &lt;- 1 to infinity do</span><br><span class="line">        T &lt;- schedule[t]</span><br><span class="line">        if T&#x3D;0 then return current</span><br><span class="line">        next &lt;- a randomly selected successor of current</span><br><span class="line">        disE &lt;- VALUE[next] - VALUE[current]</span><br><span class="line">        if disE&gt;0 then current &lt;- next</span><br><span class="line">        else current &lt;- next only with probability e^(disE&#x2F;T)</span><br></pre></td></tr></table></figure>
<h2 id="Local-beam-Search"><a href="#Local-beam-Search" class="headerlink" title="Local beam Search"></a>Local beam Search</h2><p>Idea: keep k states instead of 1; choose top k of all their successors</p>
<p>Not the same as k searches run in parallel!</p>
<p>Searches that find good states recruit other searches to join them</p>
<p>Problem: quite often, all k states end up on same local hill</p>
<p>Idea: choose k successors randomly, biased towards good ones</p>
<p>Observe the close analogy to native selection!</p>
<h2 id="Genetic-Algorithms"><a href="#Genetic-Algorithms" class="headerlink" title="Genetic Algorithms"></a>Genetic Algorithms</h2><p>= stochastic local beam search + generate successors from pairs of states</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function GENETIC-ALGORITHM(population, FITNESS-FN) returns an individual</span><br><span class="line">    inputs: population, a set of individuals</span><br><span class="line">            FITNESS-FN: a function that measures the fitness of an individual</span><br><span class="line">    repeat</span><br><span class="line">        new.population &lt;- empty set</span><br><span class="line">        for i&#x3D; 1 to SIZE(population) do</span><br><span class="line">            x &lt;- RANDOM-SELECTION(population, FITNESS-FN)</span><br><span class="line">            y &lt;- RANDOM-SELECTION(population, FITNESS-FN)</span><br><span class="line">            child &lt;- REPRODUCE(x,y)</span><br><span class="line">            if (small random probability) then child &lt;- MUTATE(child)</span><br><span class="line">            add child to new_population</span><br><span class="line">        population &#x3D; new_population</span><br><span class="line">    until some individual is fit enough, or enough time has clapsed</span><br><span class="line">    return the best individual in population, according to FITNESS-FN</span><br><span class="line"></span><br><span class="line">function REPRODUCE(x,y) returns an individual</span><br><span class="line">    inputs: x,y, parent individuals</span><br><span class="line"></span><br><span class="line">    n &lt;- LENGTH(x); c&lt;- random number from 1 to n</span><br><span class="line">    return APPEND(SUBSTRING(x,1,c), SUBSTRING(y, c+1, n))</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>Course</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>AI</tag>
        <tag>Course Note</tag>
        <tag>Search</tag>
        <tag>Hill Climbing</tag>
        <tag>Simulated annealing</tag>
        <tag>Local beam search</tag>
        <tag>Genetic Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>1-Intro to AI</title>
    <url>/2018/09/01/AINote-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fuupnnk5zij212w0m8gph.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Intelligent-Agent"><a href="#Intelligent-Agent" class="headerlink" title="Intelligent Agent"></a>Intelligent Agent</h2><p><strong>Definition</strong>: An intelligent agent <strong>perceives</strong> its <strong>environment</strong> via <strong>sensors</strong> and acts <strong>rationally</strong> upon that environment with its <strong>actuators</strong>.</p>
<p><strong>Note</strong>: The agent function will internally be represented by the agent program.</p>
<h2 id="Key-Application-of-AI"><a href="#Key-Application-of-AI" class="headerlink" title="Key Application of AI"></a>Key Application of AI</h2><ul>
<li>FINANCE</li>
<li>ROBOiCS</li>
<li>GAMES</li>
<li>MEDICINE</li>
<li>THE WEB</li>
</ul>
<h2 id="Rationality-Agent"><a href="#Rationality-Agent" class="headerlink" title="Rationality Agent"></a>Rationality Agent</h2><p><strong>Definition</strong>: A rational agent chooses whichever action <strong>maximizes the expected value of the performance measure</strong> given the percept sequence to date and prior environment knowledge.</p>
<p><strong>Note</strong>: Performance measure according to what is wanted in the environment instead of how the agents should behave.</p>
<p><strong>Note</strong>: What a ratinal at a given time depends on four things:</p>
<ul>
<li>Performance measure</li>
<li>Prior environment knowledge</li>
<li>Actions</li>
<li>Percept sequence to date(sencors)<br>ationality != Omniscience, Rationality != Perfection</li>
</ul>
<h2 id="Environment-Types-important-attributes-of-AI"><a href="#Environment-Types-important-attributes-of-AI" class="headerlink" title="Environment Types(important attributes of AI)"></a>Environment Types(important attributes of AI)</h2><ul>
<li><strong>Fully Observable</strong> versus <strong>Partially Observable</strong><br>  Fully Observable means agent can get all infomation based on current state<br>  Partially Observable means agent needs memory</li>
<li><strong>Deterministic</strong> versus <strong>Stochastic</strong><br>  Deterministic means the init environment is not random, such as chess<br>  Stochastic means the init environment is random, such as Poker game</li>
<li><strong>Discrete</strong> versus <strong>Continuous</strong><br>  Discrete means limited chooses<br>  Continuous means unlimitied</li>
<li><strong>Beuign</strong> versus <strong>Adversarial</strong></li>
<li><strong>Static</strong> versus <strong>Dynamic</strong></li>
<li>Single-agent</li>
<li>Episodic</li>
</ul>
<h2 id="Agent-types"><a href="#Agent-types" class="headerlink" title="Agent types"></a>Agent types</h2><h3 id="There-are-4-basic-kind-of-agent-programs"><a href="#There-are-4-basic-kind-of-agent-programs" class="headerlink" title="There are 4 basic kind of agent programs"></a>There are 4 basic kind of agent programs</h3><ul>
<li><strong>Simple reflex agents</strong><br><img src="http://ww1.sinaimg.cn/large/cf684029ly1fuuiv5c1k6j20bj09141i.jpg" alt=""></li>
<li><strong>Model-based reflex agents</strong><br><img src="http://ww1.sinaimg.cn/large/cf684029ly1fuuiwmkehjj20bl08odix.jpg" alt=""></li>
<li><strong>Goal-based agents</strong><br><img src="http://ww1.sinaimg.cn/large/cf684029ly1fuuiwt8w4vj20bc08etbs.jpg" alt=""></li>
<li><strong>Utility-based agents</strong><br><img src="http://ww1.sinaimg.cn/large/cf684029ly1fuuiwzy4t5j20bd089whl.jpg" alt=""><br><strong>ALL these can be turned into learning agents.</strong><br><img src="http://ww1.sinaimg.cn/large/cf684029ly1fuuixmr23vj20bk08zwhl.jpg" alt=""></li>
</ul>
<hr />
]]></content>
      <categories>
        <category>Course</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>Course Note</tag>
      </tags>
  </entry>
  <entry>
    <title>4-Game_Adversarial Search</title>
    <url>/2018/09/25/AINote-4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvmrp426maj212w0m816v.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Game-Tree-2-player-deterministic-turns"><a href="#Game-Tree-2-player-deterministic-turns" class="headerlink" title="Game Tree(2-player, deterministic, turns)"></a>Game Tree(2-player, deterministic, turns)</h2><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvutmwlzmuj20gf0atwf1.jpg" alt=""></p>
<h2 id="Minimax-Algorithm"><a href="#Minimax-Algorithm" class="headerlink" title="Minimax Algorithm"></a>Minimax Algorithm</h2><h4 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h4><p>Perfect play for deterministic, perfect-information games</p>
<p>Idea: choose move to position with highest minimax value =&gt; best achievable payoff against best play</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvutqhdjr6j20ko07zq38.jpg" alt=""></p>
<h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function MINIMAX-DECISION(state) returns an action</span><br><span class="line">    inputs: state, currrent state in game</span><br><span class="line">    return the a in ACTIONS(state) maximizing MIN-VALUE(RESULT(a.state))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function MAX-VALUE(state) returns a utility value</span><br><span class="line">    if TERMINAL-TEST(state) then return UTILITY(state)</span><br><span class="line">    v &lt;- -infinity</span><br><span class="line">    for a.s in SUCCESSION(state) do v &lt;- MAX(v, MIN-VALUE(s))</span><br><span class="line">    return v</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function MIN-VALUE(state) returns a utility value</span><br><span class="line">    if TERMINAL-TEST(state) then return UTILITY(state)</span><br><span class="line">    v &lt;- infinity</span><br><span class="line">    for a.s in SUCCESSION(state) do v &lt;- MIN(v, MAX-VALUE(s))</span><br><span class="line">    return v</span><br></pre></td></tr></table></figure>
<h4 id="Properties-of-minimax"><a href="#Properties-of-minimax" class="headerlink" title="Properties of minimax"></a>Properties of minimax</h4><p>Complete: Yes, if the tree is finite</p>
<p>Optimal: Yes, against an optimal oppoent.</p>
<p>Time complexity: O(b^m)</p>
<p>Space complexity: O(bm)</p>
<p><strong>If we explore every path, the algorithm will run for a lot of time, so it’s necessary to reduce searching-width(d) or searching-depth(m)</strong></p>
<h2 id="Reduce-searching-width-d-Alpha-Beta-purning"><a href="#Reduce-searching-width-d-Alpha-Beta-purning" class="headerlink" title="Reduce searching-width(d): Alpha-Beta purning"></a>Reduce searching-width(d): Alpha-Beta purning</h2><h4 id="Concept-1"><a href="#Concept-1" class="headerlink" title="Concept"></a>Concept</h4><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvuu3g4qdxj20l10e7aax.jpg" alt=""></p>
<h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function ALPHA-BETA-DECISION(state) returns an action</span><br><span class="line">    return the a in ACTIONS(state) maximizing MIN-VALUE(RESULT(a,state))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function MAX-VALUE(state,a,b) returns a utility value</span><br><span class="line">    inputs: state, current state in game</span><br><span class="line">            a, the value of the best alternative for MAX along the path to state</span><br><span class="line">            b, the value of the best alternative for MIN along the path to state</span><br><span class="line">    IF TERMINAL-TEST(state) then return UTILITY(state)</span><br><span class="line">    v &lt;- -infinity</span><br><span class="line">    for x.s in SUCCESSORS(state) do</span><br><span class="line">        v &lt;- MAX(v, MIN-VALUE(s,a,b))</span><br><span class="line">        if v &gt;&#x3D; b then return v</span><br><span class="line">        a &lt;- MAX(a, v)</span><br><span class="line">    return v</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function MIN-VALUE(state,a,b) returns a utility value</span><br><span class="line">    same as MAX-VALUE but with roles of a,b reversed</span><br></pre></td></tr></table></figure>
<h4 id="Properties-of-Alpha-Beta"><a href="#Properties-of-Alpha-Beta" class="headerlink" title="Properties of Alpha-Beta"></a>Properties of Alpha-Beta</h4><p>Pruning <strong>does not</strong> affect final result</p>
<p>Good move ordering improvres effectiveness of pruning</p>
<p>With “perfect ordering” time complexity == O(b^(m/2))  =&gt; doubles solvable depth</p>
<h2 id="Reduce-searching-depth-m-Evaluation-functions"><a href="#Reduce-searching-depth-m-Evaluation-functions" class="headerlink" title="Reduce searching-depth(m): Evaluation functions"></a>Reduce searching-depth(m): Evaluation functions</h2><p>An evaluation function returns an estimate of the expected utility of the game from a given position, just as the heuristic functions.</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvuuqw60gwj20k803rmxi.jpg" alt=""></p>
<h2 id="Stochatic-games"><a href="#Stochatic-games" class="headerlink" title="Stochatic games"></a>Stochatic games</h2><h4 id="Schematic-game-tree"><a href="#Schematic-game-tree" class="headerlink" title="Schematic game tree"></a>Schematic game tree</h4><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvuutlwbyxj20hr0cmmxr.jpg" alt=""></p>
<h4 id="Process-Formula"><a href="#Process-Formula" class="headerlink" title="Process Formula"></a>Process Formula</h4><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvuuuer7pdj20lx05rjsa.jpg" alt=""></p>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvuuxeh3gsj20l6097jrq.jpg" alt=""></p>
<hr />]]></content>
      <categories>
        <category>Course</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>AI</tag>
        <tag>Course Note</tag>
        <tag>Game</tag>
        <tag>Adversarial Search</tag>
        <tag>Minimax</tag>
      </tags>
  </entry>
  <entry>
    <title>5-Constraint Satisfacation Problems</title>
    <url>/2018/10/06/AINote-5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvzfi0y2tfj212w0m8aiw.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Constraint-Satisfacation-Problems"><a href="#Constraint-Satisfacation-Problems" class="headerlink" title="Constraint Satisfacation Problems"></a>Constraint Satisfacation Problems</h2><p>For CSP, state is defined by variables X, with vlaues from domain D. Goal test is a set of constraints specifying, allowable combinations of values for subsets of variables.</p>
<p>For example, Map-coloring problem:</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvzfy7nqt1j20ir0duwg5.jpg" alt=""></p>
<h3 id="Constraint-Graph"><a href="#Constraint-Graph" class="headerlink" title="Constraint Graph"></a>Constraint Graph</h3><p>Binary CSP: each constraint relates at most two variables</p>
<p>Constraint graph: nodes are variables, arcs are constraints</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvzg0x7i1rj20e707cmxb.jpg" alt=""></p>
<h3 id="Extra-example-Cryptarithmetic"><a href="#Extra-example-Cryptarithmetic" class="headerlink" title="Extra example: Cryptarithmetic"></a>Extra example: Cryptarithmetic</h3><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvzg2zl7b6j20hj094t9k.jpg" alt=""></p>
<p>Variable：F T U W R O X1 X2 X3</p>
<p>Domain：{0,1,2,3,4,5,6,7,8,9}</p>
<p>Constraints：alldiff (F,T,U,W,R,O)</p>
<p>O + O = R + 10 * X1</p>
<p>X1 + W + W = U + 10 * X2</p>
<p>X2 + T + T = O + 10 * X3</p>
<p>X3 = F , T ≠ 0, F ≠ 0</p>
<h2 id="Backtracking-search"><a href="#Backtracking-search" class="headerlink" title="Backtracking search"></a>Backtracking search</h2><p>Depth-first search for CSPs with single-variable assignments is called backtracking search. Backtracking search is the basic uniformed algrithom for CSPs. It can solve n-queens for n almost equals to 25.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function BACKTRACKING-SEARCH(csp) returns solution&#x2F;failure</span><br><span class="line">    return RECURSIVE-BACKTRACKING(&#123;&#125;,csp)</span><br><span class="line">function RESCURSIVE-BACKTRACKING(assignment,csp) returns solution&#x2F;failure</span><br><span class="line">    if assignment is complete then return assignment</span><br><span class="line">    var &lt;- SELECT-UNASSIGNED-VALRIABLE(VARIABLES[csp], assignment,csp)</span><br><span class="line">    for each value in ORDER-DOMAIN-VALUES(var, assignment, csp) do</span><br><span class="line">        if value is consistent with assignment given CONSTRAINTS[csp] then</span><br><span class="line">            add &#123;var &#x3D; value&#125; to assignment</span><br><span class="line">            result &lt;- RESCURSIVE-BACKTRACKING(assignment,csp)</span><br><span class="line">            if result !&#x3D; failue then return result</span><br><span class="line">            remove &#123;var &#x3D; value&#125; from assignment</span><br><span class="line">    return failue</span><br></pre></td></tr></table></figure>
<h2 id="Minimum-remaining-values-（最小剩余值）"><a href="#Minimum-remaining-values-（最小剩余值）" class="headerlink" title="Minimum remaining values （最小剩余值）"></a>Minimum remaining values （最小剩余值）</h2><p>Choose the variable with the fewest legal values. </p>
<p>选择拥有最少合法值的变量，即约束最多的一个，按照最快失败顺序</p>
<h2 id="Degree-heuristic-（度启发式）"><a href="#Degree-heuristic-（度启发式）" class="headerlink" title="Degree heuristic （度启发式）"></a>Degree heuristic （度启发式）</h2><p>Tie-breaker among MRV variables, choose the variable with the most constraints on remaining variables. </p>
<p>选择与其他未赋值变量约束最多的变量</p>
<h2 id="Least-constraining-value-（最少约束值）"><a href="#Least-constraining-value-（最少约束值）" class="headerlink" title="Least constraining value （最少约束值）"></a>Least constraining value （最少约束值）</h2><p>Given a variable, choose the least constraining value: the one that rules out the fewest values in the remaining variables</p>
<p>给定一个变量，选择最少约束值：优先选择的值是给邻居变量留下更多的选择</p>
<h2 id="Forward-checking"><a href="#Forward-checking" class="headerlink" title="Forward checking"></a>Forward checking</h2><p>Idea: Keep track of remaining legal values for unassigned variables. Terminate search when any variable has no legal values</p>
<p>对剩下的未赋值的变量的合法值进行跟踪检查，如果发现任一变量不再拥有合法值则终止搜索算法</p>
<h3 id="Constraint-propagation"><a href="#Constraint-propagation" class="headerlink" title="Constraint propagation"></a>Constraint propagation</h3><p>Forward checking propagates information from assigned to unassigned variables, but doesn’t provide early detection for all failures:</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvzi8yaqylj20dr05iq31.jpg" alt=""></p>
<p>NT and SA cannot both be blue!</p>
<p>Constraint propagation repeatedly enforces constraints locally</p>
<p>前向检查从已赋值的变量向未赋值的变量传播信息，但是不对早期的失败提供早期的发现:</p>
<p>约束传播局部重复地实施约束</p>
<h2 id="Arc-consistency-弧相容算法-AC-3"><a href="#Arc-consistency-弧相容算法-AC-3" class="headerlink" title="Arc consistency (弧相容算法 AC-3)"></a>Arc consistency (弧相容算法 AC-3)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function AC-3(csp) returns the CSP, possibly with reduced domains</span><br><span class="line">    inputs:csp, a binary CSP with variables &#123;X1,X2,...,Xn&#125;</span><br><span class="line">    local variables:queue, a queue of arcs, initially all the arcs in csp</span><br><span class="line">    while queue is not empty do</span><br><span class="line">        (Xi,Xj) ← REMOVE-FIRST(queue)</span><br><span class="line">        if REMOVE-INCONSISTENT-VALUES(Xi,Xj) then</span><br><span class="line">            for each Xk in NEIGHBORS[Xi] do</span><br><span class="line">                add (Xk,Xi) to queue</span><br><span class="line"></span><br><span class="line">function REMOVE-INCONSISTENT-VALUES(Xi,Xj) returns true iff succeeds</span><br><span class="line">    removed ← false</span><br><span class="line">    for each x in DOMAIN[Xi] do</span><br><span class="line">        if no value y in DOMAIN[Xj] allows (x,y) to satisfy the constraint (Xi, Xj)</span><br><span class="line">            then delete x from DOMAIN[Xi]; removed ← true</span><br><span class="line">    return removed</span><br></pre></td></tr></table></figure>
<p>O(n^2^d^3^), can be reduced to O(n^2^d^2^) (but detecting all is NP-hard)</p>
<h2 id="Tree-structured-CSPs"><a href="#Tree-structured-CSPs" class="headerlink" title="Tree-structured CSPs"></a>Tree-structured CSPs</h2><p>Theorem: if the constraint graph has no loops, the CSP can be solved in O(nd^2^) time</p>
<h3 id="Algorithm-for-tree-structured-CSPs"><a href="#Algorithm-for-tree-structured-CSPs" class="headerlink" title="Algorithm for tree-structured CSPs"></a>Algorithm for tree-structured CSPs</h3><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fw038c5kc5j20fj03wwen.jpg" alt=""></p>
<ol>
<li>Choose a variable as root, order variables from root to leaves such that every node’s parent precedes it in the ordering</li>
<li>For j from n down to 2, apply RemoveInconsistent(Parent(Xj), Xj)</li>
<li>For j from 1 to n, assign Xj consistently with Parent(Xj)</li>
</ol>
<hr />]]></content>
      <categories>
        <category>Course</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>AI</tag>
        <tag>Course Note</tag>
        <tag>Constraint Satisfacation Problems</tag>
        <tag>CSPs</tag>
      </tags>
  </entry>
  <entry>
    <title>2-Problem Solving</title>
    <url>/2018/09/05/AINote-2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fuzkfsqtqpj212w0m87wi.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="DEFINITION-OF-A-PROBLEM"><a href="#DEFINITION-OF-A-PROBLEM" class="headerlink" title="DEFINITION OF A PROBLEM"></a>DEFINITION OF A PROBLEM</h2><ul>
<li>Initial state</li>
<li>Actions(s) -&gt; {a1,a2,a3,……}</li>
<li>Result(s, a) -&gt; s’</li>
<li>GoalTest(s) -&gt; T|F</li>
<li>Path Cost(s,a) -&gt; n<br>StepCost(s,a,s’) -&gt; m</li>
</ul>
<h2 id="Problem-types"><a href="#Problem-types" class="headerlink" title="Problem types"></a>Problem types</h2><ul>
<li>Deterministic, fully observable =&gt; single-state problem</li>
<li>Non-observable =&gt; conformant problem</li>
<li>Nondeterministic and/or partially observable =&gt; contingency problem</li>
<li>Unknown state space =&gt; exploration problem(“online”)</li>
</ul>
<h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><p><strong>Optimal</strong>: Yes. Always find the shortest(not the cheapest) path.</p>
<p><strong>Complete</strong>: Yes</p>
<p><strong>Time</strong>: $O(b^{d+1})$</p>
<p><strong>Space</strong>: $O(b^{d+1})$</p>
<p><strong>Implement</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BFS(G, s)</span><br><span class="line">for each vertex u &lt;- G. V - &#123;s&#125;</span><br><span class="line">  u.color &#x3D; WHITE</span><br><span class="line">  u.distance &#x3D; infinity</span><br><span class="line">  u.pre &#x3D; NULL</span><br><span class="line">s.color &#x3D; GRAY</span><br><span class="line">s.distance &#x3D; 0</span><br><span class="line">s.pre &#x3D; NULL</span><br><span class="line">Q &#x3D; NULL</span><br><span class="line">ENQUEUE(Q, s)</span><br><span class="line">while Q !&#x3D; NULL</span><br><span class="line">  u &#x3D; DEQUEUE(Q)</span><br><span class="line">  for each v &lt;- G. Adj[u]</span><br><span class="line">    if v.color &#x3D;&#x3D; WHITE</span><br><span class="line">        v.color &#x3D; GRAY</span><br><span class="line">        v.distance &#x3D; u.distance + cost[u, v]</span><br><span class="line">        v.pre &#x3D; u</span><br><span class="line">        &#x2F;&#x2F; GOAL-TEST(v)</span><br><span class="line">        ENQUEUE(Q, v)</span><br><span class="line">  u.color &#x3D; BLACK</span><br><span class="line"></span><br><span class="line">Note: WHITE-NOT EXPANDED  GRAY-FRONTIER BLACK-EXPLORED</span><br><span class="line">      Q is a FIFO queue</span><br><span class="line">      s is the source vertex</span><br><span class="line">      GOAL-TEST(v) to test if v is the goal vertex</span><br><span class="line"></span><br><span class="line">Based on Intro to Algorithms. 3rd Edition. P595</span><br></pre></td></tr></table></figure>
<h2 id="Uniform-Cost-Search-Cheapest-Search"><a href="#Uniform-Cost-Search-Cheapest-Search" class="headerlink" title="Uniform-Cost Search (Cheapest-Search)"></a>Uniform-Cost Search (Cheapest-Search)</h2><p>Stop only until the goal is removed from Frontier to Explored</p>
<p><strong>Optimal:</strong> Yes. Always find the cheapest path</p>
<p><strong>Complete:</strong> Yes</p>
<p><strong>Implement</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Uniform-Cost Search(G, s)</span><br><span class="line">for each vertex u &lt;- G. V - &#123;s&#125;</span><br><span class="line">  u.color &#x3D; WHITE</span><br><span class="line">  u.distance &#x3D; infinity</span><br><span class="line">  u.pre &#x3D; NULL</span><br><span class="line">s.color &#x3D; GRAY</span><br><span class="line">s.distance &#x3D; 0</span><br><span class="line">s.pre &#x3D; NULL</span><br><span class="line">Q &#x3D; NULL</span><br><span class="line">ENQUEUE(Q, s)</span><br><span class="line">while Q !&#x3D; NULL</span><br><span class="line">  u &#x3D; DEQUEUE(Q)</span><br><span class="line">  &#x2F;&#x2F; GOAL-TEST(u)</span><br><span class="line">  for each v &lt;- G. Adj[u]</span><br><span class="line">    if v.color &#x3D;&#x3D; WHITE</span><br><span class="line">        v.color &#x3D; GRAY</span><br><span class="line">        v.distance &#x3D; u.distance + cost[u, v]</span><br><span class="line">        v.pre &#x3D; u</span><br><span class="line">        ENQUEUE(Q, v)</span><br><span class="line">  Q.sort()  &#x2F;&#x2F;by distance</span><br><span class="line">  u.color &#x3D; BLACK</span><br><span class="line"></span><br><span class="line">Note: WHITE-NOT EXPANDED  GRAY-FRONTIER BLACK-EXPLORED</span><br><span class="line">      s is the source vertex</span><br><span class="line">      Q.sort() sorts vertices by their cost (most from lowest to highest)</span><br><span class="line">      GOAL-TEST(u) is different from BFS because it can find the cheapest path correctly only when the goal vertx is removed from Frontier to Explored(most, when values of paths are different)</span><br><span class="line"></span><br><span class="line">Based on Intro to Algorithms. 3rd Edition. P595</span><br></pre></td></tr></table></figure></p>
<h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><p><strong>Optimal:</strong> No. For example, in the tree below, if there is a goal both in 3 and 5, it will find 3 but not find 5, so it can’t find the shortest path.<br><img src="http://ww1.sinaimg.cn/large/cf684029ly1fuzk4l7z7fj204j03jgm0.jpg" alt=""></p>
<p><strong>Complete:</strong> No. If there is a infinite tree, it will have a endless path to go down</p>
<p><strong>Time</strong>: $O(b^m)$</p>
<p><strong>Space</strong>: $O(bm)$</p>
<p><strong>Implement</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DFS(G)</span><br><span class="line">for each vertex u &lt;- G.V</span><br><span class="line">  u.color &#x3D; WHITE</span><br><span class="line">  u.pre &#x3D; NULL</span><br><span class="line">time &#x3D; 0</span><br><span class="line">for each vertex u &lt;- G.V</span><br><span class="line">  if u.color &#x3D;&#x3D; WHITE</span><br><span class="line">    DFS-VISIT(G, u)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DFS-VISIT(G, u)</span><br><span class="line">time &#x3D; time + 1 &#x2F;&#x2F;white vertex u has just been discovered</span><br><span class="line">u.d &#x3D; time</span><br><span class="line">&#x2F;&#x2F; GOAL-TEST(u)</span><br><span class="line">u.color &#x3D; GREY</span><br><span class="line">for each v &lt;- G.Adj[u]  &#x2F;&#x2F;explore edge (u,v)</span><br><span class="line">  if v.color &#x3D;&#x3D; WHITE</span><br><span class="line">    v.pre &#x3D; u</span><br><span class="line">    DFS-VISIT(G, v)</span><br><span class="line">u.color &#x3D; BLACK &#x2F;&#x2F;blacken u; it is finished</span><br><span class="line">time &#x3D; time + 1</span><br><span class="line">u.f &#x3D; time</span><br><span class="line"></span><br><span class="line">Note: WHITE-NOT EXPANDED  GRAY-FRONTIER BLACK-EXPLORED</span><br><span class="line">      time is global variable using for timestamping</span><br><span class="line">      DFS records when it discovers vertex u in the attribute u.d and when it finishes vertex u in the attribute u.f</span><br><span class="line">      u.d &lt; u.f</span><br><span class="line"></span><br><span class="line">Based on Intro to Algorithms. 3rd Edition. P604</span><br></pre></td></tr></table></figure></p>
<h2 id="Iterative-Deepening-Search"><a href="#Iterative-Deepening-Search" class="headerlink" title="Iterative Deepening Search"></a>Iterative Deepening Search</h2><p><strong>Optimal:</strong> Yes</p>
<p><strong>Complete:</strong> Yes</p>
<p><strong>Time</strong>: $O(b^d)$</p>
<p><strong>Space</strong>: $O(bd)$</p>
<p><strong>Implement</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function ITERATIVE-DEEPENING-SEARCH(problem) returns a solution, or failure</span><br><span class="line">  for depth &#x3D; 0 to infinity do</span><br><span class="line">    result &#x3D; DEPTH-LIMITED&#x3D;SEARCH(problem, depth)</span><br><span class="line">    if result !&#x3D; cutoff then return result</span><br><span class="line"></span><br><span class="line">function DEPTH-LIMITED-SEARCH(problem, limit) returns a solution, or failure&#x2F;cutoff</span><br><span class="line">  return RECURSIVE-DLS(MAKE-NODE(problem, INITIAL-STATE), problem, limit)</span><br><span class="line"></span><br><span class="line">function RECURSIVE-DLS(node, problem, limit) returns a solution, or failure&#x2F;cutoff</span><br><span class="line">  if problem.GOAL-TEST(node, STATE) then returns SOLUTION(node)</span><br><span class="line">  else if limit &#x3D; 0 then return cutoff</span><br><span class="line">  else</span><br><span class="line">    cutoff_occurred? &#x3D; false</span><br><span class="line">    for each action in problem, ACTIONS(node, STATE) do</span><br><span class="line">      child &#x3D; CHILD_NODE(problem, node, action)</span><br><span class="line">      result &#x3D; RECURSIVE_DLS(child, problem, limit-1)</span><br><span class="line">      if result &#x3D; cutoff then cutoff_occured? &#x3D; true</span><br><span class="line">      else if result !&#x3D; failure then return result</span><br><span class="line">    if curoff_occured? then return cutoff else return failure</span><br><span class="line"></span><br><span class="line">Based on Artifical Intelligence: A Modern Approch, 3rd Edition. P88~P89</span><br></pre></td></tr></table></figure></p>
<h2 id="Greedy-best-first-Search"><a href="#Greedy-best-first-Search" class="headerlink" title="Greedy best-first Search"></a>Greedy best-first Search</h2><p><strong>Optimal:</strong> No</p>
<p><strong>Complete:</strong> No</p>
<p><strong>Time</strong>: $O(b^m)$</p>
<p><strong>Space</strong>: $O(bm)$</p>
<p><strong>Implement</strong></p>
<p>Evaluation function h(n) (heuristic) = estimate of cost from n to the closest goal<br>E.g., hSLD(n) = straight-line distance from n to Bucharest<br>Greedy search expands the node that appears to be closest to goal</p>
<h2 id="A-Search-Heuristic-Search"><a href="#A-Search-Heuristic-Search" class="headerlink" title="A* Search (Heuristic Search)"></a>A* Search (Heuristic Search)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f &#x3D; g + h</span><br><span class="line">g(path) &#x3D; path cost</span><br><span class="line">h(path) &#x3D; h(s) &#x3D; estimated distance to the goal</span><br><span class="line">Stop only until the goal is removed from Frontier</span><br></pre></td></tr></table></figure>
<p><strong>Finds lowest cost path if:</strong></p>
<ul>
<li><strong>h(s) &lt;= true cost</strong></li>
<li>h never overestimate</li>
<li>h optimistic</li>
<li>h admissable</li>
</ul>
<p><strong>Implement</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A*(G, s)</span><br><span class="line">for each vertex u &lt;- G. V - &#123;s&#125;</span><br><span class="line">  u.color &#x3D; WHITE</span><br><span class="line">  u.distance &#x3D; infinity</span><br><span class="line">  u.pre &#x3D; NULL</span><br><span class="line">s.color &#x3D; GRAY</span><br><span class="line">s.distance &#x3D; 0</span><br><span class="line">s.pre &#x3D; NULL</span><br><span class="line">s.f &#x3D; s.distance + h(s)</span><br><span class="line">Q &#x3D; NULL</span><br><span class="line">ENQUEUE(Q, s)</span><br><span class="line">while Q !&#x3D; NULL</span><br><span class="line">  u &#x3D; DEQUEUE(Q)</span><br><span class="line">  &#x2F;&#x2F; GOAL-TEST(u)</span><br><span class="line">  for each v &lt;- G. Adj[u]</span><br><span class="line">    if v.color &#x3D;&#x3D; WHITE</span><br><span class="line">        v.color &#x3D; GRAY</span><br><span class="line">        v.distance &#x3D; u.distance + cost[u, v]</span><br><span class="line">        v.f &#x3D; v.distance + h(v)</span><br><span class="line">        v.pre &#x3D; u</span><br><span class="line">        ENQUEUE(Q, v)</span><br><span class="line">  Q.sort()  &#x2F;&#x2F;by f</span><br><span class="line">  u.color &#x3D; BLACK</span><br><span class="line"></span><br><span class="line">Note: WHITE-NOT EXPANDED  GRAY-FRONTIER BLACK-EXPLORED</span><br><span class="line">      s is the source vertex</span><br><span class="line">      h(u) is the estimated distance to the goal vertex</span><br><span class="line">      Q.sort() sorts vertices by their u.f which is equal to u.distance + h(u)</span><br><span class="line">      A* stops searching only when the goal vertx is removed from Frontier to Explored(most, when values of paths are different)</span><br><span class="line"></span><br><span class="line">Based on Intro to Algorithms. 3rd Edition. P595</span><br></pre></td></tr></table></figure></p>
<h2 id="Problems-with-Search"><a href="#Problems-with-Search" class="headerlink" title="Problems with Search"></a>Problems with Search</h2><p>Problem-Sloving works when:</p>
<ul>
<li>Fully Observable</li>
<li>Known state space</li>
<li>Discrete</li>
<li>Deterministic</li>
<li>Static<hr /></li>
</ul>
]]></content>
      <categories>
        <category>Course</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>AI</tag>
        <tag>A*</tag>
        <tag>IDS</tag>
        <tag>Iterative Deepening Search</tag>
        <tag>DFS</tag>
        <tag>Course Note</tag>
        <tag>Search</tag>
        <tag>BFS</tag>
        <tag>Uniform-Cost Search</tag>
        <tag>Greedy best-first Search</tag>
      </tags>
  </entry>
  <entry>
    <title>8-Uncertainty</title>
    <url>/2018/12/08/AINote-8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fxzq5xephoj212w0m878l.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Conditional-probability"><a href="#Conditional-probability" class="headerlink" title="Conditional probability"></a>Conditional probability</h2><p>Definition of conditional probability:</p>
<script type="math/tex; mode=display">P(a|b) = {P(a \bigwedge b) \over P(b)}</script><p><strong>Product rule</strong> gives an alternative formulation:</p>
<script type="math/tex; mode=display">P(a \bigwedge b) = P(a|b)P(b) = P(b|a)P(a)</script><p><strong>Chain rule</strong> is derived by successive application of product rule:</p>
<script type="math/tex; mode=display">P(X_1,...,X_n)=P(X_1,...,X_{n-1})P(X_n|X_1,...,X_{n-1})=...=\prod_{i=1}^nP(X_i|X_1,...,X_{i-1})</script><h2 id="Independence"><a href="#Independence" class="headerlink" title="Independence"></a>Independence</h2><p>A and B are independent iff</p>
<p>$P(A|B)=P(A)$ or $P(B|A)=P(B)$ or $P(A,B)=P(A)P(B)$</p>
<h2 id="Conditional-independence"><a href="#Conditional-independence" class="headerlink" title="Conditional independence"></a>Conditional independence</h2><script type="math/tex; mode=display">P(Toothache,Catch|Cavity) = P(Toothache|Cavity)P(Catch|Cavity)</script><p>Conditional independence is our most basic and robust form of knowledge about uncertain environments.</p>
<h2 id="Bayes’-Rule"><a href="#Bayes’-Rule" class="headerlink" title="Bayes’ Rule"></a>Bayes’ Rule</h2><script type="math/tex; mode=display">P(a|b)={P(b|a)P(a) \over P(b)}</script><hr />]]></content>
      <categories>
        <category>Course</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>Course Note</tag>
        <tag>Probability</tag>
        <tag>Independence</tag>
      </tags>
  </entry>
  <entry>
    <title>6-Logical Agents</title>
    <url>/2018/10/20/AINote-6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fwflggtwdmj212w0m8drl.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Knowledge-based-agents"><a href="#Knowledge-based-agents" class="headerlink" title="Knowledge-based agents"></a>Knowledge-based agents</h2><p><strong>Knowledge base</strong> = set of sentences in a formal language</p>
<h3 id="Basic-actions-Ask-Tell"><a href="#Basic-actions-Ask-Tell" class="headerlink" title="Basic actions:Ask/Tell"></a>Basic actions:Ask/Tell</h3><ul>
<li>A knowledge base keeps track of things</li>
<li>we can <strong>TELL</strong> it facts and <strong>ASK</strong> for inference</li>
</ul>
<h3 id="At-every-step"><a href="#At-every-step" class="headerlink" title="At every step:"></a>At every step:</h3><ul>
<li>Construct a sentence with assertion about percepts</li>
<li>Construct a sentence asking what action is next</li>
<li>Construct a sentence asserting that action</li>
</ul>
<h2 id="Logic-in-general"><a href="#Logic-in-general" class="headerlink" title="Logic in general"></a>Logic in general</h2><h3 id="Basic-concepts"><a href="#Basic-concepts" class="headerlink" title="Basic concepts"></a>Basic concepts</h3><p><strong>Logics</strong> are formal languages for representing information such that conclusions can be drawn</p>
<p><strong>Syntax</strong> defines the sentences in the language</p>
<p><strong>Semantics</strong> define the “meaning” of sentences, i.e., define truth of a sentence in a world</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fy1j1yuolcj20gt05awf3.jpg" alt="2"></p>
<h3 id="Entailment"><a href="#Entailment" class="headerlink" title="Entailment"></a>Entailment</h3><p>Entailment means that one thing follows from another: $KB$ |= $\alpha$</p>
<p>Knowledge base KB entails sentence α if and only if where KB is true, α is also true</p>
<p>Entailment is a relationship between sentences (i.e., syntax) that is based on semantics</p>
<h3 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h3><p>Logicians typically think in terms of models, which are formally structured worlds with respect to which truth can be evaluated, which means models describe possible worlds. </p>
<p>We say m is a model of a sentence α if α is true in m</p>
<p>$M(α)$ is the set of all models of $α$</p>
<p>$KB$ |= $α$, if and only if $M(KB) \subseteq M(α)$ </p>
<h2 id="Logical-equivalence"><a href="#Logical-equivalence" class="headerlink" title="Logical equivalence"></a>Logical equivalence</h2><p>Two sentences are logically equivalent iff true in same models:</p>
<p>$α ≡ β$ if and only if $α$ |= $β$ and $β$ |= $α$</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fwfmmc64l4j20ge08bq4f.jpg" alt=""></p>
<h2 id="Validity-and-satisfiability"><a href="#Validity-and-satisfiability" class="headerlink" title="Validity and satisfiability"></a>Validity and satisfiability</h2><p><strong>Validity</strong>: it is true in all models</p>
<p><strong>Deduction</strong>: $α$ |= $β$ iff $α \Rightarrow β$</p>
<p><strong>Satisfiability</strong>: if some model makes it true</p>
<p><strong>Unsatisfiable:</strong> if it is true in no models</p>
<h2 id="Inference-Forward-chaining-amp-Backward-chaining"><a href="#Inference-Forward-chaining-amp-Backward-chaining" class="headerlink" title="Inference: Forward chaining &amp; Backward chaining"></a>Inference: Forward chaining &amp; Backward chaining</h2><h3 id="Horn-Form"><a href="#Horn-Form" class="headerlink" title="Horn Form"></a>Horn Form</h3><ul>
<li>KB conjunction of Horn clauses</li>
<li>Horn Clause(at most one literal is Positive)</li>
<li>For examples: $（¬ P \bigvee ¬Q\bigvee V)$ is a Horn Clause</li>
<li>so is $(¬ P \bigvee ¬ Q)$, but $(¬P \bigvee Q\bigvee V)$ is not</li>
<li>Definite Clauses: exactly one literal is positive</li>
<li>Horn Clauses can be re-written as implications:<ul>
<li>proposition symbol(fact) or</li>
<li>conjunction of symbols (body or premise) $\Rightarrow$ symbol(head)</li>
<li>Examples: $(¬ C \bigvee ¬ B \bigvee A)$ becomes $(C\bigwedge B \Rightarrow A)$, because $(\alpha \Rightarrow \beta \equiv (¬ \alpha \bigvee \beta))$</li>
</ul>
</li>
</ul>
<h3 id="Video-about-the-process-of-FC-and-BC"><a href="#Video-about-the-process-of-FC-and-BC" class="headerlink" title="Video about the process of FC and BC"></a>Video about the process of FC and BC</h3><iframe width="90%" height="480" src="https://www.youtube.com/embed/EZJs6w2YFRM" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>

<h2 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h2><h3 id="CNF"><a href="#CNF" class="headerlink" title="CNF"></a>CNF</h3><p>conjunction of <strong>disjunctions of literals</strong>(clauses)</p>
<p>E.g., $(A ∨ ¬B) ∧ (B ∨ ¬C ∨ ¬D)$</p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%90%88%E5%8F%96%E8%8C%83%E5%BC%8F" target="_blank" rel="noopener">More details about CNF in wiki</a></p>
<h3 id="Resolution-Algorithm"><a href="#Resolution-Algorithm" class="headerlink" title="Resolution Algorithm"></a>Resolution Algorithm</h3><p>Proof by contradiction, i.e., show $KB ∧ ¬α$ unsatisfiable to prove $KB$ |= $α$ satisfiable</p>
<h3 id="Video-about-the-process-of-the-resolution-algorithm"><a href="#Video-about-the-process-of-the-resolution-algorithm" class="headerlink" title="Video about the process of the resolution algorithm"></a>Video about the process of the resolution algorithm</h3><iframe width="90%" height="480" src="https://www.youtube.com/embed/PMm5Mat0MRA" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>

<hr />]]></content>
      <categories>
        <category>Course</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>AI</tag>
        <tag>Course Note</tag>
        <tag>Logical Agents</tag>
        <tag>Forward chaining</tag>
        <tag>Backward chaining</tag>
      </tags>
  </entry>
  <entry>
    <title>7-First Order Logic</title>
    <url>/2018/11/12/AINote7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx69s00ej5j20ad06mdgf.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="First-Order-Logic-Formal-Natural-Languages"><a href="#First-Order-Logic-Formal-Natural-Languages" class="headerlink" title="First Order Logic: Formal/Natural Languages"></a>First Order Logic: Formal/Natural Languages</h2><p>Whereas propositional logic assumes world contains <strong>facts</strong>, fitst-order logic(like natural language) assumes the world contains.</p>
<ul>
<li>Objects: people, houses, numbers, theories …</li>
<li>Relations: red, round, bogus …, brother of, bigger than, inside …</li>
<li>Functions: father of, best friend, end of …</li>
</ul>
<h2 id="Syntax-of-FOL"><a href="#Syntax-of-FOL" class="headerlink" title="Syntax of FOL"></a>Syntax of FOL</h2><h3 id="Basic-elements"><a href="#Basic-elements" class="headerlink" title="Basic elements"></a>Basic elements</h3><ul>
<li>Constants: KingJohn, 2, UCB…</li>
<li>Predicates: Brother, &gt;, …</li>
<li>Functions: Sqrt, LeftLegOf, …</li>
<li>Variables: x, y, a, b…</li>
<li>Connectives: $\bigvee, \bigwedge, \Rightarrow$</li>
<li>Equality: $=$</li>
<li>Quantifiers: $\forall, \exists$</li>
</ul>
<h3 id="More-on-Syntax"><a href="#More-on-Syntax" class="headerlink" title="More on Syntax"></a>More on Syntax</h3><ul>
<li>Three kinds of symbols<ul>
<li>Constant: objects</li>
<li>Predicate: relations</li>
<li>Function: functions (i.e. can return values other than truth vals)</li>
</ul>
</li>
<li>Predicate and Function have <strong>arity</strong>.</li>
<li>Symbols have an interpretation.</li>
<li><strong>Terms</strong>: $function(term_1 ,…, term_n)$ or constant or variable, i.e. $LeftLeg(John)$</li>
<li><strong>Atomic Sentences</strong> state facts: $predicate(term_1,…,term_n)$ or $term_1 = term_2$, i.e. $Brother(Richard, John)$</li>
<li><strong>Complex Sentences</strong>: $Brother(R,J) \bigwedge Brother(J,R)$</li>
<li><strong>Universal Quantifiers</strong>: $\forall (variable) (sentence)$, i.e. $\forall King(x) \Rightarrow Person(x)$<ul>
<li><strong>A common mistake to avoid</strong>: <ul>
<li>Typically, $\Rightarrow$ is the main connective with $\forall$. </li>
<li>Common mistake: using $\bigwedge$ as the main connective with $\forall$: <script type="math/tex">\forall x At(Berkeley) \bigwedge Smart(x)</script> means “Everyone is at Berkeley and everyone is smart”, not “Everyone at Berkeley is smart”, which should to be <script type="math/tex">\forall x At(x, Berkeley) \Rightarrow Smart(x)</script></li>
</ul>
</li>
</ul>
</li>
<li><strong>Existential Quantifiers</strong>: $\exists <variable> <sentence>$, i.e. $\exists Crown(x) \bigwedge OnHead(x,John)$<ul>
<li><strong>A common mistake to avoid</strong>:<ul>
<li>Typically, $\bigwedge$ is the main connective with $\exists$.</li>
<li>Common mistake: using $\Rightarrow$ as the main connective with $\exists$: <script type="math/tex">\exists x At(x, Standford) \Rightarrow Smart(x)</script> is true even if there is anyone who is at Stanford! The correct one is <script type="math/tex">\exists x At(x, Standford) \bigwedge Smart(x)</script></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Properties-of-quantifiers"><a href="#Properties-of-quantifiers" class="headerlink" title="Properties of quantifiers"></a>Properties of quantifiers</h4><ul>
<li>$\forall x \forall y$ is the same as $\forall y \forall x$</li>
<li>$\exists x \exists y$ is the same as $\exists x \exists y$</li>
<li>$\exists x \forall y$ is <strong>not</strong> the same as $\forall x \exists y$</li>
</ul>
<h4 id="Equality"><a href="#Equality" class="headerlink" title="Equality"></a>Equality</h4><p>$term_1 = term_2$ is true under a given interpretation if and only if $term_1$ and $term_2$ refer to the same object.</p>
<p>E.g. $1=2$ and $\forall xMutiple(Sqrt(x), Sqrt(x)) = x$ are satisfiable, $2=2$ is vaild.</p>
<hr />]]></content>
      <categories>
        <category>Course</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>AI</tag>
        <tag>Course Note</tag>
        <tag>FOL</tag>
        <tag>First Order Logic</tag>
      </tags>
  </entry>
  <entry>
    <title>9-Machine Learning</title>
    <url>/2018/12/08/AINote-9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fy042z90m9j212w0m8134.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Learning-agents"><a href="#Learning-agents" class="headerlink" title="Learning agents"></a>Learning agents</h2><p>Design of a learning element is affected by</p>
<ul>
<li>Which components of the performance element are to be learned</li>
<li>What feedback is available to learn these components</li>
<li>What representation is used for the components</li>
</ul>
<p>Type of feedback:</p>
<ul>
<li><strong>Supervised learning</strong>: correct answers for each example</li>
<li><strong>Unsupervised learning</strong>: correct answers not given</li>
<li><strong>Reinforcement learning</strong>: occasional rewards</li>
</ul>
<h2 id="Inductive-learning"><a href="#Inductive-learning" class="headerlink" title="Inductive learning"></a>Inductive learning</h2><p>Simplest form: learn a function from examples</p>
<p>$f$ is the <strong>target function</strong></p>
<p>An example is a pair $(x,f(x))$</p>
<p>Problem: find a <strong>hypothesis</strong> h</p>
<ul>
<li>such that $h \approx f$</li>
<li>given a <strong>training set</strong> of examples</li>
</ul>
<p>(This is a highly simplified model of real learning:</p>
<ul>
<li>Ignores prior knowledge</li>
<li>Assumes examples are given)</li>
</ul>
<h2 id="Decision-tree-learning"><a href="#Decision-tree-learning" class="headerlink" title="Decision tree learning"></a>Decision tree learning</h2><p>One possible representation for hypotheses</p>
<p>E.g., here is the “true” tree for deciding whether to wait:</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fxzuinv5czj20dx08oq3p.jpg" alt=""></p>
<h3 id="Expressiveness"><a href="#Expressiveness" class="headerlink" title="Expressiveness"></a>Expressiveness</h3><p>Decision trees can express any function of the input attributes.</p>
<p>E.g., for Boolean functions, truth table row → path to leaf:</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fxzukg8b67j20fb04z74e.jpg" alt=""></p>
<p>There is another example:</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fy02ruj2k3j20nm0dxn0x.jpg" alt="4"></p>
<h3 id="Hypothesis-spaces"><a href="#Hypothesis-spaces" class="headerlink" title="Hypothesis spaces"></a>Hypothesis spaces</h3><p>How many distinct decision trees with n Boolean attributes?</p>
<p>= number of Boolean functions</p>
<p>= number of distinct truth tables with $2^n$ rows = $2^{2^n}$</p>
<h3 id="Decision-tree-learning-algorithm"><a href="#Decision-tree-learning-algorithm" class="headerlink" title="Decision tree learning algorithm"></a>Decision tree learning algorithm</h3><p>Aim: find a small tree consostent with the training examples</p>
<p>Idea: (recurisvely) choose “most significant” attribute as root of (sub)tree</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fxzuoap2e4j20fq07qabg.jpg" alt=""></p>
<h4 id="Choosing-an-attribute"><a href="#Choosing-an-attribute" class="headerlink" title="Choosing an attribute"></a>Choosing an attribute</h4><p>Idea: a good attribute splits the examples into subsets that are (idealy) “all positive” or “all negative”</p>
<h4 id="Using-information-theory"><a href="#Using-information-theory" class="headerlink" title="Using information theory"></a>Using information theory</h4><p>To implement Choose-Attribute in the DTL algorithm</p>
<p>Information Content(Entropy)</p>
<script type="math/tex; mode=display">I(P(v_1),...,P(v_n)) = \sum_{i=1}^n -P(v_i)log_2P(v_i)</script><p>For a training set containing p positive examples and n negative examples:</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fy04e8ejmuj20c101rjr9.jpg" alt="5"></p>
<h4 id="Information-gain"><a href="#Information-gain" class="headerlink" title="Information gain"></a>Information gain</h4><p>A chosen attribute A divides the training set E into subsets $E_1, … , E_v$ according to their values for A, where A has $v$ distinct values.</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fy04fpipfwj20c601m748.jpg" alt="6"></p>
<p>Information Gain (IG) or reduction in entropy from the attribute test:</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fy04g94s5nj20bj01hjrc.jpg" alt="7"></p>
<p>It’s same as </p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fy04hopy9gj20f602dq3h.jpg" alt="8"></p>
<iframe width="90%" height="480" src="https://www.youtube.com/embed/eLlYSpVjH94" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<h2 id="Neural-Networks"><a href="#Neural-Networks" class="headerlink" title="Neural Networks"></a>Neural Networks</h2><iframe width="90%" height="480" src="https://www.youtube.com/embed/A6UCSkOut7U" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<hr />
]]></content>
      <categories>
        <category>Course</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>Course Note</tag>
        <tag>Machine Leraning</tag>
        <tag>decision tree</tag>
        <tag>linear regression</tag>
        <tag>neural networks</tag>
      </tags>
  </entry>
  <entry>
    <title>All Pairs Shortest Paths</title>
    <url>/2018/11/11/AllPairsShortestPaths/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx54bryekmj206v050jrb.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Shortest-paths-and-matrix-multiplication"><a href="#Shortest-paths-and-matrix-multiplication" class="headerlink" title="Shortest paths and matrix multiplication"></a>Shortest paths and matrix multiplication</h2><h3 id="A-recursive-solution-to-the-all-pairs-shortest-paths-problem"><a href="#A-recursive-solution-to-the-all-pairs-shortest-paths-problem" class="headerlink" title="A recursive solution to the all-pairs shortest-paths problem"></a>A recursive solution to the all-pairs shortest-paths problem</h3><p>Now, let $l_{ij}^{(m)}$ be the minimum weight of any path from vertex i to vertex j that contains at most m edges. When $m=0$, there is a shortest path from i to j with no edges if and only if $i=j$. Thus,</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx4lh0e4ocj204u01wmwy.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx4lhtph6hj208601zglh.jpg" alt=""></p>
<p>The actual shortest-path weights are given by</p>
<p>$\delta(i,j) = l^{(n-1)}<em>{ij} = l^{(n)}</em>{ij} = l^{(n+1)}_{ij} = …$</p>
<p>Because there is a shortest path from i to j that is simple and thus contains at most n-1 edges.</p>
<h3 id="Computing-the-shortest-path-weights-bottom-up"><a href="#Computing-the-shortest-path-weights-bottom-up" class="headerlink" title="Computing the shortest-path weights bottom up"></a>Computing the shortest-path weights bottom up</h3><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx4lnitfl3j207h04x74d.jpg" alt=""></p>
<p>Which extends the shortest paths computed so far by one more edge.</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx4lrf7nsjj20a403uglp.jpg" alt=""></p>
<p>Running time: $\Theta(n^4)$</p>
<h3 id="Improving-the-running-time"><a href="#Improving-the-running-time" class="headerlink" title="Improving the running time"></a>Improving the running time</h3><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx4luckazcj20ah04w74f.jpg" alt=""></p>
<p>Running time: $\Theta(n^3 lgn)$</p>
<h2 id="The-Floyd-Warshall-algorithm"><a href="#The-Floyd-Warshall-algorithm" class="headerlink" title="The Floyd-Warshall algorithm"></a>The Floyd-Warshall algorithm</h2><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx4m4r802uj209m04zjri.jpg" alt=""></p>
<p>Running time: $\Theta(n^3)$</p>
<h3 id="Transitive-closure-of-a-directed-graph"><a href="#Transitive-closure-of-a-directed-graph" class="headerlink" title="Transitive closure of a directed graph"></a>Transitive closure of a directed graph</h3><p>We define the transitive closure of G as the graph $G^<em>=(V, E^</em>)$, where $E^* = (i,j):$ there is a path from vertex i to vertex j in G. </p>
<p>One way to compute the transitive closure of a graph in $\Theta(n^3)$ time is to assign a weight of 1 to each edge of E and run the Floyd-Warshall algorithm. If there is a path from vertex i to vertex j, we get $d<em>(ij) &lt; n$. Otherwise, we get $d</em>(ij) =1$.</p>
<h2 id="Johnson’s-algorithm-for-sparse-graphs"><a href="#Johnson’s-algorithm-for-sparse-graphs" class="headerlink" title="Johnson’s algorithm for sparse graphs"></a>Johnson’s algorithm for sparse graphs</h2><p>Johnson’s algorithm finds shortest paths between all pairs in $O(V^2lgV+VE)$ time.</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx4n7wb4v1j20cu091gmj.jpg" alt=""></p>
<hr />]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Shortest Paths</tag>
        <tag>Floyd-Warshall</tag>
        <tag>Johnson&#39;s algorithm</tag>
        <tag>Graph Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>BFS and DFS</title>
    <url>/2018/12/29/BFSandDFS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fynh2cx3u2j212w0m8tcu.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Pseudocode"><a href="#Pseudocode" class="headerlink" title="Pseudocode"></a>Pseudocode</h2><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BFS</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> (q != <span class="literal">None</span>):</span><br><span class="line">        u = q.popleft()</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> subState[u]:</span><br><span class="line">            <span class="keyword">if</span> Flag(v) <span class="keyword">and</span> Optimize(v):</span><br><span class="line">                setFlag(v)</span><br><span class="line">                v.pre = u</span><br><span class="line">                <span class="keyword">if</span> goalTest(v):</span><br><span class="line">                    outputResult()</span><br><span class="line">                q.append(v)</span><br></pre></td></tr></table></figure>
<h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DFS_working</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> goalTest(x):</span><br><span class="line">        outputResult()</span><br><span class="line">    <span class="keyword">for</span> xi <span class="keyword">in</span> subState[x]:</span><br><span class="line">        <span class="keyword">if</span> Flag(xi) <span class="keyword">and</span> Optimize(xi):</span><br><span class="line">            setSomeAttrs(flag, pre, ...)</span><br><span class="line">            DFS_working(xi)</span><br><span class="line">            delSomeAttrs(flag, pre, ...)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DFS</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> subState[source]:</span><br><span class="line">        DFS_working(x)</span><br></pre></td></tr></table></figure>
<h2 id="Stack-and-Queue-in-Python"><a href="#Stack-and-Queue-in-Python" class="headerlink" title="Stack and Queue in Python"></a>Stack and Queue in Python</h2><h3 id="Using-list-as-stack"><a href="#Using-list-as-stack" class="headerlink" title="Using list as stack"></a>Using list as stack</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.append(<span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.append(<span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.pop()</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.pop()</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.pop()</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<h3 id="Using-list-as-queue"><a href="#Using-list-as-queue" class="headerlink" title="Using list as queue"></a>Using list as queue</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue = deque([<span class="string">"Eric"</span>, <span class="string">"John"</span>, <span class="string">"Michael"</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.append(<span class="string">"Terry"</span>)           <span class="comment"># Terry arrives</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.append(<span class="string">"Graham"</span>)          <span class="comment"># Graham arrives</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.popleft()                 <span class="comment"># The first to arrive now leaves</span></span><br><span class="line"><span class="string">'Eric'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.popleft()                 <span class="comment"># The second to arrive now leaves</span></span><br><span class="line"><span class="string">'John'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue                           <span class="comment"># Remaining queue in order of arrival</span></span><br><span class="line">deque([<span class="string">'Michael'</span>, <span class="string">'Terry'</span>, <span class="string">'Graham'</span>])</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Searching</tag>
        <tag>DFS</tag>
        <tag>BFS</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Copy &amp; Array Creating In Python</title>
    <url>/2018/10/04/CopyInPython/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvx5bbi8asj212w0m8my4.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Array-Creating"><a href="#Array-Creating" class="headerlink" title="Array Creating"></a>Array Creating</h2><p>At first, let’s see some examples.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[[<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [[<span class="number">0</span>]*<span class="number">5</span> <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n</span><br><span class="line">[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n</span><br><span class="line">[[<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>N = [[<span class="number">0</span>]*<span class="number">5</span>]*<span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>N</span><br><span class="line">[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>N[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>N</span><br><span class="line">[[<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L1 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [L1 <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>L</span><br><span class="line">[[<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br></pre></td></tr></table></figure>
<p>It’s obvious that changing the (0,0) element of list l and n will not change other elements, but changing the first element of list N and L will change each sub-list’s first element.</p>
<p>The reason of such situation is sub-lists in l and n have different addresses but in N and L have the same address, which is releated to the concept of copy in python.</p>
<p>What above also shows the two methods creating n-dimensional arraies: coping list [0]*n and assigning in loop</p>
<h4 id="0-n"><a href="#0-n" class="headerlink" title="[0]*n"></a>[0]*n</h4><p>[[0] <em> a] </em> b will create a 2-dimensional array with a*b</p>
<p>And the [0, 0, 0] * a is a shadow copy.</p>
<p>Let’s see an example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>A=[<span class="number">0</span>]*<span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A=[[<span class="number">0</span>]*<span class="number">3</span>]*<span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A</span><br><span class="line">[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]</span><br></pre></td></tr></table></figure>
<h4 id="Assigning-in-loop"><a href="#Assigning-in-loop" class="headerlink" title="Assigning in loop"></a>Assigning in loop</h4><p>Using for loop to initialize the array can avoid the shadow copy problem.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>B=[[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>)]<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B</span><br><span class="line">[[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B</span><br><span class="line">[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>]]</span><br></pre></td></tr></table></figure>
<p>To summarize, the recommanded way to initialize an array is using for loop, which can avoid the shadow copy problem in [0]*n</p>
<h2 id="Assignment"><a href="#Assignment" class="headerlink" title="Assignment"></a>Assignment</h2><p>First, let’s talk about ASSISGNMENT in python.</p>
<p>In Python, the assignment of an object is a simple transference of object reference(memory address), which is different from C++.</p>
<p>For assignment, there are some points we need to know:</p>
<ul>
<li>Assignment is assigning the address of an object to a variable which points to the address (old wine in old bottle).</li>
<li>Modifying the immutable objects (STR, tuple) need to open up new space.</li>
<li>Modifying variable objects (list, etc.) do not need to open up new space.</li>
</ul>
<p>Let’s see an example:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">will = [<span class="string">"Will"</span>, <span class="number">28</span>, [<span class="string">"Python"</span>, <span class="string">"C#"</span>, <span class="string">"C++"</span>]]</span><br><span class="line">wilber = will</span><br><span class="line"><span class="keyword">print</span> id(will)</span><br><span class="line"><span class="keyword">print</span> will</span><br><span class="line"><span class="keyword">print</span> [id(ele) <span class="keyword">for</span> ele <span class="keyword">in</span> will]</span><br><span class="line"><span class="keyword">print</span> id(wilber)</span><br><span class="line"><span class="keyword">print</span> wilber</span><br><span class="line"><span class="keyword">print</span> [id(ele) <span class="keyword">for</span> ele <span class="keyword">in</span> wilber]</span><br><span class="line"> </span><br><span class="line">will[<span class="number">0</span>] = <span class="string">"Wilber"</span></span><br><span class="line">will[<span class="number">2</span>].append(<span class="string">"Markdwon"</span>)</span><br><span class="line"><span class="keyword">print</span> id(will)</span><br><span class="line"><span class="keyword">print</span> will</span><br><span class="line"><span class="keyword">print</span> [id(ele) <span class="keyword">for</span> ele <span class="keyword">in</span> will]</span><br><span class="line"><span class="keyword">print</span> id(wilber)</span><br><span class="line"><span class="keyword">print</span> wilber</span><br><span class="line"><span class="keyword">print</span> [id(ele) <span class="keyword">for</span> ele <span class="keyword">in</span> wilber]</span><br></pre></td></tr></table></figure></p>
<p>Result is:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">54638912</span></span><br><span class="line">[<span class="string">'Will'</span>, <span class="number">28</span>, [<span class="string">'Python'</span>, <span class="string">'C#'</span>, <span class="string">'C++'</span>]]</span><br><span class="line">[<span class="number">60622688</span>, <span class="number">1882077872</span>, <span class="number">54638752</span>]</span><br><span class="line"><span class="number">54638912</span></span><br><span class="line">[<span class="string">'Will'</span>, <span class="number">28</span>, [<span class="string">'Python'</span>, <span class="string">'C#'</span>, <span class="string">'C++'</span>]]</span><br><span class="line">[<span class="number">60622688</span>, <span class="number">1882077872</span>, <span class="number">54638752</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">54638912</span></span><br><span class="line">[<span class="string">'Wilber'</span>, <span class="number">28</span>, [<span class="string">'Python'</span>, <span class="string">'C#'</span>, <span class="string">'C++'</span>, <span class="string">'Markdwon'</span>]]</span><br><span class="line">[<span class="number">60622944</span>, <span class="number">1882077872</span>, <span class="number">54638752</span>]</span><br><span class="line"><span class="number">54638912</span></span><br><span class="line">[<span class="string">'Wilber'</span>, <span class="number">28</span>, [<span class="string">'Python'</span>, <span class="string">'C#'</span>, <span class="string">'C++'</span>, <span class="string">'Markdwon'</span>]]</span><br><span class="line">[<span class="number">60622944</span>, <span class="number">1882077872</span>, <span class="number">54638752</span>]</span><br></pre></td></tr></table></figure><br>It’s easy to find wilber is will, wilber[i] is will[i]</p>
<p>One thing to note here: str is an immutable object, so when we change the will[0], it will open a new space. However, list is a variable object, so the address of will[2] does not change. </p>
<h2 id="Shadow-Copy"><a href="#Shadow-Copy" class="headerlink" title="Shadow Copy"></a>Shadow Copy</h2><p>Shallow copy just copies the addresses of the elements in the container.</p>
<p>Let’s see some codes:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="string">'hello'</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=a[:] <span class="comment"># b = copy.copy(a)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">54637832</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">54638992</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[id(x) <span class="keyword">for</span> x <span class="keyword">in</span> a]</span><br><span class="line">[<span class="number">55792504</span>, <span class="number">6444104</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[id(x) <span class="keyword">for</span> x <span class="keyword">in</span> b]</span><br><span class="line">[<span class="number">55792504</span>, <span class="number">6444104</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>]=<span class="string">'world'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>].append(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">'world'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="string">'hello'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br></pre></td></tr></table></figure>
<p>Shallow copy creates a new variable or container in another address, but the addresses of the elements in the container are copies of the addresses of the elements of the source object, which means, the new container points to old elements (old wine in a new bottle).</p>
<p><strong>Shadow copy will be appied when we use following operations:</strong></p>
<ul>
<li>Using slice operation [:]</li>
<li>Using factory functions (list/dir/set)</li>
<li>Using copy() function from copy module</li>
</ul>
<h2 id="Deep-Copy"><a href="#Deep-Copy" class="headerlink" title="Deep Copy"></a>Deep Copy</h2><p>A copy is copied completely, and the addresses inside the container are totally different.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="string">'hello'</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=deepcopy(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(a)</span><br><span class="line"><span class="number">60715456</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(b)</span><br><span class="line"><span class="number">54637832</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[id(x) <span class="keyword">for</span> x <span class="keyword">in</span> a]</span><br><span class="line">[<span class="number">55792504</span>, <span class="number">55645000</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[id(x) <span class="keyword">for</span> x <span class="keyword">in</span> b]</span><br><span class="line">[<span class="number">55792504</span>, <span class="number">58338824</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>]=<span class="string">'world'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>].append(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">'world'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="string">'hello'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br></pre></td></tr></table></figure>
<p>Deep copy createa a new variable or container in another address, and the addresses of elements in the container is also new. The two things just have the same values. That is to say, new wine in a new bottle.</p>
<h2 id="Special-circumstances-of-copying"><a href="#Special-circumstances-of-copying" class="headerlink" title="Special circumstances of copying"></a>Special circumstances of copying</h2><ul>
<li>For objects are not container, such as string, number and other ‘atom’ objects, there is no copy. What’s generated is refernece of object. That’s to say, obj is copy.copy(obj), obj is copy.deepcopy(obj).</li>
<li>If a tuple contains ‘atom’ elements only, it can only be shadow copied even it uses deepcopy. For example:<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = copy.copy(a) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = copy.deepcopy(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr />]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Copy</tag>
        <tag>shadow copy</tag>
        <tag>deep copy</tag>
        <tag>Array creating</tag>
      </tags>
  </entry>
  <entry>
    <title>Useful C# Data Structures</title>
    <url>/2018/10/03/C-Data-Structures/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvw28hncf5j212w0m8dh3.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Usual-Data-Structures"><a href="#Usual-Data-Structures" class="headerlink" title="Usual Data Structures"></a>Usual Data Structures</h2><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><p>Array is the simplest data structure in C#. It has the following characteristics:</p>
<ul>
<li>Array is stored in continuous memory.</li>
<li>The contents of the array are all of the same type.</li>
<li>Array can be accessed directly through subscript.</li>
</ul>
<p>The creation of Array:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int size &#x3D; 5;</span><br><span class="line">int[] array &#x3D; new int[size];</span><br></pre></td></tr></table></figure></p>
<p>Because Array is stored in contiguous memory, its indexing speed is very fast. The time to access an element is constant, which means it is independent of the number of elements in the array. The assignment and modification of elements is also very simple.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string[] test2 &#x3D; new string[3];</span><br><span class="line">&#x2F;&#x2F;Assisgnmennt</span><br><span class="line">test2[0] &#x3D; &quot;yao&quot;;</span><br><span class="line">test2[1] &#x3D; &quot;y&quot;;</span><br><span class="line">test2[2] &#x3D; &quot;f&quot;;</span><br><span class="line">&#x2F;&#x2F;Modification</span><br><span class="line">test2[0] &#x3D; &quot;yaoyf&quot;;</span><br></pre></td></tr></table></figure>
<p>But if there are advantages, then it will be accompanied by shortcomings. Because it is continuous storage, it is inconvenient to insert new elements between the two elements. And as the code above shows, when you declare a new array, you have to specify its length, which has the potential problem of wasting memory when we declare it too long, and the risk of overflowing when we declare it too short.</p>
<p>In order to avoid such disadvantages， there is a data structure called ArrayList.</p>
<h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>ArrayList is part of the System.Collections namespace, so you must introduce System.Collections to use it. As mentioned above, ArrayList solves some of the shortcomings of arrays.</p>
<ul>
<li>It is not necessary to specify the length of an ArrayList when it is declared, because the length of an ArrayList object is dynamically increased and reduced according to the data stored therein.</li>
<li>ArrayList can store different types of elements. This is because ArrayList treats all its elements as Object.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ArrayList test3 &#x3D; new ArrayList();</span><br><span class="line">&#x2F;&#x2F;Add new element</span><br><span class="line">test3.Add(&quot;yao&quot;);</span><br><span class="line">test3.Add(&quot;y&quot;);</span><br><span class="line">test3.Add(&quot;f&quot;);</span><br><span class="line">test3.Add(&quot;is&quot;);</span><br><span class="line">test3.Add(22);</span><br><span class="line">&#x2F;&#x2F;Modification</span><br><span class="line">test3[4] &#x3D; 666;</span><br><span class="line">&#x2F;&#x2F;Delete</span><br><span class="line">test3.RemoveAt(4);</span><br></pre></td></tr></table></figure>
<p>Disadvantages:</p>
<ul>
<li>ArrayList is not type safe. Because different types are treated as objects, it’s very likely that type mismatches occur when ArrayList is used.</li>
<li>Boxing does not occur when an array stores value types, but because ArrayList treats all types as Objects, it is inevitable that boxing occurs when inserting value types, and unboxing occurs when index values are taken. There will be time wastage, that is, the reduction of efficiency.</li>
</ul>
<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List<T></h4><p>In order to overcome the shortcomings of ArrayList insecure types and boxed and unboxed, the concept of generics was introduced as a new array type. It is also an array type commonly used in work. Similar to Array List, the length can be flexibly changed. The biggest difference is that when we declare a List collection, we also need to declare the object type of the data in the List collection for it. This is similar to Array , which is implemented internally in List <T>.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;string&gt; test4 &#x3D; new List&lt;string&gt;();  </span><br><span class="line">&#x2F;&#x2F;Add new element  </span><br><span class="line">test4.Add(“abcdefg”);  </span><br><span class="line">test4.Add(“1234556”);  </span><br><span class="line">&#x2F;&#x2F;Modification</span><br><span class="line">test4[1] &#x3D; “WeAreTheBest”;  </span><br><span class="line">&#x2F;&#x2F;Remove element  </span><br><span class="line">test4.RemoveAt(0);</span><br></pre></td></tr></table></figure>
<p>The best advantages of List are:</p>
<ul>
<li>That can ensure type safety.</li>
<li>The operation of boxing and unboxing is cancelled.</li>
<li>It combines the advantages of fast access to Array and the flexibility of length to ArrayList.</li>
</ul>
<h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList<T></h4><p>That’s the linked list. The biggest difference from the above array types is that the linked list may not be sequenced in memory storage. This is because the list is arranged by pointing to the next element from the previous element, so it may not be accessible by subscript.</p>
<p>Since the greatest feature of linked lists is that the space stored in memory is not necessarily continuous, the greatest advantages and disadvantages of linked lists over arrays are obvious:</p>
<ul>
<li>Inserting or deleting nodes into the linked list does not need to adjust the capacity of the structure, because it’s not consecutive storage. It’s determined by the pointer of each object, so adding and deleting elements has an advantage over arrays.</li>
<li>Linked lists are good for adding new elements in situations where ordering is required. Here’s a comparison with arrays. For example, adding new elements at a certain location in the middle of an array may require moving many elements, but for a linked list it may be just the direction of several elements changes.</li>
<li>There are advantages and disadvantages, because it is not necessarily sequential in memory space, so access to the subscript can not be used, but must start from the beginning node, traverse the next node until the target is found. So when you need to quickly access objects, arrays are undoubtedly more advantageous.</li>
</ul>
<p>In summary, the linked list is suitable for the unfixed number of elements.</p>
<h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue<T></h4><p>In a Queue <T> data structure, the first element inserted will be deleted first while the last element inserted will be deleted at last, so queues are also called FIFO - first in first out linear tables. Through the use of Enqueue() and Dequeue() those two methods to achieve access to Queue<T>.</p>
<p>Notes:</p>
<ul>
<li>First in first out scenario.</li>
<li>By default, the initial capacity of Queue<T> is 32, and the growth factor is 2.0.</li>
<li>When Enqueue is used, the length of the queue is judged to be sufficient. If not, the capacity is increased according to the growth factor. For example, when the initial 2.0 is used, the queue capacity is doubled. </li>
</ul>
<h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack<T></h4><p>As opposed to Queue <T>, we need Stack <T> when we need to use a LIFO data structure.</p>
<p>Notes:</p>
<ul>
<li>Last in first out scenario.</li>
<li>The default capacity is 10.</li>
<li>Use pop and push two methods to operate.</li>
</ul>
<h4 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary<K,T></h4><p>Very fast to add, modify, delete and find elemets. However, in order to speed up, we use more memory space.</p>
<h2 id="When-to-use-Which"><a href="#When-to-use-Which" class="headerlink" title="When to use Which"></a>When to use Which</h2><p><strong>Array</strong>: The number of elements and the need to use subscript can be considered, but List<T> is recommended.</p>
<p><strong>ArrayList</strong>: It is not recommended. List<T> is recommended.</p>
<p><strong>List</strong>: The number of elements is not sure. Most usual.</p>
<p><strong>LinkedList</strong>: Linked list suitable for the number of elements is not fixed and need to constantly increase or decrease the node. The 2 sides can be increased or reduced.</p>
<p><strong>Queue</strong>: FIFO</p>
<p><strong>Stack</strong>: LIFO</p>
<p><strong>Dictionary</strong>: Require pairs of keys and values. Fast operation.</p>
<hr />]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>Data Structure</tag>
        <tag>Array</tag>
        <tag>ArrayList</tag>
        <tag>List&lt;&gt;</tag>
        <tag>Linked List</tag>
        <tag>Queue</tag>
        <tag>Stack</tag>
        <tag>Dictionary</tag>
      </tags>
  </entry>
  <entry>
    <title>Dijstra and Floyd</title>
    <url>/2018/12/31/Dijstra-Floyd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fyprl5cr2nj212w0m87a8.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijstra</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    <span class="keyword">global</span> cost</span><br><span class="line">    len = [<span class="number">1000</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    visit = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        len[i] = cost[s][i]</span><br><span class="line">        visit[i] = <span class="number">0</span></span><br><span class="line">    visit[s] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">        min = <span class="number">10000</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> (visit[j]==<span class="number">0</span>  <span class="keyword">and</span> min&gt;len[j]):</span><br><span class="line">                min = len[j]</span><br><span class="line">                pos = j</span><br><span class="line"></span><br><span class="line">        visit[pos] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> (visit[j] == <span class="number">0</span> <span class="keyword">and</span> len[j]&gt;len[pos] + cost[pos][j]):</span><br><span class="line">                len[j] = len[pos] + cost[pos][j]</span><br><span class="line"></span><br><span class="line">    print(len)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">floyd</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    <span class="keyword">global</span> cost</span><br><span class="line">    path = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]<span class="keyword">for</span> j <span class="keyword">in</span> range(n)]</span><br><span class="line">    length = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]<span class="keyword">for</span> j <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n):            </span><br><span class="line">            length[i][j] = cost[i][j]</span><br><span class="line">            <span class="keyword">if</span> cost[i][j] &lt; <span class="number">1000</span>:</span><br><span class="line">                path[i][j] = i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                path[i][j] = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> (length[i][k] &lt; <span class="number">1000</span>)<span class="keyword">and</span> (length[k][j] &lt; <span class="number">1000</span>):</span><br><span class="line">                    <span class="keyword">if</span> (length[i][j] &gt; length[i][k] + length[k][j]):</span><br><span class="line">                        length[i][j] = length[i][k] + length[k][j]</span><br><span class="line">                        path[i][j] = k</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        print(length[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> n </span><br><span class="line">n = int(input(<span class="string">'Please input the number of notes: '</span>))</span><br><span class="line">cost = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    cost.append(list(map(int, input().split(<span class="string">' '</span>))))</span><br><span class="line"></span><br><span class="line">s = int(input(<span class="string">'Please input the source: '</span>))</span><br><span class="line">dijstra(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input(<span class="string">'Please run floyd'</span>)</span><br><span class="line">floyd()</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Algorithms</tag>
        <tag>Shortest path</tag>
        <tag>Dijstra</tag>
        <tag>Floyd</tag>
      </tags>
  </entry>
  <entry>
    <title>Elementary Graph Algorithms</title>
    <url>/2018/09/15/Elementary-Graph-Algorithms/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fval0u3xbzj212w0m84qk.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Representations-of-graphs"><a href="#Representations-of-graphs" class="headerlink" title="Representations of graphs"></a>Representations of graphs</h2><h3 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h3><p>We can choose between two standard ways to represent a graph G=(V,E):<br>as a collection of adjacency lists or as an adjacency matrix.</p>
<h5 id="Two-representations-of-an-undirected-graph"><a href="#Two-representations-of-an-undirected-graph" class="headerlink" title="Two representations of an undirected graph"></a>Two representations of an undirected graph</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvb52095jqj20h004074c.jpg" alt="" style="width:100%" /></p>
<h5 id="Two-representations-of-a-directed-graph"><a href="#Two-representations-of-a-directed-graph" class="headerlink" title="Two representations of a directed graph"></a>Two representations of a directed graph</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvb52s0ohfj20gh057mx9.jpg" alt="" style="width:100%" /></p>
<h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><p><em>From Introduction to Algorithms, 3rd edition</em></p>
<h5 id="22-1-1"><a href="#22-1-1" class="headerlink" title="22.1-1"></a>22.1-1</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvb5d280foj20e401lmx5.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h5><p>Assume that the number of vertexes is N, the munber of edges is M. </p>
<p>It will take O(N) to compute the out-degree of every vertex.</p>
<p>It will take O(N+M) to compute the in-degree.</p>
<h5 id="22-1-3"><a href="#22-1-3" class="headerlink" title="22.1-3"></a>22.1-3</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvb4o60vv8j20e002oq37.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-1"><a href="#Answer-1" class="headerlink" title="Answer"></a>Answer</h5><p>Assume that the number of vertexes is N, the number of edges is M.</p>
<p>For adjacency-list, iterate all the nodes, for each node i, mark its adjacency-list as L, then add i to all the nodes in L. It costs O(N+M).</p>
<p>For adjacency-matrix, just only transpose the matrix. It costs O(N*N).</p>
<h5 id="22-1-4"><a href="#22-1-4" class="headerlink" title="22.1-4"></a>22.1-4</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvb5egz93bj20e302p74j.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-2"><a href="#Answer-2" class="headerlink" title="Answer"></a>Answer</h5><ul>
<li>Iterate through all the vertices in the multigraph.</li>
<li>For each of the vertices, iterate through their multigraph adjacency list.</li>
<li>While iterating through the multigraph adjacency list of a vertex u, add the neighbor to the new adjacency list of u and u to the new adjacency list of the neighbor, if the neighbor is not vertex u itself and if the neighbor is not already present in the new adjacency list of u.</li>
<li>The new adjacency list array is a representation of the required undirected graph.</li>
</ul>
<h5 id="22-1-6"><a href="#22-1-6" class="headerlink" title="22.1-6"></a>22.1-6</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvb5r6ckzgj20e602074h.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-3"><a href="#Answer-3" class="headerlink" title="Answer"></a>Answer</h5><p>If vertex i is a universal sink according to the definition, the i-th row of the adjacency-matrix will be all “0”, and the i-th column will be all “1” except the A(i,i) entry, and clearly there is only one such vertex. We then describe an algorithm to find out if a universal sink really exist.</p>
<p>Starts from A(1,1). If current entry a(i,j) = 0 then j = j + 1 (take one step right); if A(i,j) = 1 then i = i +1 (take one step down). In this way, it will stop at an entry A(k,n) of the last row or A(n,k) of the last column (n = |V|, 1 ≦ k ≦|V|). Check if vertex k satisfies the definition of universal sink (check for kth row to contain V zeros and kth column to contain k-1 1s, because the column in adajacency matrix defines in degree of a vertex), if yes then we found it, if no then there is no universal sink. Since we always make a step right or down, and checking if a vertex is a universal sink can be done in O(V), the total running time is O(V).</p>
<p>If there is no universal sink, this algorithm won’t return any vertex. If there is a universal sink u, the path starts from A(1,1) will definitely meet u-th column or u-th row at some entry. Once it’s on track, it can’t get out of the track and will finally stop at the right entry.</p>
<h5 id="22-1-7"><a href="#22-1-7" class="headerlink" title="22.1-7"></a>22.1-7</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvb69fuqqjj20e404kglw.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-4"><a href="#Answer-4" class="headerlink" title="Answer"></a>Answer</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvb7dwh2i3j20de0520t4.jpg" alt="" style="width:100%" /></p>
<p>Note: The <strong>incidence matrix</strong> is |V| <em> |E| not |V|</em>|V|. It’s a matrix to represent the relation between vertexes and edges.</p>
<h2 id="Breadth-First-Search"><a href="#Breadth-First-Search" class="headerlink" title="Breadth-First Search"></a>Breadth-First Search</h2><h3 id="Concept-1"><a href="#Concept-1" class="headerlink" title="Concept"></a>Concept</h3><h5 id="pseudocode"><a href="#pseudocode" class="headerlink" title="pseudocode"></a>pseudocode</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BFS(G, s)</span><br><span class="line">for each vertex u &lt;- G. V - &#123;s&#125;</span><br><span class="line">  u.color &#x3D; WHITE</span><br><span class="line">  u.distance &#x3D; infinity</span><br><span class="line">  u.pre &#x3D; NULL</span><br><span class="line">s.color &#x3D; GRAY</span><br><span class="line">s.distance &#x3D; 0</span><br><span class="line">s.pre &#x3D; NULL</span><br><span class="line">Q &#x3D; NULL</span><br><span class="line">ENQUEUE(Q, s)</span><br><span class="line">while Q !&#x3D; NULL</span><br><span class="line">  u &#x3D; DEQUEUE(Q)</span><br><span class="line">  for each v &lt;- G. Adj[u]</span><br><span class="line">    if v.color &#x3D;&#x3D; WHITE</span><br><span class="line">        v.color &#x3D; GRAY</span><br><span class="line">        v.distance &#x3D; u.distance + cost[u, v]</span><br><span class="line">        v.pre &#x3D; u</span><br><span class="line">        ENQUEUE(Q, v)</span><br><span class="line">  u.color &#x3D; BLACK</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-1"><a href="#Exercises-1" class="headerlink" title="Exercises"></a>Exercises</h3><h5 id="22-2-1"><a href="#22-2-1" class="headerlink" title="22.2-1"></a>22.2-1</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvb7za951aj20dz0193yg.jpg" alt="" style="width:100%" /></p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvb7ycswqbj204p03f3yc.jpg" alt="" /></p>
<h5 id="Answer-5"><a href="#Answer-5" class="headerlink" title="Answer"></a>Answer</h5><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Vertex</th>
<th style="text-align:center">d</th>
<th style="text-align:center">pre</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">0</td>
<td style="text-align:center">NULL</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">2</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">Infinity</td>
<td style="text-align:center">NULL</td>
</tr>
</tbody>
</table>
</div>
<h5 id="22-2-6"><a href="#22-2-6" class="headerlink" title="22.2-6"></a>22.2-6</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvb8bry5ppj20e702k74j.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-6"><a href="#Answer-6" class="headerlink" title="Answer"></a>Answer</h5><p>To find such a graph, we simply need to think how BFS tree edges come about: once a node is discovered, we will not have another tree edge to that node. So to provide a directed graph tree edge set that cannot be produced by running BFS, we simply need multiple paths to given nodes, and choose paths based on different starting points:</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvb8pa2y6bj20kk06djr9.jpg" alt="" /></p>
<p>In this simple example above, assuming that we run a BFS on A, we can either start exploring from B or start exploring from C. These would yield the following BFS trees:</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvb8r2bqamj20hq06bdfp.jpg" alt="" /></p>
<p>To find a set of tree edges that cannot be found from BFS, we simply need to choose at least one minimum path that exists only in the first tree, and one path that exists only in the second tree. We choose {(A,B), (B,D), (A,C), (C,E)}.</p>
<h5 id="22-2-7"><a href="#22-2-7" class="headerlink" title="22.2-7"></a>22.2-7</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvb8tb404rj20e3043jrw.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-7"><a href="#Answer-7" class="headerlink" title="Answer"></a>Answer</h5><p><a href=""><strong>Bipartite Graph problem.</strong></a></p>
<p>Run DFS or BFS, the start node we could mark as white. Each time, we encounter a node, if it is not currently colored, we should mark it as the opposite color of current node. Else, check the color with current node. If same, then it is not bipartite graph.</p>
<h5 id="22-2-8"><a href="#22-2-8" class="headerlink" title="22.2-8"></a>22.2-8</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvb90do7sgj20e301kglo.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-8"><a href="#Answer-8" class="headerlink" title="Answer"></a>Answer</h5><h5 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h5><p>For all node v, run BFS each, and choose the longest shortest path. Running time is O(V*(V+E))</p>
<h5 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h5><p>USing Floyd algorithm to calculate all point-point shortest path. Running time is O(V^3)</p>
<h5 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution 3"></a>Solution 3</h5><p>Running BFS twice, arbitrarily choose a vertex as the source. The second time, let the vertex with largest d[] be the source.</p>
<h5 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution 4"></a>Solution 4</h5><p>The diameter of a tree can computed in a bottom-up fashion using a recursive solution. Running Time is O(N), in the other word, a linear solution.</p>
<p><a href="https://blog.csdn.net/qq_32400847/article/details/51469917" target="_blank" rel="noopener">Click here to see more details about Solution 3 and Solution 4</a> </p>
<h2 id="Depth-First-Search"><a href="#Depth-First-Search" class="headerlink" title="Depth-First Search"></a>Depth-First Search</h2><h3 id="Concept-2"><a href="#Concept-2" class="headerlink" title="Concept"></a>Concept</h3><h5 id="pseudocode-1"><a href="#pseudocode-1" class="headerlink" title="pseudocode"></a>pseudocode</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DFS(G)</span><br><span class="line">for each vertex u &lt;- G.V</span><br><span class="line">  u.color &#x3D; WHITE</span><br><span class="line">  u.pre &#x3D; NULL</span><br><span class="line">time &#x3D; 0</span><br><span class="line">for each vertex u &lt;- G.V</span><br><span class="line">  if u.color &#x3D;&#x3D; WHITE</span><br><span class="line">    DFS-VISIT(G, u)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DFS-VISIT(G, u)</span><br><span class="line">time &#x3D; time + 1 &#x2F;&#x2F;white vertex u has just been discovered</span><br><span class="line">u.d &#x3D; time</span><br><span class="line">u.color &#x3D; GREY</span><br><span class="line">for each v &lt;- G.Adj[u]  &#x2F;&#x2F;explore edge (u,v)</span><br><span class="line">  if v.color &#x3D;&#x3D; WHITE</span><br><span class="line">    v.pre &#x3D; u</span><br><span class="line">    DFS-VISIT(G, v)</span><br><span class="line">u.color &#x3D; BLACK &#x2F;&#x2F;blacken u; it is finished</span><br><span class="line">time &#x3D; time + 1</span><br><span class="line">u.f &#x3D; time</span><br></pre></td></tr></table></figure>
<h5 id="CLassification-of-edges"><a href="#CLassification-of-edges" class="headerlink" title="CLassification of edges"></a>CLassification of edges</h5><ul>
<li>Tree edges are edges in the depth-first forest G’.Edge(u,v) is a tree edge if v was first discovered by exploring edge (u,v).</li>
<li>Back edges are those edges (u,v) connecting a vertex u to an ancestor v in a depth-first tree. We consider self-loops, which may occur in directed graphs, to be back edges.</li>
<li>Forward edges are those nontree edges (u,v) connecting a vertex u to a descendant v in a depth-first tree.</li>
<li>Cross edges are all other edges. They can go between vertices in the same depth-first tree, as long as one vertex is not an ancestor of the other, or they can go between vertices in different depth-first trees.</li>
</ul>
<h3 id="Exercises-2"><a href="#Exercises-2" class="headerlink" title="Exercises"></a>Exercises</h3><h5 id="22-3-5"><a href="#22-3-5" class="headerlink" title="22.3-5"></a>22.3-5</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbpo1biq2j20c402yt8t.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-9"><a href="#Answer-9" class="headerlink" title="Answer"></a>Answer</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbq76ibjjj20kv0eywgq.jpg" alt="" style="width:100%" /></p>
<h5 id="22-3-7"><a href="#22-3-7" class="headerlink" title="22.3-7"></a>22.3-7</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbpu8a94ij20bf00o744.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-10"><a href="#Answer-10" class="headerlink" title="Answer"></a>Answer</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DFS_Stack(G)</span><br><span class="line">for each vertex u &lt;- G.V</span><br><span class="line">  u.color &#x3D; WHITE</span><br><span class="line">  u.pre &#x3D; NULL</span><br><span class="line">s.color &#x3D; GRAY</span><br><span class="line">s.pre &#x3D; NULL</span><br><span class="line">ENQUEUE(Q,s)</span><br><span class="line">while Q !&#x3D; NULL</span><br><span class="line">  u &#x3D; pop(Q)</span><br><span class="line">  for each v &lt;- G.Adj[u] </span><br><span class="line">    if v.color &#x3D; WHITE</span><br><span class="line">      v.pre &#x3D; u</span><br><span class="line">      v.color &#x3D; GRAY</span><br><span class="line">      ENQUEUE(Q, v)</span><br></pre></td></tr></table></figure>
<h5 id="22-3-8"><a href="#22-3-8" class="headerlink" title="22.3-8"></a>22.3-8</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbqcggn42j20e801mq2y.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-11"><a href="#Answer-11" class="headerlink" title="Answer"></a>Answer</h5><p>Let us consider the example graph depth-first search below</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbqhdqp4qj20mp0fuab1.jpg" alt="" style="width:100%" /></p>
<p>CLearly, there is a path from u to v in G. The bold edges are in the depth-first forest produced by search. We can see that u.d &lt; v.d in the depth-first search but v is not a descendant of u in the forest.</p>
<h5 id="22-3-9"><a href="#22-3-9" class="headerlink" title="22.3-9"></a>22.3-9</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbqoda9r9j20e60143yg.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-12"><a href="#Answer-12" class="headerlink" title="Answer"></a>Answer</h5><p>Let us consider the example graph depth-first search below</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbqhdqp4qj20mp0fuab1.jpg" alt="" style="width:100%" /></p>
<p>CLearly, there is a path from u to v in G. The bold edges are in the depth-first forest produced by search. However, v.d &gt; u.f and the conjecture is false.</p>
<h5 id="22-3-10"><a href="#22-3-10" class="headerlink" title="22.3-10"></a>22.3-10</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbr0mqgagj20e201lq2y.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-13"><a href="#Answer-13" class="headerlink" title="Answer"></a>Answer</h5><p>We need only update DFS-VISIT. If G is undirected we don’t need to make any modifications.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DFS-VISIT-PRINT(G, u)</span><br><span class="line">  time &#x3D; time + 1</span><br><span class="line">  u.d &#x3D; time</span><br><span class="line">  u.color &#x3D; GRAY</span><br><span class="line">  for each v in G.Adj[u]</span><br><span class="line">      if v.color &#x3D;&#x3D; white</span><br><span class="line">          print &quot;(u,v) is a Tree edge.&quot;</span><br><span class="line">          v.PI &#x3D; u</span><br><span class="line">          DFS-VISIT-PRINT(G, v)</span><br><span class="line">      else if v.color &#x3D;&#x3D; gray</span><br><span class="line">          print &quot;(u, v) is a Back edge.&quot;</span><br><span class="line">      else</span><br><span class="line">          if v.d &gt; u.d</span><br><span class="line">              print &quot;(u, v) is a Forward edge.&quot;</span><br><span class="line">          else print &quot;(u, v) is a Cross edge.&quot;</span><br><span class="line">  u.color &#x3D; BLACK &#x2F;&#x2F;blacken u; it is finished</span><br><span class="line">  time &#x3D; time + 1</span><br><span class="line">  u.f &#x3D; time</span><br></pre></td></tr></table></figure>
<p>NOte, the porve can be found in 22.3-5</p>
<h5 id="22-3-11"><a href="#22-3-11" class="headerlink" title="22.3-11"></a>22.3-11</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbr4wf923j20e3011t8n.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-14"><a href="#Answer-14" class="headerlink" title="Answer"></a>Answer</h5><p>Let us consider the example graph and depth-first search below.</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbr7m1mvzj20pg08hwf3.jpg" alt="" style="width:100%" /></p>
<p>Cleary u has both incoming and outgoing edges in G but a depth-first search of G produced a depth-first forest where u is in a tree by itself.</p>
<h5 id="22-3-13"><a href="#22-3-13" class="headerlink" title="22.3-13"></a>22.3-13</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbr9ofnemj20e101mglp.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-15"><a href="#Answer-15" class="headerlink" title="Answer"></a>Answer</h5><p>Run DFS for each vertex in the graph, if there are no crosses edges and forward edges in the DFS tree, the graph must be single connected. Running time is O(V*(V+E)).</p>
<p><a href="https://blog.csdn.net/wdq347/article/details/11096945" target="_blank" rel="noopener">More details and methods on this question, please click here</a></p>
<h2 id="Topological-sort"><a href="#Topological-sort" class="headerlink" title="Topological sort"></a>Topological sort</h2><h3 id="Concept-3"><a href="#Concept-3" class="headerlink" title="Concept"></a>Concept</h3><h5 id="Pseudocode"><a href="#Pseudocode" class="headerlink" title="Pseudocode"></a>Pseudocode</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TOPOLOGICAL-SORT(G)</span><br><span class="line">  call DFS(G) to compute finishing times v.f for each vertex v</span><br><span class="line">  as each vertex is finsished, insert it onto the front of a linked list</span><br><span class="line">  return the linked list of vertices</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-3"><a href="#Exercises-3" class="headerlink" title="Exercises"></a>Exercises</h3><h5 id="22-4-2"><a href="#22-4-2" class="headerlink" title="22.4-2"></a>22.4-2</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbrvgc5xhj20e702l3yt.jpg" alt="" style="width:100%" /></p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbrxq4ktsj207r05k3yl.jpg" alt="" /></p>
<h5 id="Answer-16"><a href="#Answer-16" class="headerlink" title="Answer"></a>Answer</h5><p>The algorithm works as follows. The attribute u.paths of node u tells the number of simple paths from u to v, where we assume that v is fixed throughout the entire process. To count the number of paths, we can sum the number of paths which leave from each of u’s neighbors. Since we have no cycles, we will never risk adding a partially completed number of paths. Moreover, we can never consider the same edge twice among the recursive calls. Therefore, the total number of executions of the for-loop over all recursive calls is O(V+E). Calling SIMPLE-PATHS(s,t) yields the desired result.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SIMPLE-PATHS(u, v)</span><br><span class="line">    if u &#x3D;&#x3D; v</span><br><span class="line">        return 1</span><br><span class="line">    else if u.paths !&#x3D; NIL</span><br><span class="line">        return u.paths</span><br><span class="line">    else</span><br><span class="line">        for each w in Adj[u]</span><br><span class="line">            u.pahts &#x3D; u.paths + SIMPLE-PATHS(w, v)</span><br><span class="line">        return u.paths</span><br></pre></td></tr></table></figure>
<h5 id="22-4-3"><a href="#22-4-3" class="headerlink" title="22.4-3"></a>22.4-3</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbsby7d2qj20e501kgll.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-17"><a href="#Answer-17" class="headerlink" title="Answer"></a>Answer</h5><p>An undirected graph is acyclic if and only if a DFS yields no back edges.</p>
<ul>
<li>If there’s a back edge, there’s a cycle.</li>
<li>If there’s no back edge, then by Theorem 22.10, there are only tree edges. Hence, the graph is acyclic. Thus, we can run DFS: if we find a back edge, there’s a cycle.</li>
<li>Time: O(V).(Not O(V+E)), because if we ever see |v| distinct edges, we must have seen a back edge because in an acyclic (undirected) forest, |E|&lt;=|V|-1. Thus, DFS’s running time is O(V+E) but in such solution, O(V).</li>
</ul>
<h5 id="22-4-4"><a href="#22-4-4" class="headerlink" title="22.4-4"></a>22.4-4</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbsm64pryj20e201l3yk.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-18"><a href="#Answer-18" class="headerlink" title="Answer"></a>Answer</h5><p>This is not true.</p>
<p>?</p>
<h5 id="22-4-5"><a href="#22-4-5" class="headerlink" title="22.4-5"></a>22.4-5</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvbt0ohgzrj20e8022q34.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-19"><a href="#Answer-19" class="headerlink" title="Answer"></a>Answer</h5><p>Running DFS or BFS to calculate in-degree for each vertex in O(V+E). After that, delete those vertexes whose in-degree are 0 and update these information. Each time, print the vertex whose in-degree is 0 and delete its out-edges. Thus, there are E edges and V vertexes in total, so it’s need to run O(V) print and O(E) delete. So the total running time is O(V+E).</p>
<p>If there is a cycle, it may cannot find vertex with 0 in-degree, so not all vertices will be output</p>
<p>The other way is<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TOPOLOGICAL-SORT(G)</span><br><span class="line">    &#x2F;&#x2F; Initialize in-degree, Θ(V) time.</span><br><span class="line">    for each vertex u ∈ G.V</span><br><span class="line">        u.in-degree &#x3D; 0</span><br><span class="line">    &#x2F;&#x2F; Compute in-degree, Θ(V + E) time.</span><br><span class="line">    for each vertex u ∈ G.V</span><br><span class="line">        for each v ∈ G.Adj[u]</span><br><span class="line">            v.in-degree &#x3D; v.in-degree + 1</span><br><span class="line">    &#x2F;&#x2F; Initialize Queue, Θ(V) time.</span><br><span class="line">    Q &#x3D; ∅</span><br><span class="line">    for each vertex u ∈ G.V</span><br><span class="line">        if u.in-degree &#x3D;&#x3D; 0</span><br><span class="line">            ENQUEUE(Q, u)</span><br><span class="line">    &#x2F;&#x2F; while loop takes O(V + E) time.</span><br><span class="line">    while Q !&#x3D; ∅</span><br><span class="line">        u &#x3D; DEQUEUE(Q)</span><br><span class="line">        output u</span><br><span class="line">        &#x2F;&#x2F; for loop executes O(E) times total.</span><br><span class="line">        for each v ∈ G.Adj[u]</span><br><span class="line">            v.in-degree &#x3D; v.in-degree - 1</span><br><span class="line">            if v.in-degree &#x3D;&#x3D; 0</span><br><span class="line">                ENQUEUE(Q, v)</span><br><span class="line">    &#x2F;&#x2F; Check for cycles, O(V) time.</span><br><span class="line">    for each vertex u ∈ G.V</span><br><span class="line">        if u.in-degree !&#x3D; 0</span><br><span class="line">            report that there&#39;s a cycle</span><br><span class="line">    &#x2F;&#x2F; Another way to check for cycles would be to count the vertices </span><br><span class="line">    &#x2F;&#x2F; that are output and report a cycle if that number is &lt; |V|.</span><br></pre></td></tr></table></figure></p>
<h2 id="Strongly-connected-components"><a href="#Strongly-connected-components" class="headerlink" title="Strongly connected components"></a>Strongly connected components</h2><h3 id="Concept-4"><a href="#Concept-4" class="headerlink" title="Concept"></a>Concept</h3><p>A strongly connected component of a directed graph G = (V,E) is a maximal set of vertices such that for every pair of vertices u and v in C, we have both u -&gt; v and v -&gt; u; that is, vertices u and v are reachable from each other.</p>
<h5 id="pseudocode-2"><a href="#pseudocode-2" class="headerlink" title="pseudocode"></a>pseudocode</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STRONGLY-CONNECTED-COMPONENTS(G)</span><br><span class="line">1 call DFS(G) to compute finishing times u.f for each vertex u</span><br><span class="line">2 compute GT</span><br><span class="line">3 call DFS(GT), but in the main loop of DFS, consider the vertices in order of decreasing u.f</span><br><span class="line">4 output the vertex of each tree in the depth-first forest formed in line 3 as a separate strongly connected component.</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-4"><a href="#Exercises-4" class="headerlink" title="Exercises"></a>Exercises</h3><h5 id="22-5-1"><a href="#22-5-1" class="headerlink" title="22.5-1"></a>22.5-1</h5><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvc236je4nj20e4015glh.jpg" alt="" style="width:100%" /></p>
<h5 id="Answer-20"><a href="#Answer-20" class="headerlink" title="Answer"></a>Answer</h5><ul>
<li>If an edge is added in an SCC, the number of SCCs will remain the same.</li>
<li>If an edge is added outside of an SCC, in a graph with n &gt; 0 SCCs, the reduction in SCCs can be between 0 and (n-1).</li>
</ul>
<hr />]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>BFS</tag>
        <tag>Graph Algorithms</tag>
        <tag>Strongly connected components</tag>
        <tag>Topological sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Git ignore already managed files</title>
    <url>/2020/07/10/Git-ignore-tracked-file/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/git-github.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<p>When using git, we would meet a special situation. There is a necessary config file which must be exist, but each developer needs to modify it locally. In this case, this file needs to be modified times by times, which causes conflicts possibly. If wanna avoid conflicts, every developer needs to pay attention to avoid submitting this file.</p>
<p>Generally, we would use <strong>.gitignore</strong> to ignore this file. However, if this file has already pushed, and is necessary to whole project, it should be saved in git. .gitignore cannot deal with this tracked file.</p>
<p>In this situation, should we use two ways</p>
<ul>
<li><code>git update-index --skip-worktree FILE_NAME</code> </li>
<li><code>git update-index --assume-unchanged FILE_NAME</code></li>
</ul>
<p>Those commands can make git ignores some files when scanning file list. In this case, git will never care about those files even if they have changes.</p>
<h2 id="git-update-index-—skip-worktree"><a href="#git-update-index-—skip-worktree" class="headerlink" title="git update-index —skip-worktree"></a>git update-index —skip-worktree</h2><p><code>--skip-worktree</code> is the flag which means the files should change locally.</p>
<p>That is, Use the command when you want to modify files managed by Git locally (or updated automatically) but you do not want Git to manage that change.</p>
<h3 id="Exclude-from-tracking"><a href="#Exclude-from-tracking" class="headerlink" title="Exclude from tracking"></a>Exclude from tracking</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git update-index --skip-worktree FILE_NAME</span><br></pre></td></tr></table></figure>
<h3 id="How-to-confirm"><a href="#How-to-confirm" class="headerlink" title="How to confirm"></a>How to confirm</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git ls-files -v | grep ^S</span><br></pre></td></tr></table></figure>
<h3 id="Restore-tracking"><a href="#Restore-tracking" class="headerlink" title="Restore tracking"></a>Restore tracking</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git update-index --no-skip-worktree FILE_NAME</span><br></pre></td></tr></table></figure>
<h2 id="git-update-index-—assume-unchanged"><a href="#git-update-index-—assume-unchanged" class="headerlink" title="git update-index —assume-unchanged"></a>git update-index —assume-unchanged</h2><p><code>--assume-unchanged</code> is the flag which means the files should not change locally.</p>
<p>In other words, it is used when ignore files that you do not need to change locally (or should not change).</p>
<p><code>--assume-unchanged</code> is used when you want to speed up Git’s behavior by ignoring unnecessary files.</p>
<p>Also, since it is an idea to ignore local changes, git reset - hard command will delete local changes.</p>
<h3 id="Exclude-from-tracking-1"><a href="#Exclude-from-tracking-1" class="headerlink" title="Exclude from tracking"></a>Exclude from tracking</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git update-index --assume-unchanged FILE_NAME</span><br></pre></td></tr></table></figure>
<h3 id="How-to-confirm-1"><a href="#How-to-confirm-1" class="headerlink" title="How to confirm"></a>How to confirm</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git ls-files -v | grep ^h</span><br></pre></td></tr></table></figure>
<h3 id="Restore-tracking-1"><a href="#Restore-tracking-1" class="headerlink" title="Restore tracking"></a>Restore tracking</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git update-index --no-assume-unchanged FILE_NAME</span><br></pre></td></tr></table></figure>
<h2 id="Relationship-with-remote-repo"><a href="#Relationship-with-remote-repo" class="headerlink" title="Relationship with remote repo"></a>Relationship with remote repo</h2><p><code>--assume-unchanged</code> will closes tracking between this file and remote repo. It assumes that this file will never change, so pull will always get local file.</p>
<p><code>--skip-worktree</code> will keep the tracking between this file and remote repo. It just tell git not to manage local changes, so pull will get latest changes and show conflicts. But because of not tracking local changes, execute <code>--no-skip-worktree</code> first then merge latest changes.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://dev.to/nishina555/how-to-ignore-files-already-managed-with-git-locally-19oo" target="_blank" rel="noopener">How to ignore files already managed with Git locally</a></li>
<li><a href="https://www.google.com/search?q=git+update-index&amp;oq=git+update-index&amp;aqs=chrome..69i57j69i59j69i64j69i60j69i61j69i60&amp;sourceid=chrome&amp;ie=UTF-8" target="_blank" rel="noopener">Git update-index document</a></li>
</ul>
<hr />]]></content>
      <categories>
        <category>Git/Github</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode001-twoSum</title>
    <url>/2019/10/08/Leetcode001-twoSum/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [2, 7, 11, 15], target &#x3D; 9,</span><br><span class="line"></span><br><span class="line">Because nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9,</span><br><span class="line">return [0, 1].</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(target - numbers[i])) &#123;</span><br><span class="line">                res[<span class="number">1</span>] = i;</span><br><span class="line">                res[<span class="number">0</span>] = map.get(target - numbers[i]);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(numbers[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Hash Table</tag>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode002_addTwoNumbers</title>
    <url>/2019/01/08/Leetcode002-addTwoNumbers/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</p>
<p>Output: 7 -&gt; 0 -&gt; 8</p>
<p>Explanation: 342 + 465 = 807.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Reverse two numbers and add them, then reverse them and store in a linkedlist</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addTwoNumbers</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type l1: ListNode</span></span><br><span class="line"><span class="string">        :type l2: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        num1 = <span class="string">''</span></span><br><span class="line">        num2 = <span class="string">''</span></span><br><span class="line">        <span class="keyword">while</span> l1:</span><br><span class="line">            num1 += str(l1.val)</span><br><span class="line">            l1 = l1.next</span><br><span class="line">        <span class="keyword">while</span> l2:</span><br><span class="line">            num2 += str(l2.val)</span><br><span class="line">            l2 = l2.next</span><br><span class="line">        add = str(int(num1[::<span class="number">-1</span>])+int(num2[::<span class="number">-1</span>]))[::<span class="number">-1</span>]</span><br><span class="line">        head = ListNode(add[<span class="number">0</span>])</span><br><span class="line">        answer = head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(add)):</span><br><span class="line">            node = ListNode(add[i])</span><br><span class="line">            head.next = node</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode res = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span> &amp;&amp; l2 == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        res = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        ListNode head = res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="keyword">null</span> || l2!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (l1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">                sum += l1.val;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">                sum += l2.val;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            res.next = <span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);</span><br><span class="line">            res = res.next;</span><br><span class="line">            sum /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) res.next = <span class="keyword">new</span> ListNode(sum);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>In python, using</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<p>to reverse a string is a most simple way</p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>medium</tag>
        <tag>linkedlist</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode003-longestSubstringWithoutRepeatingCharacters</title>
    <url>/2019/01/08/Leetcode003-longestSubstringWithoutRepeatingCharacters/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string, find the length of the longest substring without repeating characters.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><p>Input: “abcabcbb”</p>
<p>Output: 3 </p>
<p>Explanation: The answer is “abc”, with the length of 3. </p>
<h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><p>Input: “bbbbb”</p>
<p>Output: 1</p>
<p>Explanation: The answer is “b”, with the length of 1.</p>
<h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h3><p>Input: “pwwkew”</p>
<p>Output: 3</p>
<p>Explanation: The answer is “wke”, with the length of 3.<br>             Note that the answer must be a substring, “pwke” is a subsequence and not a substring.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; s.length())&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(s.charAt(right)))&#123;</span><br><span class="line">                left = Math.max(left, map.get(s.charAt(right)) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(s.charAt(right), right);</span><br><span class="line">            res = Math.max(res, right - left + <span class="number">1</span>);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><p>First set the first element as the current longest substring</p>
<p>For the rest part of the input string, check if each element is in the substring</p>
<p>If not, plus one to current temp length value</p>
<p>If yes, reset the current longest substring from the index where the element occurs last time and reset the temp length value</p>
<p>Each time, comparing the current temp length with the final length </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        num = <span class="built_in">len</span>(s)</span><br><span class="line">        sub = <span class="string">&quot;&quot;</span>+s[<span class="number">0</span>]</span><br><span class="line">        temp = <span class="number">1</span></span><br><span class="line">        count = <span class="number">1</span></span><br><span class="line">        f = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> sub.find(s[i]) == -<span class="number">1</span>:</span><br><span class="line">                sub += s[i]</span><br><span class="line">                temp += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                f = sub.find(s[i])+<span class="number">1</span></span><br><span class="line">                sub = sub[f::]+s[i]</span><br><span class="line">                temp = temp - f + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> temp&gt;count:</span><br><span class="line">                count = temp</span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><p>Using a list to record where each letter occurs, -1 for each one for initialization.</p>
<p>Using a value First to record the begining of current longest substring, -1 as initialization.</p>
<p>Looping the string, if the index where the element occurs bigger than the value First, meaning that the element has occurs in current substring, then renew the First and store the element’s current index. Renew the count of length at last</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        a = [-<span class="number">1</span>] * <span class="number">256</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        first = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> a[<span class="built_in">ord</span>(s[i])] &gt; first:</span><br><span class="line">                first = a[<span class="built_in">ord</span>(s[i])]</span><br><span class="line">            a[<span class="built_in">ord</span>(s[i])] = i</span><br><span class="line">            count = <span class="built_in">max</span>(count, (i-first))</span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode006-zigZagConversion</title>
    <url>/2019/01/22/Leetcode006-zigZagConversion/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure>
<p>And then read line by line: “PAHNAPLSIIGYIR”</p>
<p>Write the code that will take a string and make this conversion given a number of rows:</p>
<p>string convert(string s, int numRows);</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><p>Input: s = “PAYPALISHIRING”, numRows = 3</p>
<p>Output: “PAHNAPLSIIGYIR”</p>
<h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><p>Input: s = “PAYPALISHIRING”, numRows = 4</p>
<p>Output: “PINALSIGYAHRPI”</p>
<p>Explanation:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">P     I    N</span><br><span class="line">A   L S  I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Using 2D-list to store the result of conversion, each list in 2D-list store one row </p>
<p>Following the rule of zigzag conversion to traverse the input string</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s, numRows)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type numRows: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        </span><br><span class="line">        a = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(numRows)]</span><br><span class="line">        </span><br><span class="line">        row = <span class="number">0</span></span><br><span class="line">        direction = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> s:</span><br><span class="line">            a[row].append(x)</span><br><span class="line">            <span class="keyword">if</span> row == numRows<span class="number">-1</span>:</span><br><span class="line">                direction = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">elif</span> row == <span class="number">0</span>:</span><br><span class="line">                direction = <span class="number">1</span></span><br><span class="line">            row += direction</span><br><span class="line">            </span><br><span class="line">        result = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> a:</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> row:</span><br><span class="line">                result += x</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>2D-list</tag>
      </tags>
  </entry>
  <entry>
    <title>Four in a row game(2 players)</title>
    <url>/2018/10/02/Four-In-A-Row-Game/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvuvfxtokqj212w0m8n96.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvuvj3ly89j20ig0odta3.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvuvjegey2j20iq01kwed.jpg" alt=""></p>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>Using Minimax algorithm with Alpha-Beta pruning to implement player 1 and player 2</p>
<h4 id="Class-Grid"><a href="#Class-Grid" class="headerlink" title="Class: Grid"></a>Class: Grid</h4><p>At first, we define a class Grid to store state</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># To store state</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grid</span>:</span></span><br><span class="line">    <span class="comment"># Grid Initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, grid = None)</span>:</span></span><br><span class="line">        <span class="comment"># A new grid</span></span><br><span class="line">        self.grid = []</span><br><span class="line">        self.winner = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            self.grid.append([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># Copy a exist grid</span></span><br><span class="line">        <span class="keyword">if</span> grid != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                    self.grid[i][j] = grid[i][j]</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># Check if the game is over, using after one player makes a decision</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">IsOver</span><span class="params">(self)</span>:</span></span><br><span class="line">        c = <span class="number">0</span>         <span class="comment"># statist the number of pieces</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> self.grid[i][j] != <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> self.Has4(i,j):</span><br><span class="line">                        <span class="keyword">if</span> self.GetMove() == <span class="number">1</span>:</span><br><span class="line">                            print(<span class="string">"Player2 is the winner\n"</span>)</span><br><span class="line">                            self.winner = <span class="number">-1</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            print(<span class="string">"Player1 is the winner\n"</span>)</span><br><span class="line">                            self.winner = <span class="number">1</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">        <span class="comment"># if not find the winner</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">36</span>:</span><br><span class="line">            print(<span class="string">"Tie between 2 players\n"</span>)</span><br><span class="line">            self.winner = <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># Check if the game is over, using during the minimax algorithm</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">IsEnd</span><span class="params">(self)</span>:</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        <span class="comment"># for each piece, check if it in a four-row</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> self.grid[i][j] != <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> self.Has4(i, j):</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">36</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># Check if there is a four-in-a-row</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Has4</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        <span class="comment"># Check upward</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        move = self.grid[x][y]</span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span> &gt;=<span class="number">0</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.grid[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>: </span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># check downward</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        <span class="keyword">while</span> i &lt;= <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span> &lt;= <span class="number">5</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.grid[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># check leftward</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> j<span class="number">-1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.grid[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># check rightward</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        <span class="keyword">while</span> j &lt;= <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> j+<span class="number">1</span> &lt;= <span class="number">5</span>:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.grid[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># check top-left-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.grid[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># check top-right-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.grid[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># check down-left-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        <span class="keyword">while</span> i&lt;=<span class="number">5</span> <span class="keyword">and</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span>&lt;=<span class="number">5</span> <span class="keyword">and</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.grid[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># check down-right-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        <span class="keyword">while</span> i&lt;=<span class="number">5</span> <span class="keyword">and</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span>&lt;=<span class="number">5</span> <span class="keyword">and</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.grid[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment"># mark one location as one player</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Mark</span><span class="params">(self, x, y, value)</span>:</span></span><br><span class="line">        self.grid[x][y] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetGrid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.grid       </span><br><span class="line">    <span class="comment"># Decide whose turn</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetMove</span><span class="params">(self)</span>:</span></span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        o = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> self.grid[i][j] == <span class="number">1</span>:</span><br><span class="line">                    x += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self.grid[i][j] == <span class="number">-1</span>:</span><br><span class="line">                    o += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> x == o:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="comment"># print the board</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PrintBoard</span><span class="params">(self)</span>:</span></span><br><span class="line">        temp = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            temp.append([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                temp[i][j] = self.grid[i][j]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> temp[i][j] == <span class="number">1</span>:</span><br><span class="line">                    temp[i][j] = <span class="string">'X'</span></span><br><span class="line">                <span class="keyword">elif</span> temp[i][j] == <span class="number">-1</span>:</span><br><span class="line">                    temp[i][j] = <span class="string">'O'</span></span><br><span class="line">                <span class="keyword">elif</span> temp[i][j] ==<span class="number">0</span>:</span><br><span class="line">                    temp[i][j] = <span class="string">'-'</span></span><br><span class="line">            print(temp[i])</span><br></pre></td></tr></table></figure>
<h4 id="Class-Position"><a href="#Class-Position" class="headerlink" title="Class: Position"></a>Class: Position</h4><p>Define a class Position to store a specific location with utility value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Position</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x = None, y = None, value = None)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        self.value = value</span><br></pre></td></tr></table></figure>
<h4 id="Class-Player-1"><a href="#Class-Player-1" class="headerlink" title="Class: Player 1"></a>Class: Player 1</h4><p>Player One, using minimax algorithm with Alpha-Beta pruning</p>
<p>Decision=MaxValue(MinValue(H( state )))</p>
<p>H (state) function based on the number of each cutoff notes. For two-side-open-3-in-a-row, if current space is empty, check upwards, leftwards, top-left-wards and top-right-wards four lines in total (because if check downwards, rightwards, down-left-wards or down-right-wards fours lines, it will count repeatedly). For one-side-open-3-in-a-row, if current space is empty, check upwards, leftwards, top-left-wards, top-right-wards, downwards, rightwards, down-left-wards and down-right-wards eight directions in total (it won’t be repeated). For open-2-in-a-row, just like open-3-in-a-row, in 2-side and 1-side two situation.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Grid <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> Position <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayerOne</span>:</span></span><br><span class="line">    <span class="comment"># The number of notes henerated</span></span><br><span class="line">    NodeNumber = <span class="number">0</span></span><br><span class="line">    <span class="comment"># To make a decision</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Decision</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        self.NodeNumber = <span class="number">0</span></span><br><span class="line">        p = self.MaxValue(grid)</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    <span class="comment"># Get the max utility value of current state's successions' states</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">MaxValue</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        v = <span class="number">-1000000000</span></span><br><span class="line">        NextGrid = <span class="literal">None</span></span><br><span class="line">        temp = [[<span class="number">0</span>]*<span class="number">6</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                NextGrid = Grid(grid.GetGrid())</span><br><span class="line">                <span class="keyword">if</span> NextGrid.GetGrid()[i][j] == <span class="number">0</span>: </span><br><span class="line">                    <span class="comment"># if make decision here  </span></span><br><span class="line">                    NextGrid.Mark(i, j, NextGrid.GetMove())        </span><br><span class="line">                    self.NodeNumber += <span class="number">1</span></span><br><span class="line">                    <span class="comment"># is the game over?</span></span><br><span class="line">                    <span class="keyword">if</span> NextGrid.IsEnd():</span><br><span class="line">                        <span class="keyword">return</span> Position(i, j)</span><br><span class="line">                    <span class="comment"># Get min value from its successions</span></span><br><span class="line">                    temp[i][j] = self.MinValue(NextGrid,v)</span><br><span class="line">                    <span class="comment"># If the min value bigger than current level's max value</span></span><br><span class="line">                    <span class="keyword">if</span> temp[i][j] &gt; v:</span><br><span class="line">                        v = temp[i][j]</span><br><span class="line">        <span class="comment"># Get the max value locations</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        best = [Position() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> temp[i][j] == v:</span><br><span class="line">                    best[c].x = i</span><br><span class="line">                    best[c].y = j</span><br><span class="line">                    best[c].value = temp[i][j]</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">        <span class="comment"># Get Random</span></span><br><span class="line">        RanNum = random.randint(<span class="number">0</span>, c<span class="number">-1</span>)</span><br><span class="line">        <span class="comment"># print(best[RanNum].x, best[RanNum].y)</span></span><br><span class="line">        <span class="keyword">return</span> Position(best[RanNum].x, best[RanNum].y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Get the min value of current state's successions' states</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">MinValue</span><span class="params">(self, grid, maxUp)</span>:</span></span><br><span class="line">        v = <span class="number">1000000000</span></span><br><span class="line">        NextGrid = <span class="literal">None</span></span><br><span class="line">        temp = [[<span class="number">0</span>]*<span class="number">6</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                NextGrid = Grid(grid.GetGrid())                  </span><br><span class="line">                <span class="keyword">if</span> NextGrid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># if make decision here</span></span><br><span class="line">                    self.NodeNumber += <span class="number">1</span>     </span><br><span class="line">                    NextGrid.Mark(i, j, NextGrid.GetMove())</span><br><span class="line">                    <span class="comment"># is the game over?                 </span></span><br><span class="line">                    <span class="keyword">if</span> NextGrid.IsEnd():</span><br><span class="line">                        temp[i][j] = <span class="number">-1000000000</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        temp[i][j] = self.GetHValue(NextGrid) <span class="comment"># Get heuristic value from its successions</span></span><br><span class="line">                    <span class="comment"># If the min value less than current level's min value</span></span><br><span class="line">                    <span class="keyword">if</span> temp[i][j] &lt; v:</span><br><span class="line">                        v = temp[i][j]</span><br><span class="line">                    <span class="comment"># Alpha-Beta pruning, if the min value not bigger than the max min-value of the current tree level, pruning </span></span><br><span class="line">                    <span class="keyword">if</span> v &lt;= maxUp:</span><br><span class="line">                        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">    <span class="comment"># Get heuristic value of current state</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetHValue</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        h = <span class="number">0</span></span><br><span class="line">        m3_2 = <span class="number">0</span></span><br><span class="line">        m3_1 = <span class="number">0</span></span><br><span class="line">        m2 = <span class="number">0</span></span><br><span class="line">        o3_2 = <span class="number">0</span></span><br><span class="line">        o3_1 = <span class="number">0</span></span><br><span class="line">        o2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    m3_2 += self.Three2Open(grid, i, j, grid.GetMove())</span><br><span class="line">                    m3_1 += self.Three1Open(grid, i, j, grid.GetMove())</span><br><span class="line">                    o3_2 += self.Three2Open(grid, i, j, grid.GetMove()*(<span class="number">-1</span>))</span><br><span class="line">                    o3_1 += self.Three1Open(grid, i, j, grid.GetMove()*(<span class="number">-1</span>))</span><br><span class="line">                    m2 += self.TwoOpen(grid, i, j, grid.GetMove())</span><br><span class="line">                    o2 += self.TwoOpen(grid, i, j, grid.GetMove()*(<span class="number">-1</span>))</span><br><span class="line">               </span><br><span class="line">        h = <span class="number">5</span> * m3_2 - <span class="number">10</span> * o3_2 + <span class="number">3</span> * m3_1 - <span class="number">6</span> * o3_1 + m2 - o2</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="comment"># count the number of rows with 2 sides open</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Three2Open</span><span class="params">(self, grid, x, y, move)</span>:</span></span><br><span class="line">        h = <span class="number">0</span></span><br><span class="line">        <span class="comment"># check upwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check leftwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check top-left-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i -= <span class="number">1</span> </span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check top-right-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i -= <span class="number">1</span> </span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="comment"># count the number of rows with 1 side open</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Three1Open</span><span class="params">(self, grid, x, y, move)</span>:</span></span><br><span class="line">        h = <span class="number">0</span></span><br><span class="line">        <span class="comment"># check upwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># check downwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> i&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check leftwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check rightwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span>        </span><br><span class="line"></span><br><span class="line">        <span class="comment"># check top-left-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i -= <span class="number">1</span> </span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check top-right-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i -= <span class="number">1</span> </span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check down-left-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> i&lt;=<span class="number">5</span> <span class="keyword">and</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span>&lt;=<span class="number">5</span> <span class="keyword">and</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i += <span class="number">1</span> </span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check down-right-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> i&lt;=<span class="number">5</span> <span class="keyword">and</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span>&lt;=<span class="number">5</span> <span class="keyword">and</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i += <span class="number">1</span> </span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="comment"># count the number of rows with 1/2 sides open</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">TwoOpen</span><span class="params">(self, grid, x, y, move)</span>:</span></span><br><span class="line">        h = <span class="number">0</span></span><br><span class="line">        <span class="comment"># check upwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># check downwards with 1 open</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check leftwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c ==<span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check rightwards with 1 open</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag == <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span>        </span><br><span class="line"></span><br><span class="line">        <span class="comment"># check top-left-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i -= <span class="number">1</span> </span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag == <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check top-right-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i -= <span class="number">1</span> </span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag == <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check down-left-line with 1 open</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;=<span class="number">5</span> <span class="keyword">and</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span>&lt;=<span class="number">5</span> <span class="keyword">and</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i += <span class="number">1</span> </span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check down-right-line with 1 open</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;=<span class="number">5</span> <span class="keyword">and</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span>&lt;=<span class="number">5</span> <span class="keyword">and</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i += <span class="number">1</span> </span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h</span><br></pre></td></tr></table></figure>
<h4 id="Class-Player-2"><a href="#Class-Player-2" class="headerlink" title="Class: Player 2"></a>Class: Player 2</h4><p>Player Two, using minimax algorithm with Alpha-Beta pruning</p>
<p>Decision=MaxValue(MinValue(MaxValue(MinValue(H( state )))))<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random </span><br><span class="line"><span class="keyword">from</span> Grid <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> Position <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlayerTwo</span>:</span></span><br><span class="line">    <span class="comment"># The number of notes henerated</span></span><br><span class="line">    NodeNumber = <span class="number">0</span></span><br><span class="line">    <span class="comment"># To make a decision</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Decision</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        self.NodeNumber = <span class="number">0</span></span><br><span class="line">        p = self.MaxValue1(grid)</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    <span class="comment"># Get the max utility value of current state's successions' states</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">MaxValue1</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        v = <span class="number">-1000000000</span></span><br><span class="line">        NextGrid = <span class="literal">None</span></span><br><span class="line">        temp = [[<span class="number">0</span>]*<span class="number">6</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                NextGrid = Grid(grid.GetGrid())</span><br><span class="line">                <span class="keyword">if</span> NextGrid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># if make decision here  </span></span><br><span class="line">                    NextGrid.Mark(i, j, NextGrid.GetMove())</span><br><span class="line">                    self.NodeNumber += <span class="number">1</span></span><br><span class="line">                    <span class="comment"># is the game over?</span></span><br><span class="line">                    <span class="keyword">if</span> NextGrid.IsEnd():</span><br><span class="line">                        <span class="keyword">return</span> Position(i, j)</span><br><span class="line">                    <span class="comment"># Get min value from its successions</span></span><br><span class="line">                    temp[i][j] = self.MinValue1(NextGrid,v)</span><br><span class="line">                    <span class="comment"># If the min value bigger than current level's max value</span></span><br><span class="line">                    <span class="keyword">if</span> temp[i][j] &gt; v:</span><br><span class="line">                        v = temp[i][j]</span><br><span class="line">        <span class="comment"># Get the max value locations</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        best = [Position() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">36</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> temp[i][j] == v:</span><br><span class="line">                    best[c].x = i</span><br><span class="line">                    best[c].y = j</span><br><span class="line">                    best[c].value = temp[i][j]</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">        <span class="comment"># Get Random</span></span><br><span class="line">        RanNum = random.randint(<span class="number">0</span>, c<span class="number">-1</span>)</span><br><span class="line">        <span class="comment"># print(best[RanNum].x, best[RanNum].y)</span></span><br><span class="line">        <span class="keyword">return</span> Position(best[RanNum].x, best[RanNum].y)</span><br><span class="line">    <span class="comment"># Get the min value of current state's successions' states</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">MinValue1</span><span class="params">(self, grid, maxUp)</span>:</span></span><br><span class="line">        v = <span class="number">1000000000</span></span><br><span class="line">        NextGrid = <span class="literal">None</span></span><br><span class="line">        temp = [[<span class="number">0</span>]*<span class="number">6</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                NextGrid = Grid(grid.GetGrid())</span><br><span class="line">                <span class="keyword">if</span> NextGrid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># if make decision here</span></span><br><span class="line">                    self.NodeNumber += <span class="number">1</span></span><br><span class="line">                    NextGrid.Mark(i, j, NextGrid.GetMove())</span><br><span class="line">                    <span class="comment"># is the game over?                 </span></span><br><span class="line">                    <span class="keyword">if</span> NextGrid.IsEnd():</span><br><span class="line">                        temp[i][j] = <span class="number">-1000000000</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        temp[i][j] = self.MaxValue2(NextGrid, v) <span class="comment"># Get max value from its successions</span></span><br><span class="line">                    <span class="comment"># If the max value less than current level's min value</span></span><br><span class="line">                    <span class="keyword">if</span> temp[i][j] &lt; v:</span><br><span class="line">                        v = temp[i][j]</span><br><span class="line">                    <span class="comment"># Alpha-Beta pruning, if the max value not bigger than the max min-value of the current tree level, pruning </span></span><br><span class="line">                    <span class="keyword">if</span> v&lt;=maxUp:</span><br><span class="line">                        <span class="keyword">return</span> v</span><br><span class="line">        <span class="comment"># return utility value</span></span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">    <span class="comment"># Get the max utility value of current state's successions' states</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">MaxValue2</span><span class="params">(self, grid, minUp)</span>:</span></span><br><span class="line">        v = <span class="number">-1000000000</span></span><br><span class="line">        NextGrid = <span class="literal">None</span></span><br><span class="line">        temp = [[<span class="number">0</span>]*<span class="number">6</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                NextGrid = Grid(grid.GetGrid())</span><br><span class="line">                <span class="keyword">if</span> NextGrid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># if make decision here</span></span><br><span class="line">                    NextGrid.Mark(i, j, NextGrid.GetMove())</span><br><span class="line">                    self.NodeNumber += <span class="number">1</span></span><br><span class="line">                    <span class="comment"># is the game over?                 </span></span><br><span class="line">                    <span class="keyword">if</span> NextGrid.IsEnd():</span><br><span class="line">                        temp[i][j] = <span class="number">1000000000</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        temp[i][j] = self.MinValue2(NextGrid,v) <span class="comment"># Get min value from its successions</span></span><br><span class="line">                    <span class="comment"># If the min value bigger than current level's min value</span></span><br><span class="line">                    <span class="keyword">if</span> temp[i][j] &gt; v:</span><br><span class="line">                        v = temp[i][j]</span><br><span class="line">                    <span class="comment"># Alpha-Beta pruning, if the min value not less than the min max-value of the current tree level, pruning </span></span><br><span class="line">                    <span class="keyword">if</span> v &gt;= minUp:</span><br><span class="line">                        <span class="keyword">return</span> v</span><br><span class="line">        <span class="comment"># return utility value</span></span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">    <span class="comment"># Get the min utility value of current state's successions' states</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">MinValue2</span><span class="params">(self, grid, maxUp)</span>:</span></span><br><span class="line">        v = <span class="number">1000000000</span></span><br><span class="line">        NextGrid = <span class="literal">None</span></span><br><span class="line">        temp = [[<span class="number">0</span>]*<span class="number">6</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                NextGrid = Grid(grid.GetGrid())</span><br><span class="line">                <span class="keyword">if</span> NextGrid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># if make decision here</span></span><br><span class="line">                    self.NodeNumber += <span class="number">1</span></span><br><span class="line">                    NextGrid.Mark(i, j, NextGrid.GetMove())</span><br><span class="line">                    <span class="comment"># is the game over?                 </span></span><br><span class="line">                    <span class="keyword">if</span> NextGrid.IsEnd():</span><br><span class="line">                        temp[i][j] = <span class="number">-1000000000</span> </span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        temp[i][j] = self.GetHValue(NextGrid) <span class="comment"># Get h value from its successions</span></span><br><span class="line">                    <span class="comment"># If the h value less than current level's min value</span></span><br><span class="line">                    <span class="keyword">if</span> temp[i][j] &lt; v:</span><br><span class="line">                        v = temp[i][j]</span><br><span class="line">                    <span class="comment"># Alpha-Beta pruning, if the h value not bigger than the max min-value of the current tree level, pruning </span></span><br><span class="line">                    <span class="keyword">if</span> v &lt;= maxUp:</span><br><span class="line">                        <span class="keyword">return</span> v</span><br><span class="line">        <span class="comment"># return utility value</span></span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line">    <span class="comment"># Get heuristic value of current state</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetHValue</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        h = <span class="number">0</span></span><br><span class="line">        m3_2 = <span class="number">0</span></span><br><span class="line">        m3_1 = <span class="number">0</span></span><br><span class="line">        m2 = <span class="number">0</span></span><br><span class="line">        o3_2 = <span class="number">0</span></span><br><span class="line">        o3_1 = <span class="number">0</span></span><br><span class="line">        o2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    m3_2 += self.Three2Open(grid, i, j, grid.GetMove())</span><br><span class="line">                    m3_1 += self.Three1Open(grid, i, j, grid.GetMove())</span><br><span class="line">                    o3_2 += self.Three2Open(grid, i, j, grid. GetMove()*(<span class="number">-1</span>))</span><br><span class="line">                    o3_1 += self.Three1Open(grid, i, j, grid.GetMove()*(<span class="number">-1</span>))</span><br><span class="line">                    m2 += self.TwoOpen(grid, i, j, grid.GetMove())</span><br><span class="line">                    o2 += self.TwoOpen(grid, i, j, grid.GetMove()*(<span class="number">-1</span>))</span><br><span class="line">        h = <span class="number">5</span> * m3_2 - <span class="number">10</span> * o3_2 + <span class="number">3</span> * m3_1 - <span class="number">6</span> * o3_1 + m2 - o2</span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="comment"># count the number of rows with 2 sides open</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Three2Open</span><span class="params">(self, grid, x, y, move)</span>:</span></span><br><span class="line">        h = <span class="number">0</span></span><br><span class="line">        <span class="comment"># check upwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check leftwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag:</span><br><span class="line">            h += <span class="number">1</span>   </span><br><span class="line"></span><br><span class="line">        <span class="comment"># check top-left-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i -= <span class="number">1</span> </span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check top-right-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i -= <span class="number">1</span> </span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="comment"># count the number of rows with 1 side open</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Three1Open</span><span class="params">(self, grid, x, y, move)</span>:</span></span><br><span class="line">        h = <span class="number">0</span></span><br><span class="line">        <span class="comment"># check upwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># check downwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> i&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check leftwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check rightwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span>        </span><br><span class="line"></span><br><span class="line">        <span class="comment"># check top-left-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i -= <span class="number">1</span> </span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check top-right-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i -= <span class="number">1</span> </span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check down-left-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> i&lt;=<span class="number">5</span> <span class="keyword">and</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span>&lt;=<span class="number">5</span> <span class="keyword">and</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i += <span class="number">1</span> </span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check down-right-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">while</span> i&lt;=<span class="number">5</span> <span class="keyword">and</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span>&lt;=<span class="number">5</span> <span class="keyword">and</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i += <span class="number">1</span> </span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">3</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">3</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h</span><br><span class="line">    <span class="comment"># count the number of rows with 1/2 sides open</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">TwoOpen</span><span class="params">(self, grid, x, y, move)</span>:</span></span><br><span class="line">        h = <span class="number">0</span></span><br><span class="line">        <span class="comment"># check upwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># check downwards with 1 open</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check leftwards</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c ==<span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check rightwards with 1 open</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag == <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span>        </span><br><span class="line"></span><br><span class="line">        <span class="comment"># check top-left-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i -= <span class="number">1</span> </span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag == <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check top-right-line</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i<span class="number">-1</span>&gt;=<span class="number">0</span> <span class="keyword">and</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i -= <span class="number">1</span> </span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag == <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check down-left-line with 1 open</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;=<span class="number">5</span> <span class="keyword">and</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span>&lt;=<span class="number">5</span> <span class="keyword">and</span> j<span class="number">-1</span>&gt;=<span class="number">0</span>:</span><br><span class="line">                i += <span class="number">1</span> </span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># check down-right-line with 1 open</span></span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        i = x</span><br><span class="line">        j = y</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> i&lt;=<span class="number">5</span> <span class="keyword">and</span> j&lt;=<span class="number">5</span>:</span><br><span class="line">            <span class="keyword">if</span> i+<span class="number">1</span>&lt;=<span class="number">5</span> <span class="keyword">and</span> j+<span class="number">1</span>&lt;=<span class="number">5</span>:</span><br><span class="line">                i += <span class="number">1</span> </span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid.GetGrid()[i][j] == move:</span><br><span class="line">                    c += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> c == <span class="number">2</span> <span class="keyword">and</span> grid.GetGrid()[i][j] == <span class="number">0</span>:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span>                  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">2</span> <span class="keyword">and</span> flag == <span class="literal">False</span>:</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h</span><br></pre></td></tr></table></figure></p>
<h4 id="Class-main"><a href="#Class-main" class="headerlink" title="Class: main"></a>Class: main</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PlayerOne <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> PlayerTwo <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> Grid <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> Position <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">play1 = PlayerOne()</span><br><span class="line">play2 = PlayerTwo()</span><br><span class="line">grid = Grid()</span><br><span class="line">p = Position()</span><br><span class="line"><span class="comment"># when the game is not over</span></span><br><span class="line"><span class="keyword">while</span> grid.IsOver() == <span class="number">0</span>:</span><br><span class="line">    start = time.perf_counter_ns()</span><br><span class="line">    <span class="comment"># player1 makes a decision</span></span><br><span class="line">    p = play1.Decision(grid)</span><br><span class="line">    end = time.perf_counter_ns()</span><br><span class="line">    <span class="comment"># record the decision</span></span><br><span class="line">    grid.Mark(p.x, p.y, grid.GetMove())</span><br><span class="line">    <span class="comment"># print the board</span></span><br><span class="line">    grid.PrintBoard()</span><br><span class="line">    print(<span class="string">"Number of node generated: "</span>, play1.NodeNumber)</span><br><span class="line">    print(<span class="string">"Running Time: "</span>, (end-start)/<span class="number">1000000</span>, <span class="string">'ms'</span>)</span><br><span class="line">    <span class="comment"># if the game is over</span></span><br><span class="line">    <span class="keyword">if</span> grid.IsOver():</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># if the game is not over, player2's turn</span></span><br><span class="line">    start = time.perf_counter_ns()</span><br><span class="line">    <span class="comment"># player2 makes a decision</span></span><br><span class="line">    p = play2.Decision(grid)</span><br><span class="line">    end = time.perf_counter_ns()</span><br><span class="line">    <span class="comment"># record the decision</span></span><br><span class="line">    grid.Mark(p.x, p.y, grid.GetMove())</span><br><span class="line">    <span class="comment"># print the board</span></span><br><span class="line">    grid.PrintBoard()</span><br><span class="line">    print(<span class="string">"Number of node generated: "</span>, play2.NodeNumber)</span><br><span class="line">    print(<span class="string">"Running Time: "</span>, (end-start)/<span class="number">1000000</span>, <span class="string">'ms'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	x	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">Number of node generated:  106</span><br><span class="line">Running Time:  293.659876 ms</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	x	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	o	-	-</span><br><span class="line">Number of node generated:  74043</span><br><span class="line">Running Time:  259152.273405 ms</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	x	-	x	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	o	-	-</span><br><span class="line">Number of node generated:  574</span><br><span class="line">Running Time:  2125.719408 ms</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	x	-	x	-	-</span><br><span class="line">-	-	o	-	-	-</span><br><span class="line">-	-	-	o	-	-</span><br><span class="line">Number of node generated:  180340</span><br><span class="line">Running Time:  608766.081878 ms</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	x	-	x	-	-</span><br><span class="line">-	-	o	-	-	-</span><br><span class="line">-	-	-	o	-	x</span><br><span class="line">Number of node generated:  679</span><br><span class="line">Running Time:  2549.825213 ms</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">o	x	-	x	-	-</span><br><span class="line">-	-	o	-	-	-</span><br><span class="line">-	-	-	o	-	x</span><br><span class="line">Number of node generated:  173292</span><br><span class="line">Running Time:  542590.650306 ms</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">o	x	-	x	-	-</span><br><span class="line">-	-	o	-	x	-</span><br><span class="line">-	-	-	o	-	x</span><br><span class="line">Number of node generated:  590</span><br><span class="line">Running Time:  1894.320808 ms</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	o	-	-	-</span><br><span class="line">o	x	-	x	-	-</span><br><span class="line">-	-	o	-	x	-</span><br><span class="line">-	-	-	o	-	x</span><br><span class="line">Number of node generated:  90411</span><br><span class="line">Running Time:  243936.519988 ms</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	o	-	-	-</span><br><span class="line">o	x	-	x	-	-</span><br><span class="line">-	-	o	-	x	-</span><br><span class="line">-	-	-	o	x	x</span><br><span class="line">Number of node generated:  670</span><br><span class="line">Running Time:  2081.212216 ms</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	o	-	-	-</span><br><span class="line">o	x	o	x	-	-</span><br><span class="line">-	-	o	-	x	-</span><br><span class="line">-	-	-	o	x	x</span><br><span class="line">Number of node generated:  65546</span><br><span class="line">Running Time:  174985.060459 ms</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	o	-	-	-</span><br><span class="line">o	x	o	x	-	-</span><br><span class="line">-	-	o	x	x	-</span><br><span class="line">-	-	-	o	x	x</span><br><span class="line">Number of node generated:  268</span><br><span class="line">Running Time:  648.193449 ms</span><br><span class="line">-	-	-	-	-	-</span><br><span class="line">-	-	o	-	-	-</span><br><span class="line">-	-	o	-	-	-</span><br><span class="line">o	x	o	x	-	-</span><br><span class="line">-	-	o	x	x	-</span><br><span class="line">-	-	-	o	x	x</span><br><span class="line">Number of node generated:  3999</span><br><span class="line">Running Time:  9746.094903 ms</span><br><span class="line">Player 2 is the winner</span><br></pre></td></tr></table></figure>
<h2 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h2><ul>
<li>Alpha-Beta pruning saves a lot of time. Before applying Alpha-Beta pruning, it took about 6 hours to finish a game. After it, only about 30 mins</li>
<li>It need to be very careful about Python’s copy/array initialization. <a href="http://yfygoing.com/2018/10/04/CopyInPython/">More details about the problem, please click here</a></li>
</ul>
<hr />]]></content>
      <categories>
        <category>Algorithm Problem</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>AI</tag>
        <tag>Game</tag>
        <tag>Adversarial Search</tag>
        <tag>Minimax</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode004-findMedianSortedArrays</title>
    <url>/2019/01/22/Leetcode004-findMedianSortedArrays/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>
<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<p>You may assume nums1 and nums2 cannot be both empty.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><p>nums1 = [1, 3]</p>
<p>nums2 = [2]</p>
<p>The median is 2.0</p>
<h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><p>nums1 = [1, 2]</p>
<p>nums2 = [3, 4]</p>
<p>The median is (2 + 3)/2 = 2.5</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Solution-1-Divide-and-Conquer"><a href="#Solution-1-Divide-and-Conquer" class="headerlink" title="Solution 1: Divide and Conquer"></a>Solution 1: Divide and Conquer</h3><p><strong>Time Complexity:</strong> <script type="math/tex">O(log(M + N))</script></p>
<p><strong>Space Complexity:</strong> <script type="math/tex">O(1)</script></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">把两个array A,B各分成左右两半</span><br><span class="line">left_part     | right_part</span><br><span class="line">A[0] - A[i-1] | A[i] - A[m-1]</span><br><span class="line">B[0] - B[j-1] | B[j] - B[n-1]</span><br><span class="line">保证</span><br><span class="line">1) len(left_part) &#x3D;&#x3D; len(right_part)</span><br><span class="line">2) max(left_part) &lt;&#x3D; min(right_part)</span><br><span class="line">即</span><br><span class="line">(1) i + j &#x3D;&#x3D; m - i + n - j (or: m - i + n - j + 1) </span><br><span class="line">    if n &gt;&#x3D; m, we just need to set: i &#x3D; 0 ~ m, j &#x3D; (m + n + 1)&#x2F;2 - i (n&gt;&#x3D;m为了保证j&gt;&#x3D;0)</span><br><span class="line">(2) B[j-1] &lt;&#x3D; A[i] and A[i-1] &lt;&#x3D; B[j]</span><br><span class="line">这样中位数就是maxLeft或(maxLeft+minRight)&#x2F;2</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> n = nums2.length;</span><br><span class="line">        <span class="keyword">if</span>(m &gt; n)&#123;  <span class="comment">//to ensure m &lt;= n</span></span><br><span class="line">            <span class="keyword">int</span>[] temp = nums1; </span><br><span class="line">            nums1 = nums2;</span><br><span class="line">            nums2 = temp;</span><br><span class="line">            <span class="keyword">int</span> tmp = m; </span><br><span class="line">            m = n;</span><br><span class="line">            n = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//二分找i 使B[j-1] &lt;= A[i] and A[i-1] &lt;= B[j]</span></span><br><span class="line">        <span class="keyword">int</span> iMin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> iMax = m;</span><br><span class="line">        <span class="keyword">while</span>(iMin &lt;= iMax)&#123;</span><br><span class="line">            <span class="keyword">int</span> i = (iMin + iMax) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> j = (m + n + <span class="number">1</span>) / <span class="number">2</span> - i;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(i &lt; iMax &amp;&amp; nums2[j-<span class="number">1</span>] &gt; nums1[i])&#123;  <span class="comment">//i is too small</span></span><br><span class="line">                iMin = i + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i &gt; iMin &amp;&amp; nums1[i-<span class="number">1</span>] &gt; nums2[j])&#123;    <span class="comment">//i is too big</span></span><br><span class="line">                iMax = i - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;  <span class="comment">//i is perfect</span></span><br><span class="line">                <span class="keyword">int</span> maxLeft = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">                    maxLeft = nums2[j-<span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j == <span class="number">0</span>)&#123;</span><br><span class="line">                    maxLeft = nums1[i-<span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    maxLeft = Math.max(nums2[j-<span class="number">1</span>], nums1[i-<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>((m+n) % <span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> maxLeft;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> minRight = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(i == m)&#123;</span><br><span class="line">                    minRight = nums2[j];</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j == n)&#123;</span><br><span class="line">                    minRight = nums1[i];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    minRight = Math.min(nums1[i], nums2[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> (maxLeft + minRight) / <span class="number">2.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><p>convert to find the Kth number in m + n, each time ignore k/2 numbers</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">int</span> m = nums1.length, n = nums2.length;</span><br><span class="line">        <span class="keyword">int</span> l = (m + n + <span class="number">1</span>) / <span class="number">2</span>; <span class="comment">//left half of the combined median</span></span><br><span class="line">        <span class="keyword">int</span> r = (m + n + <span class="number">2</span>) / <span class="number">2</span>; <span class="comment">//right half of the combined median</span></span><br><span class="line">        <span class="comment">// If the nums1.length + nums2.length is odd, the 2 function will return the same number</span></span><br><span class="line">        <span class="comment">// Else if nums1.length + nums2.length is even, the 2 function will return the left number and right number that make up a median</span></span><br><span class="line">        <span class="keyword">return</span> (getKth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, l) + getKth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, r)) / <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getKth</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> start1, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> start2, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// This function finds the Kth element in nums1 + nums2</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// If nums1 is exhausted, return kth number in nums2</span></span><br><span class="line">        <span class="keyword">if</span> (start1 &gt; nums1.length - <span class="number">1</span>) <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>];        </span><br><span class="line">        <span class="comment">// If nums2 is exhausted, return kth number in nums1</span></span><br><span class="line">        <span class="keyword">if</span> (start2 &gt; nums2.length - <span class="number">1</span>) <span class="keyword">return</span> nums1[start1 + k - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// If k == 1, return the first number</span></span><br><span class="line">        <span class="comment">// Since nums1 and nums2 is sorted, the smaller one among the start point of nums1 and nums2 is the first one</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> Math.min(nums1[start1], nums2[start2]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid1 = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> mid2 = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span> (start1 + k / <span class="number">2</span> - <span class="number">1</span> &lt; nums1.length) mid1 = nums1[start1 + k / <span class="number">2</span> - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (start2 + k / <span class="number">2</span> - <span class="number">1</span> &lt; nums2.length) mid2 = nums2[start2 + k / <span class="number">2</span> - <span class="number">1</span>];        </span><br><span class="line">        <span class="comment">// Throw away half of the array from nums1 or nums2. And cut k in half</span></span><br><span class="line">        <span class="keyword">if</span> (mid1 &lt; mid2) &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, start1 + k / <span class="number">2</span>, nums2, start2, k - k / <span class="number">2</span>); <span class="comment">//nums1.right + nums2</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, start1, nums2, start2 + k / <span class="number">2</span>, k - k / <span class="number">2</span>); <span class="comment">//nums1 + nums2.right</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Bloomberg</tag>
        <tag>Binary Search</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode005-longestPalindrome</title>
    <url>/2019/01/22/Leetcode005-longestPalindrome/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><p>Input: “babad”</p>
<p>Output: “bab”</p>
<p>Note: “aba” is also a valid answer.</p>
<h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><p>Input: “cbbd”</p>
<p>Output: “bb”</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Most common, $O(N^2)$<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">int</span> maxLen;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extend</span><span class="params">(String s, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (a &gt;= <span class="number">0</span> &amp;&amp; b &lt; s.length() &amp;&amp; s.charAt(a) == s.charAt(b))&#123;</span><br><span class="line">            a--;</span><br><span class="line">            b++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> len = b - a - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (len &gt; maxLen)&#123;</span><br><span class="line">            maxLen = len;</span><br><span class="line">            start = a + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s== <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &lt; <span class="number">2</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length()-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            extend(s, i, i);</span><br><span class="line">            extend(s, i, i+<span class="number">1</span>);</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> s.substring(start, start+maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>O(N) Manacher<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        List&lt;Character&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        a.add(<span class="string">'@'</span>);</span><br><span class="line">        a.add(<span class="string">'#'</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">while</span> (l &lt; s.length())&#123;</span><br><span class="line">            a.add(s.charAt(l));</span><br><span class="line">            a.add(<span class="string">'#'</span>);</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        a.add(<span class="string">'?'</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> n = a.size();       </span><br><span class="line">        <span class="keyword">int</span> maxid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] p = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span> ID = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//     =================    </span></span><br><span class="line">        <span class="keyword">int</span> maxPi = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//     =================</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (maxid &gt; i) p[i] = Math.min(p[<span class="number">2</span> * ID - i], maxid - i);</span><br><span class="line">            <span class="keyword">else</span> p[i] = <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(a.get(i+p[i]) == a.get(i-p[i]))&#123;</span><br><span class="line">                p[i] ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p[i] + i &gt; maxid)&#123;</span><br><span class="line">                maxid = p[i] + i;</span><br><span class="line">                ID = i;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//         ==============    </span></span><br><span class="line">            <span class="keyword">if</span> (p[i] &gt; maxPi)&#123;</span><br><span class="line">                maxPi = p[i];</span><br><span class="line">                index = i;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//         ==============   </span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      ==========================   </span></span><br><span class="line">        <span class="keyword">int</span> k = index - maxPi + <span class="number">2</span>;</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span>(maxPi &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (a.get(k) != <span class="string">'#'</span>)&#123;</span><br><span class="line">                res += a.get(k);</span><br><span class="line">                maxPi --;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      ===========================</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>DP, $O(N^2)$<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123; </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extend</span><span class="params">(String s, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> maxStart = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxEnd = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()][s.length()];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//making everything below the diagonal as true</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dp.length;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                dp[i][j]=<span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> maxLength=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s.length()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            dp[i][i]=<span class="keyword">true</span>;   <span class="comment">//diagonal as true</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;s.length();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i)==s.charAt(j) &amp;&amp; dp[i+<span class="number">1</span>][j-<span class="number">1</span>]==<span class="keyword">true</span>)&#123;</span><br><span class="line">                    dp[i][j]=<span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">if</span>(maxLength&lt;j-i)&#123;</span><br><span class="line">                        maxLength=j-i;</span><br><span class="line">                        maxStart=i;</span><br><span class="line">                        maxEnd=j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(maxStart, maxEnd + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Using O(n) Manacher algorithm to get the longest palindromic substring</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        a = [<span class="string">'@'</span>, <span class="string">'#'</span>]</span><br><span class="line">        l = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> l &lt;= len(s):</span><br><span class="line">            a.append(s[l<span class="number">-1</span>])</span><br><span class="line">            a.append(<span class="string">'#'</span>)</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        a.append(<span class="string">'?'</span>)</span><br><span class="line">        n = len(a)</span><br><span class="line">        maxid = <span class="number">0</span></span><br><span class="line">        p = [<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        ID = <span class="number">0</span></span><br><span class="line">        maxPi = <span class="number">0</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n<span class="number">-2</span>):</span><br><span class="line">            <span class="keyword">if</span> maxid&gt;i:</span><br><span class="line">                p[i] = min(p[<span class="number">2</span> * ID - i], maxid-i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p[i] = <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> a[i+p[i]] == a[i-p[i]]:</span><br><span class="line">                p[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> p[i]+i &gt; maxid:</span><br><span class="line">                maxid = p[i] + i</span><br><span class="line">                ID = i</span><br><span class="line">            <span class="keyword">if</span> p[i] &gt; maxPi:</span><br><span class="line">                maxPi = p[i]</span><br><span class="line">                index = i</span><br><span class="line"></span><br><span class="line">        k = index - maxPi + <span class="number">2</span></span><br><span class="line">        result = <span class="string">''</span></span><br><span class="line">        <span class="keyword">while</span> maxPi &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> a[k] != <span class="string">'#'</span>:</span><br><span class="line">                result += a[k]</span><br><span class="line">                maxPi -= <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
        <tag>String</tag>
        <tag>Palindrome</tag>
        <tag>Manacher</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode007-reverseInteger</title>
    <url>/2019/01/22/Leetcode007-reverseInteger/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 32-bit signed integer, reverse digits of an integer.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><p>Input: 123</p>
<p>Output: 321</p>
<h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><p>Input: -123</p>
<p>Output: -321</p>
<h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h3><p>Input: 120</p>
<p>Output: 21</p>
<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Easy problem</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tail = x % <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">int</span> newResult = result * <span class="number">10</span> + tail;</span><br><span class="line">            <span class="keyword">if</span> ((newResult - tail) / <span class="number">10</span> != result)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            result = newResult;</span><br><span class="line">            x = x / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h3><p>convert to string and reverse</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        limit = <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">31</span>)</span><br><span class="line">        <span class="keyword">if</span> x&lt;<span class="number">0</span>:</span><br><span class="line">            x = <span class="built_in">abs</span>(x)</span><br><span class="line">            result = -<span class="built_in">int</span>(<span class="built_in">str</span>(x)[::-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = <span class="built_in">int</span>(<span class="built_in">str</span>(x)[::-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> result &gt;= (-limit) <span class="keyword">and</span> result&lt;=(limit-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2"></a>Method 2</h3><p>Convert to list and reverse</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        limit = <span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">31</span>)</span><br><span class="line">        </span><br><span class="line">        l = <span class="built_in">list</span>(<span class="built_in">str</span>(x))</span><br><span class="line">        n = <span class="built_in">len</span>(l)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, <span class="number">0</span> ,-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> l[i] != <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                l = l[:i+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">if</span> l[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            l = l[:<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">            l.insert(<span class="number">0</span>,<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l = l[::-<span class="number">1</span>]</span><br><span class="line">        result = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(l))</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> result &gt;= (-limit) <span class="keyword">and</span> result&lt;=(limit-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>String</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode009-palindromeNumber</title>
    <url>/2019/01/22/Leetcode009-palindromeNumber/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><p>Input: 121</p>
<p>Output: true</p>
<h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><p>Input: -121</p>
<p>Output: false</p>
<p>Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</p>
<h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h3><p>Input: 10</p>
<p>Output: false</p>
<p>Explanation: Reads 01 from right to left. Therefore it is not a palindrome.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x&lt;<span class="number">0</span> || (x!=<span class="number">0</span> &amp;&amp; x%<span class="number">10</span>==<span class="number">0</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> rev = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x &gt; rev)&#123;</span><br><span class="line">    	rev = rev*<span class="number">10</span> + x%<span class="number">10</span>;</span><br><span class="line">    	x = x/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (x==rev || x==rev/<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><p>Convert to string</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        s = str(x)</span><br><span class="line">        s1 = s[::<span class="number">-1</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> s==s1:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><p>Don’t convert, using / and %</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> x&lt;<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        tmp = x</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> tmp&gt;<span class="number">0</span>:</span><br><span class="line">            result = result*<span class="number">10</span> + tmp%<span class="number">10</span></span><br><span class="line">            tmp = tmp //<span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x == result</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode010-regularExpressionMatching</title>
    <url>/2019/01/23/Leetcode010-regularExpressionMatching/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an input string (s) and a pattern (p), implement regular expression matching with support for ‘.’ and ‘*’.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;.&#39; Matches any single character.</span><br><span class="line">&#39;*&#39; Matches zero or more of the preceding element.</span><br></pre></td></tr></table></figure><br>The matching should cover the entire input string (not partial).</p>
<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul>
<li>s could be empty and contains only lowercase letters a-z.</li>
<li>p could be empty and contains only lowercase letters a-z, and characters like . or *.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;aa&quot;</span><br><span class="line">p &#x3D; &quot;a&quot;</span><br><span class="line">Output: false</span><br><span class="line">Explanation: &quot;a&quot; does not match the entire string &quot;aa&quot;.</span><br></pre></td></tr></table></figure>
<h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;aa&quot;</span><br><span class="line">p &#x3D; &quot;a*&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: &#39;*&#39; means zero or more of the precedeng element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.</span><br></pre></td></tr></table></figure>
<h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;ab&quot;</span><br><span class="line">p &#x3D; &quot;.*&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: &quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.</span><br></pre></td></tr></table></figure>
<h3 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;aab&quot;</span><br><span class="line">p &#x3D; &quot;c*a*b&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches &quot;aab&quot;.</span><br></pre></td></tr></table></figure>
<h3 id="Example-5"><a href="#Example-5" class="headerlink" title="Example 5"></a>Example 5</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;mississippi&quot;</span><br><span class="line">p &#x3D; &quot;mis*is*p*.&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Using DFS</p>
<p>Considering s =’’ or p=’’</p>
<p>Considering if there is a ‘*’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEndOfStar</span><span class="params">(self, p)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> p!=<span class="string">''</span>:</span><br><span class="line">            <span class="keyword">if</span> len(p) ==<span class="number">1</span> <span class="keyword">or</span> (len(p)&gt;<span class="number">1</span> <span class="keyword">and</span> p[<span class="number">1</span>]!=<span class="string">'*'</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            p = p[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s, p)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type p: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> p ==<span class="string">''</span>:</span><br><span class="line">            <span class="keyword">return</span> s == <span class="string">''</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> s ==<span class="string">''</span>:</span><br><span class="line">            <span class="keyword">return</span> self.isEndOfStar(p)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> len(p) == <span class="number">1</span> <span class="keyword">or</span> (len(p) &gt; <span class="number">1</span> <span class="keyword">and</span> p[<span class="number">1</span>]!=<span class="string">'*'</span>):</span><br><span class="line"><span class="comment">#       without *</span></span><br><span class="line">            <span class="keyword">if</span> s[<span class="number">0</span>]!=p[<span class="number">0</span>] <span class="keyword">and</span> p[<span class="number">0</span>] !=<span class="string">'.'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.isMatch(s[<span class="number">1</span>:],p[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#       with *</span></span><br><span class="line">            <span class="keyword">if</span> self.isMatch(s, p[<span class="number">2</span>:]):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">while</span> s[<span class="number">0</span>] == p[<span class="number">0</span>] <span class="keyword">or</span> p[<span class="number">0</span>] == <span class="string">'.'</span>:</span><br><span class="line">                s = s[<span class="number">1</span>:]</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> self.isMatch(s, p[<span class="number">2</span>:]):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">if</span> s ==<span class="string">''</span>:</span><br><span class="line">                    <span class="keyword">return</span> self.isEndOfStar(p)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode008-stringtoInteger</title>
    <url>/2019/01/22/Leetcode008-stringtoInteger/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement atoi which converts a string to an integer.</p>
<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>
<p>If no valid conversion could be performed, a zero value is returned.</p>
<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul>
<li>Only the space character ‘ ‘ is considered as whitespace character.</li>
<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (2^31 − 1) or INT_MIN (−2^31) is returned.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><p>Input: “42”</p>
<p>Output: 42</p>
<h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><p>Input: “   -42”</p>
<p>Output: -42</p>
<p>Explanation: The first non-whitespace character is ‘-‘, which is the minus sign.<br>             Then take as many numerical digits as possible, which gets 42.</p>
<h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h3><p>Input: “4193 with words”</p>
<p>Output: 4193</p>
<p>Explanation: Conversion stops at digit ‘3’ as the next character is not a numerical digit.</p>
<h3 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h3><p>Input: “words and 987”</p>
<p>Output: 0</p>
<p>Explanation: The first non-whitespace character is ‘w’, which is not a numerical digit or a +/- sign. Therefore no valid conversion could be performed.</p>
<h3 id="Example-5"><a href="#Example-5" class="headerlink" title="Example 5"></a>Example 5</h3><p>Input: “-91283472332”</p>
<p>Output: -2147483648</p>
<p>Explanation: The number “-91283472332” is out of the range of a 32-bit signed integer.<br>             Thefore INT_MIN (−231) is returned.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">int</span> index = <span class="number">0</span>, sign = <span class="number">1</span>, total = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//1. Empty string</span></span><br><span class="line">        str = str.trim();</span><br><span class="line">        <span class="keyword">if</span>(str.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. Remove Spaces</span></span><br><span class="line">        <span class="keyword">while</span>(index &lt; str.length() &amp;&amp; str.charAt(index) == <span class="string">' '</span>)</span><br><span class="line">            index ++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. Handle signs</span></span><br><span class="line">        <span class="keyword">if</span>(str.charAt(index) == <span class="string">'+'</span> || str.charAt(index) == <span class="string">'-'</span>)&#123;</span><br><span class="line">            sign = str.charAt(index) == <span class="string">'+'</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">            index ++;</span><br><span class="line">        &#125;  </span><br><span class="line">    </span><br><span class="line">        <span class="comment">//4. Convert number and avoid overflow</span></span><br><span class="line">        <span class="keyword">while</span>(index &lt; str.length())&#123;</span><br><span class="line">            <span class="keyword">int</span> digit = str.charAt(index) - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span>(digit &lt; <span class="number">0</span> || digit &gt; <span class="number">9</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//check if total will be overflow after 10 times and add digit</span></span><br><span class="line">            <span class="keyword">if</span>(Integer.MAX_VALUE/<span class="number">10</span> &lt; total || Integer.MAX_VALUE/<span class="number">10</span> == total &amp;&amp; Integer.MAX_VALUE %<span class="number">10</span> &lt; digit)</span><br><span class="line">                <span class="keyword">return</span> sign == <span class="number">1</span> ? Integer.MAX_VALUE : Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">            total = <span class="number">10</span> * total + digit;</span><br><span class="line">            index ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total * sign;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Delete begining spaces</p>
<p>Considering empty string and the string containing only whitespace characters</p>
<p>Considering +/-, +-/-+/++-/….</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type str: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        limit = pow(<span class="number">2</span>, <span class="number">31</span>)</span><br><span class="line">        result = <span class="string">''</span></span><br><span class="line">        noWhite = <span class="number">0</span></span><br><span class="line">        minus = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> len(str) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> str[<span class="number">0</span>] == <span class="string">' '</span>:</span><br><span class="line">            str = str[<span class="number">1</span>:]</span><br><span class="line">            <span class="keyword">if</span> str ==<span class="string">''</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (str[<span class="number">0</span>] &gt;= <span class="string">'0'</span> <span class="keyword">and</span> str[<span class="number">0</span>]&lt;=<span class="string">'9'</span>):</span><br><span class="line">            sign = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> (str[<span class="number">0</span>] == <span class="string">'+'</span>):</span><br><span class="line">            str = str[<span class="number">1</span>:]</span><br><span class="line">            sign = <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> (str[<span class="number">0</span>] == <span class="string">'-'</span>):</span><br><span class="line">            str = str[<span class="number">1</span>:]</span><br><span class="line">            sign = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> str:</span><br><span class="line">            <span class="keyword">if</span> x &gt;= <span class="string">'0'</span> <span class="keyword">and</span> x &lt;=<span class="string">'9'</span>:</span><br><span class="line">                result = result*<span class="number">10</span> + ord(x) - <span class="number">48</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        result *= sign</span><br><span class="line">        <span class="keyword">if</span> (result &gt; limit<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">return</span> limit<span class="number">-1</span></span><br><span class="line">        <span class="keyword">elif</span> (result &lt; -limit):</span><br><span class="line">            <span class="keyword">return</span> -limit</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> odd() and chr()</p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode011-containerWithMostWater</title>
    <url>/2019/01/23/Leetcode011-containerWithMostWater/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>
<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>You may not slant the container and n is at least 2.</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fzhkuw8yqij20m90anwep.jpg" alt=""></p>
<p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,8,6,2,5,4,8,3,7]</span><br><span class="line">Output: 49</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Greedy</p>
<p>Using two pointers, one to the head and one to the tail</p>
<p>There is a feature, the area of two edges not smaller than the area of the shorter edge with all other edges between the two edges</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type height: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = len(height)<span class="number">-1</span></span><br><span class="line">        </span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> i&lt;j:</span><br><span class="line">            result = max(result, min(height[i], height[j])*(j-i))</span><br><span class="line">            <span class="keyword">if</span> height[i]&lt;height[j]:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode012-integerToRoman</title>
    <url>/2020/03/02/Leetcode012-integerToRoman/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><br>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p>
<ul>
<li>I can be placed before V (5) and X (10) to make 4 and 9. </li>
<li>X can be placed before L (50) and C (100) to make 40 and 90. </li>
<li>C can be placed before D (500) and M (1000) to make 400 and 900.</li>
</ul>
<p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: &quot;III&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: &quot;IV&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 9</span><br><span class="line">Output: &quot;IX&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 58</span><br><span class="line">Output: &quot;LVIII&quot;</span><br><span class="line">Explanation: L &#x3D; 50, V &#x3D; 5, III &#x3D; 3.</span><br></pre></td></tr></table></figure><br><strong>Example 5:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1994</span><br><span class="line">Output: &quot;MCMXCIV&quot;</span><br><span class="line">Explanation: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90 and IV &#x3D; 4.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        String M[] = &#123;<span class="string">""</span>, <span class="string">"M"</span>, <span class="string">"MM"</span>, <span class="string">"MMM"</span>&#125;;</span><br><span class="line">        String C[] = &#123;<span class="string">""</span>, <span class="string">"C"</span>, <span class="string">"CC"</span>, <span class="string">"CCC"</span>, <span class="string">"CD"</span>, <span class="string">"D"</span>, <span class="string">"DC"</span>, <span class="string">"DCC"</span>, <span class="string">"DCCC"</span>, <span class="string">"CM"</span>&#125;;</span><br><span class="line">        String X[] = &#123;<span class="string">""</span>, <span class="string">"X"</span>, <span class="string">"XX"</span>, <span class="string">"XXX"</span>, <span class="string">"XL"</span>, <span class="string">"L"</span>, <span class="string">"LX"</span>, <span class="string">"LXX"</span>, <span class="string">"LXXX"</span>, <span class="string">"XC"</span>&#125;;</span><br><span class="line">        String I[] = &#123;<span class="string">""</span>, <span class="string">"I"</span>, <span class="string">"II"</span>, <span class="string">"III"</span>, <span class="string">"IV"</span>, <span class="string">"V"</span>, <span class="string">"VI"</span>, <span class="string">"VII"</span>, <span class="string">"VIII"</span>, <span class="string">"IX"</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> M[num/<span class="number">1000</span>] + C[(num%<span class="number">1000</span>)/<span class="number">100</span>] + X[(num%<span class="number">100</span>)/<span class="number">10</span>] + I[num%<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>String</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode015-3Sum</title>
    <url>/2019/10/04/Leetcode015-3Sum/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>
<p><strong>Note:</strong></p>
<p>The solution set must not contain duplicate triplets.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given array nums &#x3D; [-1, 0, 1, 2, -1, -4],</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-1, 0, 1],</span><br><span class="line">  [-1, -1, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> k = nums.length-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; k)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] + nums[k] == <span class="number">0</span>)&#123;</span><br><span class="line">                    List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    tmp.add(nums[i]);</span><br><span class="line">                    tmp.add(nums[j]);</span><br><span class="line">                    tmp.add(nums[k]);</span><br><span class="line">                    res.add(tmp);</span><br><span class="line">                    j++;</span><br><span class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j-<span class="number">1</span>]) j++;</span><br><span class="line">                    k--;</span><br><span class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k+<span class="number">1</span>]) k--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[j] + nums[k] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    j++;</span><br><span class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j-<span class="number">1</span>]) j++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[j] + nums[k] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    k--;</span><br><span class="line">                    <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k+<span class="number">1</span>]) k--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time Complex: $O(N^2)$</p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode019-removeNthNodeFromEndofList</title>
    <url>/2019/10/13/Leetcode019-removeNthNodeFromEndofList/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a linked list, remove the n-th node from the end of list and return its head.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n &#x3D; 2.</span><br><span class="line"></span><br><span class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<p>Given n will always be valid.</p>
<p><strong>Follow up:</strong></p>
<p>Could you do this in one pass?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) fast = fast.next;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="keyword">null</span>) <span class="keyword">return</span> head.next;</span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Amazon</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode013-romanToInteger</title>
    <url>/2020/03/02/Leetcode013-romanToInteger/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><br>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.</p>
<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</p>
<ul>
<li>I can be placed before V (5) and X (10) to make 4 and 9. </li>
<li>X can be placed before L (50) and C (100) to make 40 and 90. </li>
<li>C can be placed before D (500) and M (1000) to make 400 and 900.</li>
</ul>
<p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;III&quot;</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;IV&quot;</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;IX&quot;</span><br><span class="line">Output: 9</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;LVIII&quot;</span><br><span class="line">Output: 58</span><br><span class="line">Explanation: L &#x3D; 50, V&#x3D; 5, III &#x3D; 3.</span><br></pre></td></tr></table></figure><br><strong>Example 5:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;MCMXCIV&quot;</span><br><span class="line">Output: 1994</span><br><span class="line">Explanation: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90 and IV &#x3D; 4.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"IV"</span>)!=-<span class="number">1</span>)&#123;sum-=<span class="number">2</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"IX"</span>)!=-<span class="number">1</span>)&#123;sum-=<span class="number">2</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"XL"</span>)!=-<span class="number">1</span>)&#123;sum-=<span class="number">20</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"XC"</span>)!=-<span class="number">1</span>)&#123;sum-=<span class="number">20</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"CD"</span>)!=-<span class="number">1</span>)&#123;sum-=<span class="number">200</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">"CM"</span>)!=-<span class="number">1</span>)&#123;sum-=<span class="number">200</span>;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> c[]=s.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(;count&lt;=s.length()-<span class="number">1</span>;count++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'M'</span>) sum+=<span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'D'</span>) sum+=<span class="number">500</span>;</span><br><span class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'C'</span>) sum+=<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'L'</span>) sum+=<span class="number">50</span>;</span><br><span class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'X'</span>) sum+=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'V'</span>) sum+=<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span>(c[count]==<span class="string">'I'</span>) sum+=<span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> sum;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>String</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode018-4Sum</title>
    <url>/2020/02/10/Leetcode018-4Sum/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p>
<p><strong>Note:</strong></p>
<p>The solution set must not contain duplicate quadruplets.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given array nums &#x3D; [1, 0, -1, 0, -2, 2], and target &#x3D; 0.</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-1,  0, 0, 1],</span><br><span class="line">  [-2, -1, 1, 2],</span><br><span class="line">  [-2,  0, 0, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">while</span> (i &lt; nums.length - <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; nums.length - <span class="number">2</span>)&#123;</span><br><span class="line">                List&lt;List&lt;Integer&gt;&gt; tmp = twoSum(nums, j + <span class="number">1</span>, target-nums[i]-nums[j]);</span><br><span class="line">                <span class="keyword">if</span> (tmp.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (List&lt;Integer&gt; t : tmp)&#123;</span><br><span class="line">                        t.add(nums[i]);</span><br><span class="line">                        t.add(nums[j]);</span><br><span class="line">                        res.add(t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                j ++;</span><br><span class="line">                <span class="keyword">while</span> (j &lt; nums.length - <span class="number">2</span> &amp;&amp; nums[j] == nums[j-<span class="number">1</span>]) j++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; nums.length - <span class="number">3</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> target)&#123;</span><br><span class="line">        <span class="keyword">int</span> j = nums.length - <span class="number">1</span>;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[j] == target)&#123;</span><br><span class="line">                List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                tmp.add(nums[i]);</span><br><span class="line">                tmp.add(nums[j]);</span><br><span class="line">                res.add(tmp);</span><br><span class="line">                </span><br><span class="line">                i++;</span><br><span class="line">                j--;</span><br><span class="line">                <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) i++;</span><br><span class="line">                <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[j] == nums[j+<span class="number">1</span>]) j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[j] &lt; target) i++;</span><br><span class="line">            <span class="keyword">else</span> j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode020-validParentheses</title>
    <url>/2019/10/11/Leetcode020-validParentheses/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p>
<p>An input string is valid if:</p>
<ul>
<li>Open brackets must be closed by the same type of brackets.</li>
<li>Open brackets must be closed in the correct order.</li>
<li>Note that an empty string is also considered valid.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;(]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;([)]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><br><strong>Example 5:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#123;[]&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Stack&lt;Character&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span> || ch == <span class="string">&#x27;[&#x27;</span> || ch == <span class="string">&#x27;&#123;&#x27;</span>) st.push(ch);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">switch</span> (ch)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (st.isEmpty() || st.pop() != <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (st.isEmpty() || st.pop() != <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (st.isEmpty() || st.pop() != <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!st.isEmpty()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>String</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode022-generateParenthneses</title>
    <url>/2019/10/21/Leetcode022-generateParenthneses/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p>
<p>For example, given n = 3, a solution set is:</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        helper(n, res, <span class="number">0</span>, <span class="number">0</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> n, List&lt;String&gt; res, <span class="keyword">int</span> left, <span class="keyword">int</span> right, String cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == n &amp;&amp; right == n) &#123;</span><br><span class="line">            res.add(cur);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxLeft = n - left;</span><br><span class="line">        <span class="keyword">if</span> (maxLeft &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            cur += <span class="string">"("</span>;</span><br><span class="line">            helper(n, res, left + <span class="number">1</span>, right, cur);</span><br><span class="line">            <span class="keyword">if</span> (cur.length() &gt; <span class="number">1</span>) cur = cur.substring(<span class="number">0</span>, cur.length() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> cur = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> maxRight = left - right;</span><br><span class="line">        <span class="keyword">if</span> (maxRight &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            cur += <span class="string">")"</span>;</span><br><span class="line">            helper(n, res, left, right + <span class="number">1</span>, cur);</span><br><span class="line">            <span class="keyword">if</span> (cur.length() &gt; <span class="number">1</span>) cur = cur.substring(<span class="number">0</span>, cur.length() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> cur = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
        <tag>String</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode023-mergeKSortedLists</title>
    <url>/2019/10/07/Leetcode023-mergeKSortedLists/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Devide and Conquer, O(NlogK)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Devide and Conquer, O(NlogK)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> partion(lists,<span class="number">0</span>,lists.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">partion</span><span class="params">(ListNode[] lists,<span class="keyword">int</span> s,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s==e)  <span class="keyword">return</span> lists[s];</span><br><span class="line">        <span class="keyword">if</span>(s&lt;e)&#123;</span><br><span class="line">            <span class="keyword">int</span> q=(s+e)/<span class="number">2</span>;</span><br><span class="line">            ListNode l1=partion(lists,s,q);</span><br><span class="line">            ListNode l2=partion(lists,q+<span class="number">1</span>,e);</span><br><span class="line">            <span class="keyword">return</span> merge(l1,l2);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//This function is from Merge Two Sorted Lists.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">merge</span><span class="params">(ListNode l1,ListNode l2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span>(l2==<span class="keyword">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line">        <span class="keyword">if</span>(l1.val&lt;l2.val)&#123;</span><br><span class="line">            l1.next=merge(l1.next,l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l2.next=merge(l1,l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Heap, O(NlogN)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lists == <span class="keyword">null</span> || lists.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// PriorityQueue&lt;ListNode&gt; pq = new PriorityQueue&lt;&gt;((a,b) -&gt; a.val - b.val); //36ms</span></span><br><span class="line">        PriorityQueue&lt;ListNode&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;ListNode&gt;(<span class="keyword">new</span> Comparator&lt;ListNode&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ListNode a, ListNode b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a.val-b.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;); <span class="comment">//5ms</span></span><br><span class="line">        <span class="keyword">for</span> (ListNode it: lists)</span><br><span class="line">            <span class="keyword">if</span> (it != <span class="keyword">null</span>) pq.offer(it);</span><br><span class="line">            </span><br><span class="line">        ListNode res = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode cur = res;</span><br><span class="line">        <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">            cur.next = pq.poll();</span><br><span class="line">            cur = cur.next;</span><br><span class="line">            <span class="keyword">if</span> (cur.next != <span class="keyword">null</span>) pq.offer(cur.next);</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> res.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>Heap</tag>
        <tag>Divide and Conquer</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode021-mergeTwoSortedLists</title>
    <url>/2019/09/23/Leetcode021-mergeTwoSortedLists/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// More Clean code</span></span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line">        <span class="keyword">if</span> (l1.val &lt; l2.val)&#123;</span><br><span class="line">            l1.next = mergeTwoLists(l1.next, l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            l2.next = mergeTwoLists(l1, l2.next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode024-swapNodesInPairs</title>
    <url>/2020/03/16/Leetcode024-swapNodesInPairs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a linked list, swap every two adjacent nodes and return its head.</p>
<p>You may not modify the values in the list’s nodes, only nodes itself may be changed.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode cur = dummy;</span><br><span class="line">        <span class="keyword">while</span>(cur.next != <span class="keyword">null</span> &amp;&amp; cur.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            ListNode first = cur.next;</span><br><span class="line">            ListNode second = cur.next.next;</span><br><span class="line">            first.next = second.next;</span><br><span class="line">            cur.next = second;</span><br><span class="line">            second.next = first;</span><br><span class="line">            cur = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode029-divideTwoIntegers</title>
    <url>/2020/03/02/Leetcode029-divideTwoIntegers/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.</p>
<p>Return the quotient after dividing dividend by divisor.</p>
<p>The integer division should truncate toward zero.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: dividend &#x3D; 10, divisor &#x3D; 3</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: dividend &#x3D; 7, divisor &#x3D; -3</span><br><span class="line">Output: -2</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ul>
<li>Both dividend and divisor will be 32-bit signed integers.</li>
<li>The divisor will never be 0.</li>
<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 231 − 1 when the division result overflows.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> A, <span class="keyword">int</span> B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (A == <span class="number">1</span> &lt;&lt; <span class="number">31</span> &amp;&amp; B == -<span class="number">1</span>) <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> a = Math.abs(A), b = Math.abs(B), res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">31</span>; x &gt;= <span class="number">0</span>; x--)</span><br><span class="line">            <span class="keyword">if</span> ((a &gt;&gt;&gt; x) - b &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                res += <span class="number">1</span> &lt;&lt; x;</span><br><span class="line">                a -= b &lt;&lt; x;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> (A &gt; <span class="number">0</span>) == (B &gt; <span class="number">0</span>) ? res : -res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Binary Search</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode030-substringwithConcatenationofAllWords</title>
    <url>/2019/10/22/Leetcode030-substringwithConcatenationofAllWords/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">  s &#x3D; &quot;barfoothefoobarman&quot;,</span><br><span class="line">  words &#x3D; [&quot;foo&quot;,&quot;bar&quot;]</span><br><span class="line">Output: [0,9]</span><br><span class="line">Explanation: Substrings starting at index 0 and 9 are &quot;barfoo&quot; and &quot;foobar&quot; respectively.</span><br><span class="line">The output order does not matter, returning [9,0] is fine too.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">  s &#x3D; &quot;wordgoodgoodgoodbestword&quot;,</span><br><span class="line">  words &#x3D; [&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Two HashMaps to judge<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Sliding Window    360ms</span></span><br><span class="line">    <span class="comment">// ask interviewer if words is empty, should I return empty list</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findSubstring</span><span class="params">(String S, String[] L)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (L.length == <span class="number">0</span> || S.length() &lt; L.length * L[<span class="number">0</span>].length())   <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> N = S.length(), M = L.length, K = L[<span class="number">0</span>].length();</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(), curMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : L) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(s))   map.put(s, map.get(s) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span>                      map.put(s, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String str = <span class="keyword">null</span>, tmp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;  <span class="comment">// remark: reset count </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = i, r = i; r + K &lt;= N; r += K) &#123;</span><br><span class="line">                str = S.substring(r, r + K);</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(str)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (curMap.containsKey(str))   curMap.put(str, curMap.get(str) + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span>                           curMap.put(str, <span class="number">1</span>);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (curMap.get(str) &lt;= map.get(str))    count++;</span><br><span class="line">                    <span class="keyword">while</span> (curMap.get(str) &gt; map.get(str)) &#123;</span><br><span class="line">                        tmp = S.substring(l, l + K);</span><br><span class="line">                        curMap.put(tmp, curMap.get(tmp) - <span class="number">1</span>);</span><br><span class="line">                        l += K;</span><br><span class="line">                        <span class="keyword">if</span> (curMap.get(tmp) &lt; map.get(tmp)) count--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (count == M) &#123;</span><br><span class="line">                        res.add(l);</span><br><span class="line">                        tmp = S.substring(l, l + K);</span><br><span class="line">                        curMap.put(tmp, curMap.get(tmp) - <span class="number">1</span>);</span><br><span class="line">                        l += K;</span><br><span class="line">                        count--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    curMap.clear();</span><br><span class="line">                    count = <span class="number">0</span>;</span><br><span class="line">                    l = r + K;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            curMap.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>One HashMap and over time limit<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class Solution &#123;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//     public List&lt;Integer&gt; findSubstring(String s, String[] words) &#123;</span></span><br><span class="line"><span class="comment">//         HashSet&lt;Integer&gt; res = new HashSet&lt;&gt;();</span></span><br><span class="line"><span class="comment">//         if (words.length == 0) return new ArrayList&lt;Integer&gt;(0);</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         HashMap&lt;String, Integer&gt; dic = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//         for (String word: words) dic.put(word, dic.getOrDefault(word, 0) + 1);</span></span><br><span class="line"><span class="comment">//         int len = words[0].length();</span></span><br><span class="line"><span class="comment">//         if (s.length() &lt; words.length * len) return new ArrayList&lt;Integer&gt;(0);</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         int id = 0;</span></span><br><span class="line"><span class="comment">//         int index = 0;</span></span><br><span class="line"><span class="comment">//         int start = 0;</span></span><br><span class="line"><span class="comment">//         int count = 0;</span></span><br><span class="line"><span class="comment">//         while(id &lt; s.length() - words.length * len + 1)&#123;</span></span><br><span class="line"><span class="comment">//             if ((index+1-id)%len == 0)&#123;</span></span><br><span class="line"><span class="comment">//                 if (index - start + 1 &gt; words.length * len)&#123;</span></span><br><span class="line"><span class="comment">//                     String first = s.substring(start, start + len);</span></span><br><span class="line"><span class="comment">//                     dic.put(first, dic.get(first) + 1);</span></span><br><span class="line"><span class="comment">//                     count--;</span></span><br><span class="line"><span class="comment">//                     start = start + len;</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line">                </span><br><span class="line"><span class="comment">//                 String cur = s.substring(index - len + 1, index + 1);</span></span><br><span class="line"><span class="comment">//                 if (!dic.containsKey(cur))&#123;</span></span><br><span class="line"><span class="comment">//                     for (int i = 0; i &lt; count; i++)&#123;</span></span><br><span class="line"><span class="comment">//                         String pre = s.substring(start, start + len);</span></span><br><span class="line"><span class="comment">//                         dic.put(pre, dic.get(pre) + 1);</span></span><br><span class="line"><span class="comment">//                         start += len;</span></span><br><span class="line"><span class="comment">//                     &#125;</span></span><br><span class="line"><span class="comment">//                     count = 0;</span></span><br><span class="line"><span class="comment">//                     id ++;</span></span><br><span class="line"><span class="comment">//                     start = id;</span></span><br><span class="line"><span class="comment">//                     index = id;</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//                 else if (dic.containsKey(cur) &amp;&amp; dic.get(cur) &gt; 0)&#123;</span></span><br><span class="line"><span class="comment">//                     count++;</span></span><br><span class="line"><span class="comment">//                     dic.put(cur, dic.get(cur)-1);</span></span><br><span class="line"><span class="comment">//                     if (count == words.length) res.add(start);</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//                 else&#123;</span></span><br><span class="line"><span class="comment">//                     int countCopy = count;</span></span><br><span class="line"><span class="comment">//                     for (int i = 0; i &lt; count; i++)&#123;</span></span><br><span class="line"><span class="comment">//                         String pre = s.substring(start, start + len);</span></span><br><span class="line"><span class="comment">//                         dic.put(pre, dic.get(pre) + 1);</span></span><br><span class="line"><span class="comment">//                         start += len;</span></span><br><span class="line"><span class="comment">//                         countCopy--;</span></span><br><span class="line"><span class="comment">//                         if (dic.get(cur) &gt; 0) break;</span></span><br><span class="line"><span class="comment">//                     &#125;</span></span><br><span class="line"><span class="comment">//                     count = countCopy;</span></span><br><span class="line"><span class="comment">//                     if (dic.get(cur) &gt; 0) continue;</span></span><br><span class="line"><span class="comment">//                     start += len;</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             index++;</span></span><br><span class="line"><span class="comment">//             if (index &gt;= s.length())&#123;</span></span><br><span class="line"><span class="comment">//                 for (int i = 0; i &lt; count; i++)&#123;</span></span><br><span class="line"><span class="comment">//                     String pre = s.substring(start, start + len);</span></span><br><span class="line"><span class="comment">//                     dic.put(pre, dic.get(pre) + 1);</span></span><br><span class="line"><span class="comment">//                     start += len;</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//                 count = 0;</span></span><br><span class="line"><span class="comment">//                 id ++;</span></span><br><span class="line"><span class="comment">//                 start = id;</span></span><br><span class="line"><span class="comment">//                 index = id;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return new ArrayList&lt;Integer&gt;(res);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Microsoft</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode033-searchInRotatedSortedArray</title>
    <url>/2019/10/12/Leetcode033-searchInRotatedSortedArray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).</p>
<p>You are given a target value to search. If found in the array return its index, otherwise return -1.</p>
<p>You may assume no duplicate exists in the array.</p>
<p>Your algorithm’s runtime complexity must be in the order of O(log n).</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 3</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= nums[right])&#123;</span><br><span class="line">                <span class="keyword">if</span> (target &gt; nums[mid] &amp;&amp; target &lt;= nums[right]) left = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> right = mid -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (target &gt;= nums[left] &amp;&amp; target &lt; nums[mid]) right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
        <tag>Divide and Conquer</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode026-removeDuplicatesFromSortedArray</title>
    <url>/2020/03/02/Leetcode026-removeDuplicatesFromSortedArray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [1,1,2],</span><br><span class="line"></span><br><span class="line">Your function should return length &#x3D; 2, with the first two elements of nums being 1 and 2 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&#39;t matter what you leave beyond the returned length.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">Your function should return length &#x3D; 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&#39;t matter what values are set beyond the returned length.</span><br></pre></td></tr></table></figure></p>
<p><strong>Clarification:</strong></p>
<p>Confused why the returned value is an integer but your answer is an array?</p>
<p>Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.</p>
<p>Internally you can think of this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; nums is passed in by reference. (i.e., without making a copy)</span><br><span class="line">int len &#x3D; removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; any modification to nums in your function would be known by the caller.</span><br><span class="line">&#x2F;&#x2F; using the length returned by your function, it prints the first len elements.</span><br><span class="line">for (int i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i-<span class="number">1</span>]) nums[x++] = nums[i];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode034-findFirstAndLastPositionOfElementInSortedArray</title>
    <url>/2020/03/16/Leetcode034-findFirstAndLastPositionOfElementInSortedArray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.</p>
<p>Your algorithm’s runtime complexity must be in the order of O(log n).</p>
<p>If the target is not found in the array, return [-1, -1].</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6</span><br><span class="line">Output: [-1,-1]</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> smallest = findSmall(nums, target);</span><br><span class="line">        <span class="keyword">int</span> highest = findHigh(nums, target);</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;smallest, highest&#125;;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findSmall</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) res = mid;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= target)</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findHigh</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) res = mid;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target)</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bloomberg</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode039-combiantionSum</title>
    <url>/2019/09/17/Leetcode039-combiantionSum/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.</p>
<p>The same repeated number may be chosen from candidates unlimited number of times.</p>
<p><strong>Note:</strong></p>
<ul>
<li>All numbers (including target) will be positive integers.</li>
<li>The solution set must not contain duplicate combinations.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example</strong> 1:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: candidates &#x3D; [2,3,6,7], target &#x3D; 7,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [7],</span><br><span class="line">  [2,2,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><strong>Example</strong> 2:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: candidates &#x3D; [2,3,5], target &#x3D; 8,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [2,2,2,2],</span><br><span class="line">  [2,3,3],</span><br><span class="line">  [3,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; tmp, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, <span class="keyword">int</span> start, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum == target)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class="line">            tmp.add(nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (sum + nums[i] &lt;= target) backtracking(res, tmp, nums, target, i, sum + nums[i]);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                tmp.remove(tmp.size()-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.remove(tmp.size()-<span class="number">1</span>);            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (candidates == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtracking(res, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), candidates, target, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode031-nextPermutation</title>
    <url>/2020/03/02/Leetcode031-nextPermutation/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>
<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>
<p>The replacement must be in-place and use only constant extra memory.</p>
<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1,2,3 → 1,3,2</span><br><span class="line">3,2,1 → 1,2,3</span><br><span class="line">1,1,5 → 1,5,1</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Step 1: From the end, find the first element breaks the decsending sequence, which is the element need to be changed to a bigger because the decsending elements after it are already finished</p>
<p>Step 2: From the end, find the first element that bigger than the element found at step 1, which is the new elelment at the position of the step 1 emelemt. Swap them, which doesn’t change the decsending order of that sequence.</p>
<p>Step 3: Reverse the decsending sequence.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> idx = nums.length - <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(idx &gt;= <span class="number">0</span> &amp;&amp; nums[idx] &gt;= nums[idx + <span class="number">1</span>]) idx--; <span class="comment">// Find 1st id i that breaks descending order</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (idx &gt;= <span class="number">0</span>)&#123;                                       <span class="comment">// If not entirely descending</span></span><br><span class="line">            <span class="keyword">int</span> j = nums.length - <span class="number">1</span>;                         <span class="comment">// Start from the end</span></span><br><span class="line">            <span class="keyword">while</span>(j &gt; idx &amp;&amp; nums[j] &lt;= nums[idx]) j--;      <span class="comment">// Find rightmost first larger id j</span></span><br><span class="line">            swap(nums, idx, j);                              <span class="comment">// Switch i and j</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        reverse(nums, idx + <span class="number">1</span>, nums.length - <span class="number">1</span>);             <span class="comment">// Reverse the descending sequence</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[x];</span><br><span class="line">        nums[x] = nums[y];</span><br><span class="line">        nums[y] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(x &lt; y) swap(nums, x++, y--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bloomberg</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode035-searchInsertPosition</title>
    <url>/2019/11/04/Leetcode035-searchInsertPosition/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<p>You may assume no duplicates in the array.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 5</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 7</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,6], 0</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// O(logn) Method, Binary Search   </span></span><br><span class="line">        <span class="keyword">if</span> (target &gt; nums[nums.length - <span class="number">1</span>]) <span class="keyword">return</span> nums.length;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> right = mid;        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// O(n) Method</span></span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; nums.length; i++)&#123;</span></span><br><span class="line">        <span class="comment">//     if (target &lt;= nums[i]) return i;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return nums.length;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode036-validSudoku</title>
    <url>/2019/10/21/Leetcode036-validSudoku/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:</p>
<ol>
<li>Each row must contain the digits 1-9 without repetition.</li>
<li>Each column must contain the digits 1-9 without repetition.</li>
<li>Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.</li>
</ol>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt=""><br>A partially filled sudoku which is valid.</p>
<p>The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],</span><br><span class="line">  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]</span><br><span class="line">]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],</span><br><span class="line">  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],</span><br><span class="line">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]</span><br><span class="line">]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Same as Example 1, except with the 5 in the top left corner being </span><br><span class="line">    modified to 8. Since there are two 8&#39;s in the top left 3x3 sub-box, it is invalid.</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ul>
<li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li>
<li>Only the filled cells need to be validated according to the mentioned rules.</li>
<li>The given board contain only digits 1-9 and the character ‘.’.</li>
<li>The given board size is always 9x9.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;String&gt; seen = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">9</span>; ++j) &#123;</span><br><span class="line">                <span class="keyword">char</span> number = board[i][j];</span><br><span class="line">                <span class="keyword">if</span> (number != <span class="string">'.'</span>)</span><br><span class="line">                    <span class="keyword">if</span> (!seen.add(number + <span class="string">" in row "</span> + i) ||</span><br><span class="line">                        !seen.add(number + <span class="string">" in column "</span> + j) ||</span><br><span class="line">                        !seen.add(number + <span class="string">" in block "</span> + i/<span class="number">3</span> + <span class="string">"-"</span> + j/<span class="number">3</span>))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//     3 hashsets stupid method!!! </span></span><br><span class="line"><span class="comment">//     public boolean isValidSudoku(char[][] board) &#123;</span></span><br><span class="line"><span class="comment">//         List&lt;HashSet&lt;Integer&gt;&gt; rows = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//         List&lt;HashSet&lt;Integer&gt;&gt; cols = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//         List&lt;HashSet&lt;Integer&gt;&gt; boxes = new ArrayList&lt;&gt;();</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         for (int i = 0; i &lt; 9; i++)&#123;</span></span><br><span class="line"><span class="comment">//             rows.add(new HashSet&lt;Integer&gt;());</span></span><br><span class="line"><span class="comment">//             cols.add(new HashSet&lt;Integer&gt;());</span></span><br><span class="line"><span class="comment">//             boxes.add(new HashSet&lt;Integer&gt;());</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         for (int i = 0; i &lt; 9; i++)&#123;</span></span><br><span class="line"><span class="comment">//             for (int j = 0; j &lt; 9; j++)&#123;</span></span><br><span class="line"><span class="comment">//                 if (Character.isDigit(board[i][j]))&#123;</span></span><br><span class="line"><span class="comment">//                     int tmp = board[i][j] - '0';</span></span><br><span class="line"><span class="comment">//                     if (rows.get(i).contains(tmp)) return false;</span></span><br><span class="line"><span class="comment">//                     rows.get(i).add(tmp);</span></span><br><span class="line"><span class="comment">//                     if (cols.get(j).contains(tmp)) return false;</span></span><br><span class="line"><span class="comment">//                     cols.get(j).add(tmp);</span></span><br><span class="line"><span class="comment">//                     int b = 0;</span></span><br><span class="line"><span class="comment">//                     if (i &lt;= 2 &amp;&amp; j &lt;= 2) b = 0;</span></span><br><span class="line"><span class="comment">//                     else if (i &lt;= 2 &amp;&amp; j &lt;= 5) b = 1;</span></span><br><span class="line"><span class="comment">//                     else if (i &lt;= 2 &amp;&amp; j &lt;= 8) b = 2;</span></span><br><span class="line"><span class="comment">//                     else if (i &lt;= 5 &amp;&amp; j &lt;= 2) b = 3;</span></span><br><span class="line"><span class="comment">//                     else if (i &lt;= 5 &amp;&amp; j &lt;= 5) b = 4;</span></span><br><span class="line"><span class="comment">//                     else if (i &lt;= 5 &amp;&amp; j &lt;= 8) b = 5;</span></span><br><span class="line"><span class="comment">//                     else if (i &lt;= 8 &amp;&amp; j &lt;= 2) b = 6;</span></span><br><span class="line"><span class="comment">//                     else if (i &lt;= 8 &amp;&amp; j &lt;= 5) b = 7;</span></span><br><span class="line"><span class="comment">//                     else if (i &lt;= 8 &amp;&amp; j &lt;= 8) b = 8;</span></span><br><span class="line"><span class="comment">//                     if (boxes.get(b).contains(tmp)) return false;</span></span><br><span class="line"><span class="comment">//                     boxes.get(b).add(tmp);</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return true;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Microsoft</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode040-combinationSumII</title>
    <url>/2019/09/17/Leetcode040-combinationSumII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.</p>
<p>Each number in candidates may only be used once in the combination.</p>
<p><strong>Note:</strong></p>
<ul>
<li>All numbers (including target) will be positive integers.</li>
<li>The solution set must not contain duplicate combinations.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example</strong> 1:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: candidates &#x3D; [10,1,2,7,6,1,5], target &#x3D; 8,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [1, 7],</span><br><span class="line">  [1, 2, 5],</span><br><span class="line">  [2, 6],</span><br><span class="line">  [1, 1, 6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><strong>Example</strong> 2:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: candidates &#x3D; [2,5,2,1,2], target &#x3D; 5,</span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; tmp, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, <span class="keyword">int</span> start, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum == target)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tmp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            tmp.add(nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (sum + nums[i] &lt;= target) backtracking(res, tmp, nums, target, i + <span class="number">1</span>, sum + nums[i]);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp.remove(tmp.size()-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (candidates == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtracking(res, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), candidates, target, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode041-firstMissingPositive</title>
    <url>/2019/10/14/Leetcode041-firstMissingPositive/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an unsorted integer array, find the smallest missing positive integer.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,0]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,4,-1,1]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,8,9,11,12]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<p>Your algorithm should run in O(n) time and uses constant extra space.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// If the current value is in the range of (0,length) and it's not at its correct position, </span></span><br><span class="line">        <span class="comment">// swap it to its correct position.</span></span><br><span class="line">        <span class="comment">// Else just continue;</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == i + <span class="number">1</span> || nums[i] &lt;= <span class="number">0</span> || nums[i] &gt; nums.length || nums[i] == nums[nums[i] - <span class="number">1</span>]) i++;</span><br><span class="line">            <span class="keyword">else</span> swap(nums, i, nums[i] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nums.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = nums[x];</span><br><span class="line">        nums[x] = nums[y];</span><br><span class="line">        nums[y] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode046-permutations</title>
    <url>/2020/03/02/Leetcode046-permutations/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a collection of distinct integers, return all possible permutations.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">        helper(nums, res, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), visited);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; cur, <span class="keyword">boolean</span>[] visited)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.size() == nums.length)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(cur));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i])&#123;</span><br><span class="line">                visited[i] = <span class="keyword">true</span>;</span><br><span class="line">                cur.add(nums[i]);</span><br><span class="line">                helper(nums, res, cur, visited);</span><br><span class="line">                cur.remove(cur.size() - <span class="number">1</span>);</span><br><span class="line">                visited[i] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Backtracking</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode045-jumpGameII</title>
    <url>/2019/10/06/Leetcode045-jumpGameII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Your goal is to reach the last index in the minimum number of jumps.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,3,1,1,4]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The minimum number of jumps to reach the last index is 2.</span><br><span class="line">    Jump 1 step from index 0 to 1, then 3 steps to the last index.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<p>You can assume that you can always reach the last index.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            cur = Math.max(cur, i+nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (i == last)&#123;</span><br><span class="line">                last = cur;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Amazon</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode042-trappingRainWater</title>
    <url>/2019/10/08/Leetcode042-trappingRainWater/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png" alt=""><br>The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trap</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (height == <span class="keyword">null</span> || height.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = height.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> leftmax = <span class="number">0</span>, rightmax = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j)&#123;</span><br><span class="line">            leftmax = Math.max(leftmax, height[i]);</span><br><span class="line">            rightmax = Math.max(rightmax, height[j]);</span><br><span class="line">            <span class="keyword">if</span> (leftmax &lt; rightmax)&#123;<span class="comment">// leftmax is smaller than rightmax, so the (leftmax-A[a]) water can be stored</span></span><br><span class="line">                res += leftmax - height[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                res += rightmax - height[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode047-permutationsII</title>
    <url>/2020/03/16/Leetcode047-permutationsII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,1,2]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,1,2],</span><br><span class="line">  [1,2,1],</span><br><span class="line">  [2,1,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">        helper(nums, res, <span class="keyword">new</span> ArrayList&lt;&gt;(), visited);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; cur, <span class="keyword">boolean</span>[] visited)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.size() == nums.length)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(cur));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; !visited[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            cur.add(nums[i]);</span><br><span class="line">            visited[i] = <span class="keyword">true</span>;</span><br><span class="line">            helper(nums, res, cur, visited);</span><br><span class="line">            visited[i] = <span class="keyword">false</span>;</span><br><span class="line">            cur.remove(cur.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode053-maximumSubarray</title>
    <url>/2019/10/06/Leetcode053-maximumSubarray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum &#x3D; 6.</span><br></pre></td></tr></table></figure>
<p><strong>Follow up:</strong></p>
<p>If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>DP Solution<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> max = dp[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>]+nums[i], nums[i]);</span><br><span class="line">            max = Math.max(dp[i], max);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Divide and Conquer Solution<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;<span class="comment">//divdie and conquer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Subarray(nums, <span class="number">0</span> ,nums.length -<span class="number">1</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Subarray</span><span class="params">(<span class="keyword">int</span>[] A,<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == right) <span class="keyword">return</span> A[left];</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> leftSum = Subarray(A,left,mid);<span class="comment">// left part </span></span><br><span class="line">        <span class="keyword">int</span> rightSum = Subarray(A,mid+<span class="number">1</span>,right);<span class="comment">//right part</span></span><br><span class="line">        <span class="keyword">int</span> crossSum = crossSubarray(A,left,right);<span class="comment">// cross part</span></span><br><span class="line">        <span class="keyword">if</span>(leftSum &gt;= rightSum &amp;&amp; leftSum &gt;= crossSum)&#123;<span class="comment">// left part is max</span></span><br><span class="line">            <span class="keyword">return</span> leftSum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rightSum &gt;= leftSum &amp;&amp; rightSum &gt;= crossSum)&#123;<span class="comment">// right part is max</span></span><br><span class="line">            <span class="keyword">return</span> rightSum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> crossSum; <span class="comment">// cross part is max</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">crossSubarray</span><span class="params">(<span class="keyword">int</span>[] A,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> leftSum = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> rightSum = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = mid; i &gt;= left ; i--)&#123;</span><br><span class="line">            sum = sum + A[i];</span><br><span class="line">            <span class="keyword">if</span>(leftSum &lt; sum)&#123;</span><br><span class="line">                leftSum = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = mid + <span class="number">1</span>; j &lt;= right; j++)&#123;</span><br><span class="line">            sum = sum + A[j];</span><br><span class="line">            <span class="keyword">if</span>(rightSum &lt; sum)&#123;</span><br><span class="line">                rightSum = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftSum + rightSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
        <tag>Divide and Conquer</tag>
        <tag>DP</tag>
        <tag>TikTok</tag>
        <tag>Linkedin</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode050-pow(x,n)</title>
    <url>/2019/09/12/Leetcode050-pow-x-n/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement <em>pow(x, n)</em>, which calculates <em>x</em> raised to the power <em>n</em> $(x^n)$.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2.00000, 10</span><br><span class="line">Output: 1024.00000</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2.10000, 3</span><br><span class="line">Output: 9.26100</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2.00000, -2</span><br><span class="line">Output: 0.25000</span><br><span class="line">Explanation: 2-2 &#x3D; 1&#x2F;22 &#x3D; 1&#x2F;4 &#x3D; 0.25</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ul>
<li>-100.0 &lt; x &lt; 100.0</li>
<li>n is a 32-bit signed integer, within the range [$−2^{31}$, $2^{31} − 1$]</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (n == Integer.MIN_VALUE)&#123;</span><br><span class="line">            x *= x;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="comment">//beacuse Integer.MAX_VALUE = abs(Integer.MIN_VALUE)-1</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            n = -n;</span><br><span class="line">            x = <span class="number">1</span>/x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (n % <span class="number">2</span> == <span class="number">0</span>) ? myPow(x * x, n / <span class="number">2</span>) : x * myPow(x * x, n / <span class="number">2</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Math</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode049-GroupAnagrams</title>
    <url>/2019/10/06/Leetcode049-GroupAnagrams/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of strings, group anagrams together.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">  [&quot;bat&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>Note:</p>
<ul>
<li>All inputs will be in lowercase.</li>
<li>The order of your output does not matter.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>O(N<em>KlogK)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();        </span><br><span class="line">        <span class="keyword">for</span> (String st: strs)&#123;</span><br><span class="line">            <span class="keyword">char</span>[] chs = st.toCharArray();           </span><br><span class="line">           </span><br><span class="line">            String key = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            Arrays.sort(chs);</span><br><span class="line">            key = String.valueOf(chs);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(key))&#123;</span><br><span class="line">                List&lt;String&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;(map.get(key));</span><br><span class="line">                tmp.add(st);</span><br><span class="line">                map.put(key, tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                List&lt;String&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                tmp.add(st);</span><br><span class="line">                map.put(key, tmp);</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;(map.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>O(N</em>K)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            String encoded = encode(str);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(encoded))</span><br><span class="line">                map.get(encoded).add(str);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                List&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                list.add(str);</span><br><span class="line">                map.put(encoded, list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;(map.values());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">encode</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] freq = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        String spliter = <span class="string">&quot;-&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</span><br><span class="line">            freq[str.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        </span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; freq.length; i++)</span><br><span class="line">            sb.append(freq[i]).append(spliter);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>String</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode054-spiralMatrix</title>
    <url>/2019/10/21/Leetcode054-spiralMatrix/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line"> [ 1, 2, 3 ],</span><br><span class="line"> [ 4, 5, 6 ],</span><br><span class="line"> [ 7, 8, 9 ]</span><br><span class="line">]</span><br><span class="line">Output: [1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [1, 2, 3, 4],</span><br><span class="line">  [5, 6, 7, 8],</span><br><span class="line">  [9,10,11,12]</span><br><span class="line">]</span><br><span class="line">Output: [1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;       </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> direction = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] dir = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">        <span class="keyword">while</span> (res.size() &lt; n * m)&#123;</span><br><span class="line">            res.add(matrix[i][j]);</span><br><span class="line">            <span class="keyword">if</span> (res.size() == n * m) <span class="keyword">break</span>;</span><br><span class="line">            visited[i][j] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">int</span> ni = i + dir[direction][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> nj = j + dir[direction][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span>( ni &gt;= m || nj &gt;= n || ni &lt; <span class="number">0</span> || nj &lt; <span class="number">0</span> || visited[ni][nj])&#123;</span><br><span class="line">                direction ++;</span><br><span class="line">                <span class="keyword">if</span> (direction &gt; <span class="number">3</span>) direction = <span class="number">0</span>;</span><br><span class="line">                ni = i + dir[direction][<span class="number">0</span>];</span><br><span class="line">                nj = j + dir[direction][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            i = ni;</span><br><span class="line">            j = nj;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Microsoft</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode059-spiralMatrixII</title>
    <url>/2019/09/23/Leetcode059-spiralMatrixII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a positive integer n, generate a square matrix filled with elements from 1 to $n^2$ in spiral order.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line"> [ 1, 2, 3 ],</span><br><span class="line"> [ 8, 9, 4 ],</span><br><span class="line"> [ 7, 6, 5 ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span>[][] res = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                res[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> dir = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n*n; i++)&#123;</span><br><span class="line">            res[x][y] = i;</span><br><span class="line">            <span class="keyword">if</span> (dir == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (y == n-<span class="number">1</span> || res[x][y+<span class="number">1</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    x += <span class="number">1</span>;</span><br><span class="line">                    dir = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>  y += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (x == n-<span class="number">1</span> || res[x+<span class="number">1</span>][y] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    y -= <span class="number">1</span>;</span><br><span class="line">                    dir = <span class="number">3</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> x += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">3</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (y == <span class="number">0</span> || res[x][y-<span class="number">1</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    x -= <span class="number">1</span>;</span><br><span class="line">                    dir = <span class="number">4</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> y -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (dir == <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (x == <span class="number">0</span> || res[x-<span class="number">1</span>][y] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    y += <span class="number">1</span>;</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> x -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode056-mergeIntervals</title>
    <url>/2019/10/13/Leetcode056-mergeIntervals/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a collection of intervals, merge all overlapping intervals.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">Output: [[1,6],[8,10],[15,18]]</span><br><span class="line">Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,4],[4,5]]</span><br><span class="line">Output: [[1,5]]</span><br><span class="line">Explanation: Intervals [1,4] and [4,5] are considered overlapping.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (intervals == <span class="keyword">null</span> || intervals.length == <span class="number">0</span>) <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][]);</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(intervals, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> start = intervals[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> end = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] interval: intervals)&#123;</span><br><span class="line">            <span class="keyword">if</span> (interval[<span class="number">0</span>] &lt;= end)&#123;</span><br><span class="line">                end = Math.max(end, interval[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;start, end&#125;);</span><br><span class="line">                start = interval[<span class="number">0</span>];</span><br><span class="line">                end = interval[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;start, end&#125;);</span><br><span class="line">        <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[res.size()][]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode060-permutationSequence</title>
    <url>/2020/02/08/Leetcode060-permutationSequence/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The set [1,2,3,…,n] contains a total of n! unique permutations.</p>
<p>By listing and labeling all of the permutations in order, we get the following sequence for n = 3:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. &quot;123&quot;</span><br><span class="line">2. &quot;132&quot;</span><br><span class="line">3. &quot;213&quot;</span><br><span class="line">4. &quot;231&quot;</span><br><span class="line">5. &quot;312&quot;</span><br><span class="line">6. &quot;321&quot;</span><br></pre></td></tr></table></figure><br>Given n and k, return the kth permutation sequence.</p>
<p><strong>Note:</strong></p>
<ul>
<li>Given n will be between 1 and 9 inclusive.</li>
<li>Given k will be between 1 and n! inclusive.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 3, k &#x3D; 3</span><br><span class="line">Output: &quot;213&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 4, k &#x3D; 9</span><br><span class="line">Output: &quot;2314&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Math Solution<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPermutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        List&lt;Integer&gt; num = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> factorial = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            factorial *= i;</span><br><span class="line">            num.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        k--; <span class="comment">//The key point, because num starts from 0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            factorial /= (n-i);</span><br><span class="line">            <span class="keyword">int</span> index = k / factorial;</span><br><span class="line">            sb.append(num.get(index));</span><br><span class="line">            num.remove(index);</span><br><span class="line">            k -= index * factorial;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Backtracking, but will be TLE.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPermutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        helper(res, <span class="string">""</span>, n, k, set);</span><br><span class="line">        <span class="keyword">return</span> res.get(k-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(List&lt;String&gt; res, String cur, <span class="keyword">int</span> n, <span class="keyword">int</span> k, HashSet&lt;Integer&gt; set)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.length() == n)&#123;</span><br><span class="line">            res.add(cur);</span><br><span class="line">            <span class="keyword">if</span> (res.size() == k)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(i)) <span class="keyword">continue</span>;</span><br><span class="line">            set.add(i);</span><br><span class="line">            <span class="keyword">if</span> (helper(res, cur + String.valueOf(i), n, k, set)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            set.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode063-uniquePathsII</title>
    <url>/2020/02/07/Leetcode063-uniquePathsII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A robot is located at the top-left corner of a m x n grid (marked ‘Start’ in the diagram below).</p>
<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).</p>
<p>Now consider if some obstacles are added to the grids. How many unique paths would there be?</p>
<p><img src="/images/lc063_robot_maze.png" alt=""></p>
<p>An obstacle and empty space is marked as 1 and 0 respectively in the grid.</p>
<p>Note: m and n will be at most 100.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [0,0,0],</span><br><span class="line">  [0,1,0],</span><br><span class="line">  [0,0,0]</span><br><span class="line">]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation:</span><br><span class="line">There is one obstacle in the middle of the 3x3 grid above.</span><br><span class="line">There are two ways to reach the bottom-right corner:</span><br><span class="line">1. Right -&gt; Right -&gt; Down -&gt; Down</span><br><span class="line">2. Down -&gt; Down -&gt; Right -&gt; Right</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="keyword">int</span>[][] obstacleGrid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obstacleGrid.length == <span class="number">0</span>||obstacleGrid[<span class="number">0</span>].length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = obstacleGrid.length;</span><br><span class="line">        <span class="keyword">int</span> n = obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span> || obstacleGrid[m-<span class="number">1</span>][n-<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;   </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[i][<span class="number">0</span>] == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][i] == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (obstacleGrid[i][j] != <span class="number">1</span>)</span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode064-minimumPathSum</title>
    <url>/2020/02/08/Leetcode064-minimumPathSum/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.</p>
<p><strong>Note:</strong> You can only move either down or right at any point in time.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [1,3,1],</span><br><span class="line">  [1,5,1],</span><br><span class="line">  [4,2,1]</span><br><span class="line">]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Because the path 1→3→1→1→1 minimizes the sum.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid.length == <span class="number">0</span> || grid[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = grid.length;</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) dp[i][<span class="number">0</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j-<span class="number">1</span>] + grid[<span class="number">0</span>][j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">                dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j],dp[i][j-<span class="number">1</span>]) + grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode066-plusOne</title>
    <url>/2019/09/12/Leetcode066-plusOne/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty array of digits representing a non-negative integer, plus one to the integer.</p>
<p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.</p>
<p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output: [1,2,4]</span><br><span class="line">Explanation: The array represents the integer 123.</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [4,3,2,1]</span><br><span class="line">Output: [4,3,2,2]</span><br><span class="line">Explanation: The array represents the integer 4321.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = digits.length -<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (digits[i] == <span class="number">9</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[digits.length+<span class="number">1</span>];</span><br><span class="line">                    res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; res.length; j++) res[j] =<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    digits[<span class="number">0</span>] += <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;            </span><br><span class="line">            <span class="keyword">if</span> (digits[i] == <span class="number">9</span>)&#123;</span><br><span class="line">                digits[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                digits[i] += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Math</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode067-addBinary</title>
    <url>/2019/11/18/Leetcode067-addBinary/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two binary strings, return their sum (also a binary string).</p>
<p>The input strings are both non-empty and contains only characters 1 or 0.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: a &#x3D; &quot;11&quot;, b &#x3D; &quot;1&quot;</span><br><span class="line">Output: &quot;100&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: a &#x3D; &quot;1010&quot;, b &#x3D; &quot;1011&quot;</span><br><span class="line">Output: &quot;10101&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addBinary</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> i = a.length() - <span class="number">1</span>, j = b.length() -<span class="number">1</span>, carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> sum = carry;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= <span class="number">0</span>) sum += b.charAt(j--) - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) sum += a.charAt(i--) - <span class="string">'0'</span>;</span><br><span class="line">            res = (sum % <span class="number">2</span>) + res;</span><br><span class="line">            carry = sum / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry != <span class="number">0</span>) res = carry + res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode069-sqrt(x)</title>
    <url>/2019/09/12/Leetcode069-sqrt-x/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int sqrt(int x).</span><br></pre></td></tr></table></figure><br>Compute and return the square root of x, where x is guaranteed to be a non-negative integer.</p>
<p>Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 8</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The square root of 8 is 2.82842..., and since </span><br><span class="line">             the decimal part is truncated, 2 is returned.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Newton’s method: <a href="https://blog.csdn.net/chenrenxiang/article/details/78286599" target="_blank" rel="noopener">https://blog.csdn.net/chenrenxiang/article/details/78286599</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//         Method 1 (Good to solve): Binary Search        </span></span><br><span class="line"><span class="comment">//         if (x == 0) return 0;</span></span><br><span class="line"><span class="comment">//         int left  = 1;</span></span><br><span class="line"><span class="comment">//         int right = Integer.MAX_VALUE;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         while(left &lt;= right)&#123;</span></span><br><span class="line"><span class="comment">//             int mid = left + (right - left)/2;</span></span><br><span class="line"><span class="comment">//             if (mid == x/mid) return mid;</span></span><br><span class="line"><span class="comment">//             else if (mid &lt; x/mid) left = mid + 1;</span></span><br><span class="line"><span class="comment">//             else if (mid &gt; x/mid) right = mid - 1;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return right;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Newton's method</span></span><br><span class="line">        <span class="keyword">long</span> r = x;</span><br><span class="line">        <span class="keyword">while</span> (r*r &gt; x)&#123;</span><br><span class="line">            r = (r + x/r)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode071-simplifyPath</title>
    <url>/2020/03/02/Leetcode071-simplifyPath/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an absolute path for a file (Unix-style), simplify it. Or in other words, convert it to the canonical path.</p>
<p>In a UNIX-style file system, a period . refers to the current directory. Furthermore, a double period .. moves the directory up a level. For more information, see: Absolute path vs relative path in Linux/Unix</p>
<p>Note that the returned canonical path must always begin with a slash /, and there must be only a single slash / between two directory names. The last directory name (if it exists) must not end with a trailing /. Also, the canonical path must be the shortest string representing the absolute path.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#x2F;home&#x2F;&quot;</span><br><span class="line">Output: &quot;&#x2F;home&quot;</span><br><span class="line">Explanation: Note that there is no trailing slash after the last directory name.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#x2F;..&#x2F;&quot;</span><br><span class="line">Output: &quot;&#x2F;&quot;</span><br><span class="line">Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#x2F;home&#x2F;&#x2F;foo&#x2F;&quot;</span><br><span class="line">Output: &quot;&#x2F;home&#x2F;foo&quot;</span><br><span class="line">Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#x2F;a&#x2F;.&#x2F;b&#x2F;..&#x2F;..&#x2F;c&#x2F;&quot;</span><br><span class="line">Output: &quot;&#x2F;c&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 5:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#x2F;a&#x2F;..&#x2F;..&#x2F;b&#x2F;..&#x2F;c&#x2F;&#x2F;.&#x2F;&#x2F;&quot;</span><br><span class="line">Output: &quot;&#x2F;c&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 6:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#x2F;a&#x2F;&#x2F;b&#x2F;&#x2F;&#x2F;&#x2F;c&#x2F;d&#x2F;&#x2F;.&#x2F;.&#x2F;&#x2F;..&quot;</span><br><span class="line">Output: &quot;&#x2F;a&#x2F;b&#x2F;c&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">simplifyPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        Stack&lt;String&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="string">".."</span>, <span class="string">"."</span>, <span class="string">""</span>));</span><br><span class="line">        <span class="keyword">for</span> (String part: path.split(<span class="string">"/"</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (part.equals(<span class="string">".."</span>) &amp;&amp; !st.isEmpty()) st.pop();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!set.contains(part)) st.push(part);</span><br><span class="line">        &#125;</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span>(!st.isEmpty()) res = <span class="string">"/"</span> + st.pop() + res;</span><br><span class="line">        <span class="keyword">if</span> (res.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"/"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> res;     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Bloomberg</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode072-editDistance</title>
    <url>/2020/03/02/Leetcode072-editDistance/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.</p>
<p>You have the following 3 operations permitted on a word:</p>
<ol>
<li>Insert a character</li>
<li>Delete a character</li>
<li>Replace a character</li>
</ol>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: word1 &#x3D; &quot;horse&quot;, word2 &#x3D; &quot;ros&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: </span><br><span class="line">horse -&gt; rorse (replace &#39;h&#39; with &#39;r&#39;)</span><br><span class="line">rorse -&gt; rose (remove &#39;r&#39;)</span><br><span class="line">rose -&gt; ros (remove &#39;e&#39;)</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: word1 &#x3D; &quot;intention&quot;, word2 &#x3D; &quot;execution&quot;</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: </span><br><span class="line">intention -&gt; inention (remove &#39;t&#39;)</span><br><span class="line">inention -&gt; enention (replace &#39;i&#39; with &#39;e&#39;)</span><br><span class="line">enention -&gt; exention (replace &#39;n&#39; with &#39;x&#39;)</span><br><span class="line">exention -&gt; exection (replace &#39;n&#39; with &#39;c&#39;)</span><br><span class="line">exection -&gt; execution (insert &#39;u&#39;)</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Let following be the function definition :-</p>
<p>f(i, j) := minimum cost (or steps) required to convert first i characters of word1 to first j characters of word2</p>
<p>Case 1: word1[i] == word2[j], i.e. the ith the jth character matches.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f(i, j) &#x3D; f(i - 1, j - 1)</span><br></pre></td></tr></table></figure><br>Case 2: word1[i] != word2[j], then we must either insert, delete or replace, whichever is cheaper<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f(i, j) &#x3D; 1 + min &#123; f(i, j - 1), f(i - 1, j), f(i - 1, j - 1) &#125;</span><br><span class="line"></span><br><span class="line">f(i, j - 1) represents insert operation</span><br><span class="line">f(i - 1, j) represents delete operation</span><br><span class="line">f(i - 1, j - 1) represents replace operation</span><br></pre></td></tr></table></figure><br>Here, we consider any operation from word1 to word2. It means, when we say insert operation, we insert a new character after word1 that matches the jth character of word2. So, now have to match i characters of word1 to j - 1 characters of word2. Same goes for other 2 operations as well.</p>
<p>Note that the problem is symmetric. The insert operation in one direction (i.e. from word1 to word2) is same as delete operation in other. So, we could choose any direction.</p>
<p>Above equations become the recursive definitions for DP.</p>
<p>Base Case:</p>
<p>f(0, k) = f(k, 0) = k</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = word1.length();</span><br><span class="line">        <span class="keyword">int</span> n = word2.length();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; j++) dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>))</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">int</span> replace = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">int</span> insert = dp[i][j - <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">int</span> delete = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                    dp[i][j] = Math.min(replace, Math.min(insert, delete)) + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>String</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode070-climbingStairs</title>
    <url>/2020/02/24/Leetcode070-climbingStairs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are climbing a stair case. It takes n steps to reach to the top.</p>
<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>
<p>Note: Given n will be a positive integer.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step</span><br><span class="line">2. 2 steps</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: There are three ways to climb to the top.</span><br><span class="line">1. 1 step + 1 step + 1 step</span><br><span class="line">2. 1 step + 2 steps</span><br><span class="line">3. 2 steps + 1 step</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">            dp[i] = dp[i - <span class="number">2</span>] + dp[i - <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode076-minimumWindowSubstring</title>
    <url>/2020/03/02/Leetcode076-minimumWindowSubstring/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: S &#x3D; &quot;ADOBECODEBANC&quot;, T &#x3D; &quot;ABC&quot;</span><br><span class="line">Output: &quot;BANC&quot;</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>If there is no such window in S that covers all characters in T, return the empty string “”.</li>
<li>If there is such window, you are guaranteed that there will always be only one unique minimum window in S.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// For most substring problem, we are given a string and need to find a substring of it which satisfy some restrictions. A general way is to use a hashmap assisted with two pointers. The template is given below.</span></span><br><span class="line"><span class="comment">// int findSubstring(string s)&#123;</span></span><br><span class="line"><span class="comment">//         int[] map = new int[128]; //used array instead hashmap could be more faster </span></span><br><span class="line"><span class="comment">//         int counter; // check whether the substring is valid</span></span><br><span class="line"><span class="comment">//         int begin=0, end=0; //two pointers, one point to tail and one  head</span></span><br><span class="line"><span class="comment">//         int d; //the length of substring</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         for() &#123; /* initialize the map here */ &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         while(end&lt;s.size())&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//             char ch1 = s.charAt(end);</span></span><br><span class="line"><span class="comment">//             if (map[ch1] &gt; 0) &#123;/* modify counter here */&#125; </span></span><br><span class="line"><span class="comment">//             map[ch1]--;</span></span><br><span class="line"><span class="comment">//             ch1++:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//             while(/* counter condition */)&#123; </span></span><br><span class="line">                 </span><br><span class="line"><span class="comment">//                  /* update d here if finding minimum*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//                 //increase begin to make it invalid/valid again</span></span><br><span class="line"><span class="comment">//                  char ch2 = s.charAt(begin);</span></span><br><span class="line"><span class="comment">//                  map[ch2]++;</span></span><br><span class="line"><span class="comment">//                  if (map[ch2] &gt; 0) &#123; /*modify counter here*/ &#125;</span></span><br><span class="line"><span class="comment">//                 begin++</span></span><br><span class="line"><span class="comment">//             &#125;  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//             /* update d here if finding maximum*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return d;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">minWindow</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: t.toCharArray()) map[ch]++;</span><br><span class="line">        <span class="keyword">int</span> maxLen = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = t.length();</span><br><span class="line">        <span class="keyword">int</span> minStart = <span class="number">0</span>, minEnd = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(end &lt; s.length())&#123;</span><br><span class="line">            <span class="keyword">char</span> cur = s.charAt(end);            </span><br><span class="line">            <span class="keyword">if</span> (map[cur] &gt; <span class="number">0</span>) count--;</span><br><span class="line">            map[cur]--;</span><br><span class="line">            end++;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (count == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (maxLen &gt; end - begin)&#123;</span><br><span class="line">                    maxLen = end- begin;</span><br><span class="line">                    minStart = begin;</span><br><span class="line">                    minEnd = end;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">char</span> ch =  s.charAt(begin);</span><br><span class="line">                map[ch]++;</span><br><span class="line">                <span class="keyword">if</span> (map[ch] &gt; <span class="number">0</span>) count++;</span><br><span class="line">                begin++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maxLen == Integer.MAX_VALUE) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> s.substring(minStart, minEnd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Hash Table</tag>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
        <tag>String</tag>
        <tag>Sliding Window</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode077-combinations</title>
    <url>/2019/09/17/Leetcode077-combinations/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two integers n and k, return all possible combinations of k numbers out of 1 … n.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 4, k &#x3D; 2</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; tmp, <span class="keyword">int</span> k, <span class="keyword">int</span> n, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tmp.size() == k)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(tmp));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start;i &lt;= n - (k-tmp.size()) + <span class="number">1</span>; i++)&#123; <span class="comment">//notice i&lt;=n-(k-tmp.size())+1 speed up from 26ms downto 2ms</span></span><br><span class="line">            tmp.add(i);</span><br><span class="line">            backtracking(res, tmp, k, n, i+<span class="number">1</span>);</span><br><span class="line">            tmp.remove(tmp.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (k&gt;n) <span class="keyword">return</span> res;</span><br><span class="line">        backtracking(res, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), k, n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode078-subsets</title>
    <url>/2019/09/16/Leetcode078-subsets/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a set of distinct integers, nums, return all possible subsets (the power set).</p>
<p><strong>Note</strong>: The solution set must not contain duplicate subsets.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [1,2,3]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [1],</span><br><span class="line">  [2],</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; temp, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(temp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class="line">            temp.add(nums[i]);</span><br><span class="line">            backtrack(res, temp, nums, i + <span class="number">1</span>);</span><br><span class="line">            temp.remove(temp.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        backtrack(res, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), nums, <span class="number">0</span>);      </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode079-wordSearch</title>
    <url>/2019/10/13/Leetcode079-wordSearch/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2D board and a word, find if the word exists in the grid.</p>
<p>The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">board &#x3D;</span><br><span class="line">[</span><br><span class="line">  [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;E&#39;],</span><br><span class="line">  [&#39;S&#39;,&#39;F&#39;,&#39;C&#39;,&#39;S&#39;],</span><br><span class="line">  [&#39;A&#39;,&#39;D&#39;,&#39;E&#39;,&#39;E&#39;]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Given word &#x3D; &quot;ABCCED&quot;, return true.</span><br><span class="line">Given word &#x3D; &quot;SEE&quot;, return true.</span><br><span class="line">Given word &#x3D; &quot;ABCB&quot;, return false.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">int</span>[][] dirt = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;-<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,&#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board == <span class="keyword">null</span> || board.length == <span class="number">0</span> || board[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (word == <span class="keyword">null</span> || word.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">char</span>[] w = word.toCharArray();</span><br><span class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[board.length][board[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++)</span><br><span class="line">                <span class="keyword">if</span> (dfs(board, i, j, w, <span class="number">0</span>, visited)) <span class="keyword">return</span> <span class="keyword">true</span>;                            </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">char</span>[] w, <span class="keyword">int</span> cur, <span class="keyword">boolean</span>[][] visited)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board[x][y] != w[cur]) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (cur == w.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        visited[x][y] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + dirt[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ny = y + dirt[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; board.length &amp;&amp; ny &gt;=<span class="number">0</span> &amp;&amp; ny &lt; board[<span class="number">0</span>].length &amp;&amp; !visited[nx][ny])&#123;</span><br><span class="line">                <span class="keyword">if</span> (dfs(board, nx, ny, w, cur + <span class="number">1</span>, visited)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[x][y] = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode088-mergeSortedArray</title>
    <url>/2020/03/02/Leetcode088-mergeSortedArray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array</p>
<p><strong>Note:</strong></p>
<ul>
<li>The number of elements initialized in nums1 and nums2 are m and n respectively.</li>
<li>You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">nums1 &#x3D; [1,2,3,0,0,0], m &#x3D; 3</span><br><span class="line">nums2 &#x3D; [2,5,6],       n &#x3D; 3</span><br><span class="line"></span><br><span class="line">Output: [1,2,2,3,5,6]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution: best solution</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = m - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k = m + n -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1[i] &gt; nums2[j])&#123;</span><br><span class="line">                nums1[k--] = nums1[i--];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nums1[k--] = nums2[j--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span>)</span><br><span class="line">            nums1[k--] = nums1[i--];</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span>)</span><br><span class="line">            nums1[k--] = nums2[j--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 2: Not a good solution</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[n + m];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; m &amp;&amp; j &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1[i] &lt;= nums2[j])&#123;</span><br><span class="line">                tmp[index++] = nums1[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                tmp[index++] = nums2[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; m)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; i &lt; m; k++) tmp[index++] = nums1[i++];</span><br><span class="line">        <span class="keyword">if</span> (j &lt; n)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j; j &lt; n; k++) tmp[index++] = nums2[j++];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m + n; k++)</span><br><span class="line">            nums1[k] = tmp[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode084-langestRectangleInHistogram</title>
    <url>/2020/02/24/Leetcode084-langestRectangleInHistogram/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given n non-negative integers representing the histogram’s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/12/histogram.png" alt=""></p>
<p>Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/12/histogram_area.png" alt=""></p>
<p>The largest rectangle is shown in the shaded area, which has area = 10 unit.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A histogram where width of each bar is 1, given height &#x3D; [2,1,5,6,2,3].</span><br><span class="line"></span><br><span class="line">The largest rectangle is shown in the shaded area, which has area &#x3D; 10 unit.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Method 1: calculate the most left and right bounds which higher than cur<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="keyword">int</span>[] heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (heights == <span class="keyword">null</span> || heights.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] leftHigher = <span class="keyword">new</span> <span class="keyword">int</span>[heights.length];</span><br><span class="line">        <span class="keyword">int</span>[] rightHigher = <span class="keyword">new</span> <span class="keyword">int</span>[heights.length];</span><br><span class="line">        leftHigher[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        rightHigher[heights.length - <span class="number">1</span>] = heights.length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; heights.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> index= i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (index &gt;= <span class="number">0</span> &amp;&amp; heights[index] &gt;= heights[i])</span><br><span class="line">                index = leftHigher[index];</span><br><span class="line">            leftHigher[i] = index;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = heights.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">int</span> index = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; heights.length &amp;&amp; heights[index] &gt;= heights[i])</span><br><span class="line">                index = rightHigher[index];</span><br><span class="line">            rightHigher[i] = index;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> res = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heights.length; i++)&#123;</span><br><span class="line">            res = Math.max(res, (rightHigher[i] - leftHigher[i] - <span class="number">1</span>) * heights[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Method 2: Stack based solution, calculate each removed bar whose height larger then the cur. The speed is O(n), but slower than the above solution actually.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">largestRectangleArea</span><span class="params">(<span class="keyword">int</span>[] heights)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (heights == <span class="keyword">null</span> || heights.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Stack&lt;Integer&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= heights.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> h = i == heights.length ? <span class="number">0</span> : heights[i];</span><br><span class="line">            <span class="keyword">while</span> (!st.isEmpty() &amp;&amp; h &lt; heights[st.peek()])&#123;</span><br><span class="line">                <span class="keyword">int</span> preHeight = heights[st.pop()];</span><br><span class="line">                <span class="keyword">int</span> preBoundary = st.isEmpty() ? -<span class="number">1</span> : st.peek();</span><br><span class="line">                <span class="keyword">int</span> len = i - preBoundary - <span class="number">1</span>;</span><br><span class="line">                res = Math.max(res, preHeight * len);</span><br><span class="line">            &#125;</span><br><span class="line">            st.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Stack</tag>
        <tag>Bloomberg</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode085-maximalRectangle</title>
    <url>/2019/10/13/Leetcode085-maximalRectangle/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest rectangle containing only 1’s and return its area.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]</span><br><span class="line">]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The DP solution proceeds row by row, starting from the first row. Let the maximal rectangle area at row i and column j be computed by [right(i,j) - left(i,j)]*height(i,j).</p>
<p>All the 3 variables left, right, and height can be determined by the information from previous row, and also information from the current row. So it can be regarded as a DP solution. The transition equations are:</p>
<ul>
<li><p>left(i,j) = max(left(i-1,j), cur_left), cur_left can be determined from the current row</p>
</li>
<li><p>right(i,j) = min(right(i-1,j), cur_right), cur_right can be determined from the current row</p>
</li>
<li><p>height(i,j) = height(i-1,j) + 1, if matrix[i][j]==’1’;</p>
</li>
<li><p>height(i,j) = 0, if matrix[i][j]==’0’</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalRectangle</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[] left = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] right = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] height = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        Arrays.fill(left, <span class="number">0</span>);</span><br><span class="line">        Arrays.fill(right, n-<span class="number">1</span>);</span><br><span class="line">        Arrays.fill(height, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> curLeft = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> curRight = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123; </span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                    height[j] ++;   <span class="comment">// compute height (can do this from either side)</span></span><br><span class="line">                    left[j] = Math.max(left[j], curLeft);   <span class="comment">// compute left (from left to right)</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    height[j] = <span class="number">0</span>;</span><br><span class="line">                    left[j] = <span class="number">0</span>;</span><br><span class="line">                    curLeft = j + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123;   <span class="comment">// compute right (from right to left)</span></span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="string">'1'</span>)&#123;</span><br><span class="line">                    right[j] = Math.min(right[j], curRight);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    right[j] = n - <span class="number">1</span>;</span><br><span class="line">                    curRight = j - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                res = Math.max(res, (right[j] - left[j] + <span class="number">1</span>)*height[j]); <span class="comment">// compute the area of rectangle (can do this from either side)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode090-subsetsII</title>
    <url>/2019/09/16/Leetcode090-subsetsII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).</p>
<p><strong>Note</strong>: The solution set must not contain duplicate subsets.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,2]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [2],</span><br><span class="line">  [1],</span><br><span class="line">  [1,2,2],</span><br><span class="line">  [2,2],</span><br><span class="line">  [1,2],</span><br><span class="line">  []</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; temp, <span class="keyword">int</span>[] nums, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(temp));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; start &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            temp.add(nums[i]);</span><br><span class="line">            backtrack(res, temp, nums, i+<span class="number">1</span>);</span><br><span class="line">            temp.remove(temp.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtrack(res, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode089-grayCode</title>
    <url>/2020/02/07/Leetcode089-grayCode/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The gray code is a binary numeral system where two successive values differ in only one bit.</p>
<p>Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2</span><br><span class="line">Output: [0,1,3,2]</span><br><span class="line">Explanation:</span><br><span class="line">00 - 0</span><br><span class="line">01 - 1</span><br><span class="line">11 - 3</span><br><span class="line">10 - 2</span><br><span class="line"></span><br><span class="line">For a given n, a gray code sequence may not be uniquely defined.</span><br><span class="line">For example, [0,2,3,1] is also a valid gray code sequence.</span><br><span class="line"></span><br><span class="line">00 - 0</span><br><span class="line">10 - 2</span><br><span class="line">11 - 3</span><br><span class="line">01 - 1</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 0</span><br><span class="line">Output: [0]</span><br><span class="line">Explanation: We define the gray code sequence to begin with 0.</span><br><span class="line">             A gray code sequence of n has size &#x3D; 2n, which for n &#x3D; 0 the size is 20 &#x3D; 1.</span><br><span class="line">             Therefore, for n &#x3D; 0 the gray code sequence is [0].</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">grayCode</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        res.add(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (n  == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        res.add(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = res.size()-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                res.add(res.get(j) + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>Leetcode092-reverseLinkedListII</title>
    <url>/2020/03/02/Leetcode092-reverseLinkedListII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Reverse a linked list from position m to n. Do it in one-pass.</p>
<p>Note: 1 ≤ m ≤ n ≤ length of list.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m &#x3D; 2, n &#x3D; 4</span><br><span class="line">Output: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>It basically does two things:</p>
<ol>
<li>start, which records mNode, bubbles up step by step to where the nNode originally is; start node never change, it is always the mNode;</li>
<li>next, which is always the next node of start (obviously it changes every time), is repeatedly being put to the next position of the pre node ( pre node doesn’t change either), so that nodes between pre (not include) and start (include) is always in descending order.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        </span><br><span class="line">        ListNode pre = dummy;    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) pre = pre.next;</span><br><span class="line">        ListNode start = pre.next;</span><br><span class="line">        ListNode next = start.next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - m; i++)&#123;</span><br><span class="line">            start.next = next.next;</span><br><span class="line">            next.next = pre.next;</span><br><span class="line">            pre.next = next;</span><br><span class="line">            next = start.next;          </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Bloomberg</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode087-scrambleString</title>
    <url>/2020/02/20/Leetcode087-scrambleString/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.</p>
<p>Below is one possible representation of s1 = “great”:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    great</span><br><span class="line">   &#x2F;    \</span><br><span class="line">  gr    eat</span><br><span class="line"> &#x2F; \    &#x2F;  \</span><br><span class="line">g   r  e   at</span><br><span class="line">           &#x2F; \</span><br><span class="line">          a   t</span><br></pre></td></tr></table></figure><br>To scramble the string, we may choose any non-leaf node and swap its two children.</p>
<p>For example, if we choose the node “gr” and swap its two children, it produces a scrambled string “rgeat”.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    rgeat</span><br><span class="line">   &#x2F;    \</span><br><span class="line">  rg    eat</span><br><span class="line"> &#x2F; \    &#x2F;  \</span><br><span class="line">r   g  e   at</span><br><span class="line">           &#x2F; \</span><br><span class="line">          a   t</span><br></pre></td></tr></table></figure><br>We say that “rgeat” is a scrambled string of “great”.</p>
<p>Similarly, if we continue to swap the children of nodes “eat” and “at”, it produces a scrambled string “rgtae”.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    rgtae</span><br><span class="line">   &#x2F;    \</span><br><span class="line">  rg    tae</span><br><span class="line"> &#x2F; \    &#x2F;  \</span><br><span class="line">r   g  ta  e</span><br><span class="line">       &#x2F; \</span><br><span class="line">      t   a</span><br></pre></td></tr></table></figure><br>We say that “rgtae” is a scrambled string of “great”.</p>
<p>Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s1 &#x3D; &quot;great&quot;, s2 &#x3D; &quot;rgeat&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s1 &#x3D; &quot;abcde&quot;, s2 &#x3D; &quot;caebd&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isScramble</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.equals(s2)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] test = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); i++)&#123;</span><br><span class="line">            test[s1.charAt(i) - <span class="string">'a'</span>] ++;</span><br><span class="line">            test[s2.charAt(i) - <span class="string">'a'</span>] --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> letter: test) <span class="keyword">if</span> (letter!=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s1.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (isScramble(s1.substring(<span class="number">0</span>, i), s2.substring(<span class="number">0</span>, i)) &amp;&amp; isScramble(s1.substring(i), s2.substring(i))) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (isScramble(s1.substring(<span class="number">0</span>, i), s2.substring(s2.length() - i)) &amp;&amp; isScramble(s1.substring(i), s2.substring(<span class="number">0</span>, s2.length() - i))) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode093-restoreIPAddresses</title>
    <url>/2019/10/22/Leetcode093-restoreIPAddresses/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string containing only digits, restore it by returning all possible valid IP address combinations.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;25525511135&quot;</span><br><span class="line">Output: [&quot;255.255.11.135&quot;, &quot;255.255.111.35&quot;]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">restoreIpAddresses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        dfs(res, <span class="number">0</span>, s, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(List&lt;String&gt; res, <span class="keyword">int</span> index, String s, String cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s.length() &gt; <span class="number">1</span> &amp;&amp; s.charAt(<span class="number">0</span>) == <span class="string">'0'</span>) <span class="keyword">return</span>; </span><br><span class="line">            <span class="keyword">if</span> (Double.parseDouble(s) &gt; <span class="number">255</span>) <span class="keyword">return</span>;</span><br><span class="line">            res.add(cur+s);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Math.min(s.length(), <span class="number">4</span>); i++)&#123;</span><br><span class="line">            String tmp = s.substring(<span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">if</span> (tmp.length() &gt; <span class="number">1</span> &amp;&amp; tmp.charAt(<span class="number">0</span>) == <span class="string">'0'</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (Double.parseDouble(tmp) &gt; <span class="number">255</span>) <span class="keyword">continue</span>;</span><br><span class="line">            cur = cur + tmp + <span class="string">"."</span>;</span><br><span class="line">            dfs(res, index + <span class="number">1</span>, s.substring(i), cur);</span><br><span class="line">            cur = cur.substring(<span class="number">0</span>, cur.length()-tmp.length()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>String</tag>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode094-binaryTreeInorderTraversal</title>
    <url>/2019/09/14/Leetcode094-binaryTreeInorderTraversal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the inorder traversal of its nodes’ values.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,3,2]</span><br></pre></td></tr></table></figure>
<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) inOrder(node.left);</span><br><span class="line">        res.add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) inOrder(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Recursive solution</span></span><br><span class="line">        <span class="comment">//inOrder(root);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Stack method</span></span><br><span class="line">        <span class="comment">// Stack&lt;TreeNode&gt; st = new Stack&lt;&gt;();</span></span><br><span class="line">        <span class="comment">// if (root.right!=null)&#123;</span></span><br><span class="line">        <span class="comment">//     st.push(root.right);</span></span><br><span class="line">        <span class="comment">//     root.right = null;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// st.push(root);</span></span><br><span class="line">        <span class="comment">// if (root.left!=null)&#123;</span></span><br><span class="line">        <span class="comment">//     st.push(root.left);</span></span><br><span class="line">        <span class="comment">//     root.left=null;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// while(!st.empty())&#123;</span></span><br><span class="line">        <span class="comment">//     TreeNode node = st.pop();</span></span><br><span class="line">        <span class="comment">//     if (node.right != null)&#123;</span></span><br><span class="line">        <span class="comment">//         st.push(node.right);</span></span><br><span class="line">        <span class="comment">//         node.right = null;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     if (node.left != null)&#123;</span></span><br><span class="line">        <span class="comment">//         st.push(node);</span></span><br><span class="line">        <span class="comment">//         st.push(node.left);</span></span><br><span class="line">        <span class="comment">//         node.left = null;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     else res.add(node.val);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// return res;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//iterative method</span></span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode p = root;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() || p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(p);</span><br><span class="line">                p = p.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode node = stack.pop();</span><br><span class="line">                result.add(node.val);  <span class="comment">// Add after all left children</span></span><br><span class="line">                p = node.right;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Inorder</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode095-uniqueBinarySearchTreesII</title>
    <url>/2020/02/22/Leetcode095-uniqueBinarySearchTreesII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer n, generate all structurally unique BST’s (binary search trees) that store values 1 … n.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [1,null,3,2],</span><br><span class="line">  [3,2,null,1],</span><br><span class="line">  [3,1,null,null,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [1,null,2,null,3]</span><br><span class="line">]</span><br><span class="line">Explanation:</span><br><span class="line">The above output corresponds to the 5 unique BST&#39;s shown below:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       &#x2F;     &#x2F;      &#x2F; \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    &#x2F;     &#x2F;       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Method 1: Basic recursion method<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">helper</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            res.add(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++)&#123;</span><br><span class="line">            List&lt;TreeNode&gt; leftTree = helper(left, i - <span class="number">1</span>);</span><br><span class="line">            List&lt;TreeNode&gt; rightTree = helper(i + <span class="number">1</span>, right);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (TreeNode leftNode: leftTree)&#123;</span><br><span class="line">                <span class="keyword">for</span> (TreeNode rightNode: rightTree)&#123;</span><br><span class="line">                    TreeNode newNode = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                    newNode.left = leftNode;</span><br><span class="line">                    newNode.right = rightNode;</span><br><span class="line">                    res.add(newNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Method2: Recursion with momory, a kind of DP. Used memory[i][j][] to store BSTs constructed by i..j. In this method, used list which need to be initilized to store. The time for initialization if O^2, it’s not good. Maybe can change to Array to store.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">generateTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line">        List&lt;List&lt;List&lt;TreeNode&gt;&gt;&gt; memory = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            memory.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) memory.get(i).add(<span class="keyword">new</span> ArrayList&lt;TreeNode&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">1</span>, n, memory);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">helper</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, List&lt;List&lt;List&lt;TreeNode&gt;&gt;&gt; memory)</span></span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            res.add(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (memory.get(left - <span class="number">1</span>).get(right - <span class="number">1</span>).size() != <span class="number">0</span>) <span class="keyword">return</span> memory.get(left - <span class="number">1</span>).get(right - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++)&#123;</span><br><span class="line">            List&lt;TreeNode&gt; leftTree = helper(left, i - <span class="number">1</span>, memory);</span><br><span class="line">            List&lt;TreeNode&gt; rightTree = helper(i + <span class="number">1</span>, right, memory);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (TreeNode leftNode: leftTree)&#123;</span><br><span class="line">                <span class="keyword">for</span> (TreeNode rightNode: rightTree)&#123;</span><br><span class="line">                    TreeNode newNode = <span class="keyword">new</span> TreeNode(i);</span><br><span class="line">                    newNode.left = leftNode;</span><br><span class="line">                    newNode.right = rightNode;</span><br><span class="line">                    res.add(newNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;TreeNode&gt; temp = memory.get(left - <span class="number">1</span>).get(right - <span class="number">1</span>);</span><br><span class="line">        temp = res;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>Recursion</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode096-uniqueBianrySearchTrees</title>
    <url>/2020/02/22/Leetcode096-uniqueBianrySearchTrees/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given n, how many structurally unique BST’s (binary search trees) that store values 1 … n?</p>
<p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: 5</span><br><span class="line">Explanation:</span><br><span class="line">Given n &#x3D; 3, there are a total of 5 unique BST&#39;s:</span><br><span class="line"></span><br><span class="line">   1         3     3      2      1</span><br><span class="line">    \       &#x2F;     &#x2F;      &#x2F; \      \</span><br><span class="line">     3     2     1      1   3      2</span><br><span class="line">    &#x2F;     &#x2F;       \                 \</span><br><span class="line">   2     1         2                 3</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Catelan<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C0 = 1;</span></span><br><span class="line"><span class="comment">// C(n + 1) = C(0)C(n) + C(1)C(n - 1)....</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] Catelan = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        Catelan[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                Catelan[i] += Catelan[j] * Catelan[i - j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Catelan[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode097-interleavingString</title>
    <url>/2020/02/20/Leetcode097-interleavingString/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s1 &#x3D; &quot;aabcc&quot;, s2 &#x3D; &quot;dbbca&quot;, s3 &#x3D; &quot;aadbbcbcac&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s1 &#x3D; &quot;aabcc&quot;, s2 &#x3D; &quot;dbbca&quot;, s3 &#x3D; &quot;aadbbbaccc&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterleave</span><span class="params">(String s1, String s2, String s3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.length() + s2.length() != s3.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s1.length() + <span class="number">1</span>][s2.length() + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s2.length(); i++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i-<span class="number">1</span>] &amp;&amp; (s2.charAt(i-<span class="number">1</span>) == s3.charAt(i-<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s1.length(); i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>] &amp;&amp; (s1.charAt(i-<span class="number">1</span>) == s3.charAt(i-<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s1.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= s2.length(); j++)&#123;</span><br><span class="line">                dp[i][j] = (dp[i-<span class="number">1</span>][j] &amp;&amp; (s1.charAt(i-<span class="number">1</span>) == s3.charAt(i + j -<span class="number">1</span>)))</span><br><span class="line">                    ||(dp[i][j-<span class="number">1</span>] &amp;&amp; (s2.charAt(j-<span class="number">1</span>) == s3.charAt(i + j-<span class="number">1</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s1.length()][s2.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>String</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode098-validateBinarySearchTree</title>
    <url>/2019/10/13/Leetcode098-validateBinarySearchTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, determine if it is a valid binary search tree (BST).</p>
<p>Assume a BST is defined as follows:</p>
<ul>
<li>The left subtree of a node contains only nodes with keys less than the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys greater than the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   3</span><br><span class="line"></span><br><span class="line">Input: [2,1,3]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    5</span><br><span class="line">   &#x2F; \</span><br><span class="line">  1   4</span><br><span class="line">     &#x2F; \</span><br><span class="line">    3   6</span><br><span class="line"></span><br><span class="line">Input: [5,1,4,null,null,3,6]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The root node&#39;s value is 5 but its right child&#39;s value is 4.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>DFS Solution<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root, <span class="keyword">long</span> minVal, <span class="keyword">long</span> maxVal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.val &gt;= maxVal || root.val &lt;= minVal) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isValidBST(root.left, minVal, root.val) &amp;&amp; isValidBST(root.right, root.val, maxVal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Stack Solution, can be used in other questions like k-th samllest element in BST<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(root != <span class="keyword">null</span> || !st.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                st.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = st.pop();</span><br><span class="line">            <span class="keyword">if</span> (pre != <span class="keyword">null</span> &amp;&amp; pre.val &gt;= root.val ) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            pre = root;</span><br><span class="line">            root = root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode099-recoverBinarySearchTree</title>
    <url>/2020/02/22/Leetcode099-recoverBinarySearchTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Two elements of a binary search tree (BST) are swapped by mistake.</p>
<p>Recover the tree without changing its structure.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,null,null,2]</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">  &#x2F;</span><br><span class="line"> 3</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line"></span><br><span class="line">Output: [3,1,null,null,2]</span><br><span class="line"></span><br><span class="line">   3</span><br><span class="line">  &#x2F;</span><br><span class="line"> 1</span><br><span class="line">  \</span><br><span class="line">   2</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,1,4,null,null,2]</span><br><span class="line"></span><br><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   4</span><br><span class="line">   &#x2F;</span><br><span class="line">  2</span><br><span class="line"></span><br><span class="line">Output: [2,1,4,null,null,3]</span><br><span class="line"></span><br><span class="line">  2</span><br><span class="line"> &#x2F; \</span><br><span class="line">1   4</span><br><span class="line">   &#x2F;</span><br><span class="line">  3</span><br></pre></td></tr></table></figure></p>
<p><strong>Follow up:</strong></p>
<ul>
<li>A solution using O(n) space is pretty straight forward.</li>
<li>Could you devise a constant space solution?</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Method 1: Straight method, in-order traversal, space $O(n)$<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</span><br><span class="line">        TreeNode firstNode =  <span class="keyword">null</span>;</span><br><span class="line">        TreeNode secondNode = <span class="keyword">null</span>;</span><br><span class="line">        TreeNode preNode = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(root != <span class="keyword">null</span> || !st.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span> (root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                st.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            root = st.pop();</span><br><span class="line">            <span class="keyword">if</span> (preNode != <span class="keyword">null</span> &amp;&amp; preNode.val &gt;= root.val)&#123;</span><br><span class="line">                <span class="keyword">if</span> (firstNode == <span class="keyword">null</span>) firstNode = preNode;</span><br><span class="line">                <span class="keyword">if</span> (firstNode != <span class="keyword">null</span>) secondNode = root;</span><br><span class="line">            &#125;</span><br><span class="line">            preNode = root;</span><br><span class="line">            root = root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> temp = firstNode.val;</span><br><span class="line">        firstNode.val = secondNode.val;</span><br><span class="line">        secondNode.val = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Method 2: Used Morris Traversal, which based on threaded binary tree. Space $O(1)$<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Used Morris Traversal, which based on threaded binary tree</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line">        TreeNode first = <span class="keyword">null</span>, second = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// Morris Traversal</span></span><br><span class="line">        TreeNode temp = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(root.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				<span class="comment">// connect threading for root</span></span><br><span class="line">				temp = root.left;</span><br><span class="line">				<span class="keyword">while</span>(temp.right!=<span class="keyword">null</span> &amp;&amp; temp.right != root)</span><br><span class="line">					temp = temp.right;</span><br><span class="line">				<span class="comment">// the threading already exists</span></span><br><span class="line">				<span class="keyword">if</span>(temp.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				    <span class="keyword">if</span>(pre!=<span class="keyword">null</span> &amp;&amp; pre.val &gt; root.val)&#123;</span><br><span class="line">				        <span class="keyword">if</span>(first==<span class="keyword">null</span>)&#123;first = pre;second = root;&#125;</span><br><span class="line">				        <span class="keyword">else</span>&#123;second = root;&#125;</span><br><span class="line">				    &#125;</span><br><span class="line">				    pre = root;</span><br><span class="line">				    </span><br><span class="line">					temp.right = <span class="keyword">null</span>;</span><br><span class="line">					root = root.right;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="comment">// construct the threading</span></span><br><span class="line">					temp.right = root;</span><br><span class="line">					root = root.left;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(pre!=<span class="keyword">null</span> &amp;&amp; pre.val &gt; root.val)&#123;</span><br><span class="line">				    <span class="keyword">if</span>(first==<span class="keyword">null</span>)&#123;first = pre;second = root;&#125;</span><br><span class="line">				    <span class="keyword">else</span>&#123;second = root;&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				pre = root;</span><br><span class="line">				root = root.right;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// swap two node values;</span></span><br><span class="line">		<span class="keyword">if</span>(first!= <span class="keyword">null</span> &amp;&amp; second != <span class="keyword">null</span>)&#123;</span><br><span class="line">		    <span class="keyword">int</span> t = first.val;</span><br><span class="line">		    first.val = second.val;</span><br><span class="line">		    second.val = t;</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode100-Same Tree</title>
    <url>/2019/10/13/Leetcode100-sameTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two binary trees, write a function to check if they are the same or not.</p>
<p>Two binary trees are considered the same if they are structurally identical and the nodes have the same value.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          &#x2F; \       &#x2F; \</span><br><span class="line">         2   3     2   3</span><br><span class="line"></span><br><span class="line">        [1,2,3],   [1,2,3]</span><br><span class="line"></span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          &#x2F;           \</span><br><span class="line">         2             2</span><br><span class="line"></span><br><span class="line">        [1,2],     [1,null,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          &#x2F; \       &#x2F; \</span><br><span class="line">         2   1     1   2</span><br><span class="line"></span><br><span class="line">        [1,2,1],   [1,1,2]</span><br><span class="line"></span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: Recursion</strong></p>
<p>Time Complex: <script type="math/tex">O(N)</script></p>
<p>Space Complex: <script type="math/tex">O(logN)</script></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || q == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (p.val != q.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2: Iteration</strong></p>
<p>Time Complex: <script type="math/tex">O(N)</script></p>
<p>Space Complex: <script type="math/tex">O(logN)</script></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Iteration solution, use stack to preorder trees</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stP = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stQ = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stP.push(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (q != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stQ.push(q);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!stP.isEmpty() &amp;&amp; !stQ.isEmpty())&#123;</span><br><span class="line">            TreeNode nodeP = stP.pop();</span><br><span class="line">            TreeNode nodeQ = stQ.pop();</span><br><span class="line">            <span class="keyword">if</span> (nodeP.val != nodeQ.val)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nodeP.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stP.push(nodeP.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nodeQ.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stQ.push(nodeQ.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stP.size() != stQ.size())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nodeP.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stP.push(nodeP.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nodeQ.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stQ.push(nodeQ.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stP.size() != stQ.size())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stP.size() == <span class="number">0</span> &amp;&amp; stQ.size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
        <tag>Linkedin</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1000-minimumCostToMergeStones</title>
    <url>/2019/10/07/Leetcode1000-minimumCostToMergeStones/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are N piles of stones arranged in a row.  The i-th pile has stones[i] stones.</p>
<p>A move consists of merging exactly K consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these K piles.</p>
<p>Find the minimum cost to merge all piles of stones into one pile.  If it is impossible, return -1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: stones &#x3D; [3,2,4,1], K &#x3D; 2</span><br><span class="line">Output: 20</span><br><span class="line">Explanation: </span><br><span class="line">We start with [3, 2, 4, 1].</span><br><span class="line">We merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].</span><br><span class="line">We merge [4, 1] for a cost of 5, and we are left with [5, 5].</span><br><span class="line">We merge [5, 5] for a cost of 10, and we are left with [10].</span><br><span class="line">The total cost was 20, and this is the minimum possible.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: stones &#x3D; [3,2,4,1], K &#x3D; 3</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: After any merge operation, there are 2 piles left, and we can&#39;t merge anymore.  So the task is impossible.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: stones &#x3D; [3,5,1,2,6], K &#x3D; 3</span><br><span class="line">Output: 25</span><br><span class="line">Explanation: </span><br><span class="line">We start with [3, 5, 1, 2, 6].</span><br><span class="line">We merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].</span><br><span class="line">We merge [3, 8, 6] for a cost of 17, and we are left with [17].</span><br><span class="line">The total cost was 25, and this is the minimum possible.</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ul>
<li>1 &lt;= stones.length &lt;= 30</li>
<li>2 &lt;= K &lt;= 30</li>
<li>1 &lt;= stones[i] &lt;= 100</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mergeStones</span><span class="params">(<span class="keyword">int</span>[] stones, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = stones.length;</span><br><span class="line">        <span class="keyword">if</span> ((len - <span class="number">1</span>) % (K - <span class="number">1</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i, j, k, l, t;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] prefixSum = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            prefixSum[i] = prefixSum[i - <span class="number">1</span>] + stones[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">99999999</span>;</span><br><span class="line">        <span class="keyword">int</span>[][][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len + <span class="number">1</span>][len + <span class="number">1</span>][K + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= len; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= K; k++) &#123;</span><br><span class="line">                    dp[i][j][k] = max;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            dp[i][i][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (l = <span class="number">2</span>; l &lt;= len; l++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len - l + <span class="number">1</span>; i++) &#123;</span><br><span class="line">                j = i + l - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (k = <span class="number">2</span>; k &lt;= K; k++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (t = i; t &lt; j; t++) &#123;</span><br><span class="line">                        dp[i][j][k] = Math.min(dp[i][j][k], dp[i][t][k - <span class="number">1</span>] + dp[t + <span class="number">1</span>][j][<span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                dp[i][j][<span class="number">1</span>] = dp[i][j][K] + prefixSum[j] - prefixSum[i - <span class="number">1</span>];   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">1</span>][len][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class Solution &#123;</span></span><br><span class="line"><span class="comment">//     public int mergeStones(int[] stones, int K) &#123;</span></span><br><span class="line"><span class="comment">//         if (stones.length &lt; K) return -1;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         int len = stones.length - K + 1;</span></span><br><span class="line"><span class="comment">//         int[] window = new int[len];</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         int itr = 0;</span></span><br><span class="line"><span class="comment">//         int min = Integer.MAX_VALUE;</span></span><br><span class="line"><span class="comment">//         int index = -1;</span></span><br><span class="line"><span class="comment">//         for (int i = 0; i &lt; stones.length; i++)&#123;</span></span><br><span class="line"><span class="comment">//             if (i &gt;= K)&#123;</span></span><br><span class="line"><span class="comment">//                 if (min &gt; window[itr])&#123;</span></span><br><span class="line"><span class="comment">//                     min = window[itr];</span></span><br><span class="line"><span class="comment">//                     index= itr;</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//                 itr ++;</span></span><br><span class="line"><span class="comment">//                 window[itr] = window[itr-1] - stones[i-K] + stones[i];</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             else window[itr] += stones[i];</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         if (min &gt; window[itr])&#123;</span></span><br><span class="line"><span class="comment">//             min = window[itr];</span></span><br><span class="line"><span class="comment">//             index= itr;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         int newLen = stones.length - K + 1;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         int[] newS = new int[newLen];</span></span><br><span class="line"><span class="comment">//         int j = 0;</span></span><br><span class="line"><span class="comment">//         for (int i = 0; i &lt; stones.length; i++)&#123;</span></span><br><span class="line"><span class="comment">//             if (i == index) newS[j] = min;</span></span><br><span class="line"><span class="comment">//             else if (i&gt; index &amp;&amp; i &lt; index + K) continue;</span></span><br><span class="line"><span class="comment">//             else &#123;</span></span><br><span class="line"><span class="comment">//                 newS[j] = stones[i];</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             j++;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         int get;</span></span><br><span class="line"><span class="comment">//         if (newLen == 1) return newS[0]; </span></span><br><span class="line"><span class="comment">//         else get = mergeStones(newS, K);</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         if (get == -1) return -1;</span></span><br><span class="line"><span class="comment">//         return get + min;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1007-minimumDominoRotationsForEqualRow</title>
    <url>/2020/04/07/Leetcode1007-minimumDominoRotationsForEqualRow/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>In a row of dominoes, A[i] and B[i] represent the top and bottom halves of the i-th domino.  (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)</p>
<p>We may rotate the i-th domino, so that A[i] and B[i] swap values.</p>
<p>Return the minimum number of rotations so that all the values in A are the same, or all the values in B are the same.</p>
<p>If it cannot be done, return -1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2019/03/08/domino.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A &#x3D; [2,1,2,4,2,2], B &#x3D; [5,2,6,2,3,2]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: </span><br><span class="line">The first figure represents the dominoes as given by A and B: before we do any rotations.</span><br><span class="line">If we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A &#x3D; [3,5,1,2,3], B &#x3D; [3,6,3,3,4]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: </span><br><span class="line">In this case, it is not possible to rotate the dominoes to make one row of values equal.</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>1 &lt;= A[i], B[i] &lt;= 6</li>
<li>2 &lt;= A.length == B.length &lt;= 20000</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDominoRotations</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (A[j] != i &amp;&amp; B[j] != i)&#123;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> numa = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> numb = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; A.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (A[j] != i) numa++;</span><br><span class="line">                <span class="keyword">if</span> (B[j] != i) numb++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Math.min(numa, numb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Array</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode101-symmetricTree</title>
    <url>/2020/02/10/Leetcode101-symmetricTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).</p>
<p>For example, this binary tree [1,2,2,3,4,4,3] is symmetric:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   2</span><br><span class="line"> &#x2F; \ &#x2F; \</span><br><span class="line">3  4 4  3</span><br></pre></td></tr></table></figure></p>
<p>But the following [1,2,2,null,3,null,3] is not:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  1</span><br><span class="line"> &#x2F; \</span><br><span class="line">2   2</span><br><span class="line"> \   \</span><br><span class="line"> 3    3</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(TreeNode left, TreeNode right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="keyword">null</span> || right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (left.val != right.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(left.left, right.right) &amp;&amp; helper(left.right, right.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1029-twoCityScheduling</title>
    <url>/2020/03/01/Leetcode1029-twoCityScheduling/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are 2N people a company is planning to interview. The cost of flying the i-th person to city A is costs[i][0], and the cost of flying the i-th person to city B is costs[i][1].</p>
<p>Return the minimum cost to fly every person to a city such that exactly N people arrive in each city.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[10,20],[30,200],[400,50],[30,20]]</span><br><span class="line">Output: 110</span><br><span class="line">Explanation: </span><br><span class="line">The first person goes to city A for a cost of 10.</span><br><span class="line">The second person goes to city A for a cost of 30.</span><br><span class="line">The third person goes to city B for a cost of 50.</span><br><span class="line">The fourth person goes to city B for a cost of 20.</span><br><span class="line"></span><br><span class="line">The total minimum cost is 10 + 30 + 50 + 20 &#x3D; 110 to have half the people interviewing in each city.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= costs.length &lt;= 100</li>
<li>It is guaranteed that costs.length is even.</li>
<li>1 &lt;= costs[i][0], costs[i][1] &lt;= 1000</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: DP</strong></p>
<p>$O(n^2)$, not the best</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// dp[i][j] represents the cost when considering first (i + j) people in which i people assigned to city A and j people assigned to city B.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">twoCitySchedCost</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = costs.length / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + costs[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>] + costs[j - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j] + costs[i + j - <span class="number">1</span>][<span class="number">0</span>], dp[i][j - <span class="number">1</span>] + costs[i + j - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> dp[n][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2: Greedy</strong></p>
<p>O(NlogN)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;    </span><br><span class="line">    <span class="comment">// Greedy. If the dist to B is much longer than the dist to A, now the dif of dist to A and B could be very small and &lt; 0. Therefore, we should assign these interviewees to A instead of B. So we sort the array by the difference of dist in ascending order and the first half are the interviewees assigned to A.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">twoCitySchedCost</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(costs, <span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a[<span class="number">0</span>] - a[<span class="number">1</span>]) - (b[<span class="number">0</span>] - b[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; costs.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; costs.length/<span class="number">2</span>)</span><br><span class="line">                res += costs[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> res += costs[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Greedy</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode102-binaryTreeLevelOrderTraversal</title>
    <url>/2019/09/14/Leetcode102-binaryTreeLevelOrderTraversal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given binary tree [3,9,20,null,null,15,7],</span><br><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br><span class="line">return its level order traversal as:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode node, <span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.size() &lt;= level) res.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        res.get(level).add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) traversal(node.left, level + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) traversal(node.right, level + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        traversal(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
        <tag>Preorder</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode103-binaryTreeZigZagLevelOrderTraversal</title>
    <url>/2019/10/06/Leetcode103-binaryTreeZigZagLevelOrderTraversal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">For example:</span><br><span class="line">Given binary tree [3,9,20,null,null,15,7],</span><br><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br><span class="line">return its zigzag level order traversal as:</span><br><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [20,9],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        traversal(root, res, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode node, List&lt;List&lt;Integer&gt;&gt; res, <span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.size() &lt;= level) res.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (level % <span class="number">2</span> == <span class="number">0</span>) res.get(level).add(node.val);</span><br><span class="line">        <span class="keyword">else</span> res.get(level).add(<span class="number">0</span>, node.val);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) traversal(node.left, res, level+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) traversal(node.right, res, level+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode104-maximumDepthOfBinaryTree</title>
    <url>/2019/10/11/Leetcode104-maximumDepthOfBinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, find its maximum depth.</p>
<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
<p><strong>Note</strong>: A leaf is a node with no children.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given binary tree [3,9,20,null,null,15,7],</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br><span class="line">return its depth &#x3D; 3.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(maxDepth(root.left), maxDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1047-removeAllAdjacentDuplicatesInString</title>
    <url>/2020/03/02/Leetcode1047-removeAllAdjacentDuplicatesInString/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.</p>
<p>We repeatedly make duplicate removals on S until we no longer can.</p>
<p>Return the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;abbaca&quot;</span><br><span class="line">Output: &quot;ca&quot;</span><br><span class="line">Explanation: </span><br><span class="line">For example, in &quot;abbaca&quot; we could remove &quot;bb&quot; since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is &quot;aaca&quot;, of which only &quot;aa&quot; is possible, so the final string is &quot;ca&quot;.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= S.length &lt;= 20000</li>
<li>S consists only of English lowercase letters.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: Basic method, used Stack, O(N), 24ms</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//     Used Stack, with reverse(), O(N), 24ms</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeDuplicates</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (S == <span class="keyword">null</span> || S.length() == <span class="number">0</span>) <span class="keyword">return</span> S;</span><br><span class="line">        </span><br><span class="line">        Stack&lt;Character&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : S.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span> (!st.isEmpty() &amp;&amp; st.peek() == ch)</span><br><span class="line">                st.pop();</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                st.push(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(!st.isEmpty())</span><br><span class="line">            res.append(st.pop());</span><br><span class="line">        <span class="keyword">return</span> res.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 2: Improved, used Deque, O(N), 11ms</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//     Used Deque, O(N), 11ms</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeDuplicates</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        Deque&lt;Character&gt; dq = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : S.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dq.isEmpty() &amp;&amp; dq.peekLast() == c) &#123; </span><br><span class="line">                dq.pollLast();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                dq.offer(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : dq) &#123; sb.append(c); &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 3: The actual most fastest. Two pointers. O(N), 3ms</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//     Two pointers, O(N), 3ms</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeDuplicates</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, n = s.length();</span><br><span class="line">        <span class="keyword">char</span>[] res = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++, i++) &#123;</span><br><span class="line">            res[i] = res[j];</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; res[i - <span class="number">1</span>] == res[i]) <span class="comment">// count = 2</span></span><br><span class="line">                i -= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(res, <span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode105-constructBinaryTreeFromPreorderAndInorderTraversal</title>
    <url>/2020/02/08/Leetcode105-constructBinaryTreeFromPreorderAndInorderTraversal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p>
<p><strong>Note:</strong><br>You may assume that duplicates do not exist in the tree.</p>
<p>For example, given<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">preorder &#x3D; [3,9,20,15,7]</span><br><span class="line">inorder &#x3D; [9,3,15,20,7]</span><br></pre></td></tr></table></figure></p>
<p>Return the following binary tree:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Basic solution, but could be faster<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">0</span>, <span class="number">0</span>, inorder.length - <span class="number">1</span>, preorder, inorder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span> prestart, <span class="keyword">int</span> instart, <span class="keyword">int</span> inend, <span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prestart &gt; preorder.length - <span class="number">1</span> || instart &gt; inend)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(preorder[prestart]);</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = instart; i &lt;= inend; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i] == root.val)&#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        root.left = helper(prestart + <span class="number">1</span>, instart, index - <span class="number">1</span>, preorder, inorder);</span><br><span class="line">        root.right = helper(prestart + index - instart + <span class="number">1</span>, index + <span class="number">1</span>, inend, preorder, inorder);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Used HasMap, faster<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inorder.length; i++)</span><br><span class="line">            map.put(inorder[i], i);</span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">0</span>, preorder.length - <span class="number">1</span>, <span class="number">0</span>, inorder.length-<span class="number">1</span>, preorder, inorder, map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span> prestart, <span class="keyword">int</span> preend, <span class="keyword">int</span> instart, <span class="keyword">int</span> inend, <span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder, HashMap&lt;Integer, Integer&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prestart &gt; preend || instart &gt; inend)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(preorder[prestart]);</span><br><span class="line">        <span class="keyword">int</span> index = map.get(root.val);</span><br><span class="line">        root.left = helper(prestart + <span class="number">1</span>, prestart + index - instart, instart, index - <span class="number">1</span>, preorder, inorder, map);</span><br><span class="line">        root.right = helper(prestart + index - instart + <span class="number">1</span>, preend, index + <span class="number">1</span>, inend, preorder, inorder, map);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1057-campusBikes</title>
    <url>/2019/11/04/Leetcode1057-campusBikes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>On a campus represented as a 2D grid, there are N workers and M bikes, with N &lt;= M. Each worker and bike is a 2D coordinate on this grid.</p>
<p>Our goal is to assign a bike to each worker. Among the available bikes and workers, we choose the (worker, bike) pair with the shortest Manhattan distance between each other, and assign the bike to that worker. (If there are multiple (worker, bike) pairs with the same shortest Manhattan distance, we choose the pair with the smallest worker index; if there are multiple ways to do that, we choose the pair with the smallest bike index). We repeat this process until there are no available workers.</p>
<p>The Manhattan distance between two points p1 and p2 is Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|.</p>
<p>Return a vector ans of length N, where ans[i] is the index (0-indexed) of the bike that the i-th worker is assigned to.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2019/03/06/1261_example_1_v2.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: workers &#x3D; [[0,0],[2,1]], bikes &#x3D; [[1,2],[3,3]]</span><br><span class="line">Output: [1,0]</span><br><span class="line">Explanation: </span><br><span class="line">Worker 1 grabs Bike 0 as they are closest (without ties), and Worker 0 is assigned Bike 1. So the output is [1, 0].</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong><br><img src="https://assets.leetcode.com/uploads/2019/03/06/1261_example_2_v2.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: workers &#x3D; [[0,0],[1,1],[2,0]], bikes &#x3D; [[1,0],[2,2],[2,1]]</span><br><span class="line">Output: [0,2,1]</span><br><span class="line">Explanation: </span><br><span class="line">Worker 0 grabs Bike 0 at first. Worker 1 and Worker 2 share the same distance to Bike 2, thus Worker 1 is assigned to Bike 2, and Worker 2 will take Bike 1. So the output is [0,2,1].</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>0 &lt;= workers[i][j], bikes[i][j] &lt; 1000</li>
<li>All worker and bike locations are distinct.</li>
<li>1 &lt;= workers.length &lt;= bikes.length &lt;= 1000</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Method 1: Priority Queue, O(MNlog(MN)), not the best<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pair</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> worker;</span><br><span class="line">        <span class="keyword">int</span> bike;</span><br><span class="line">        <span class="keyword">int</span> dist;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> b, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">            worker = w;</span><br><span class="line">            bike = b;</span><br><span class="line">            dist = d;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] assignBikes(<span class="keyword">int</span>[][] workers, <span class="keyword">int</span>[][] bikes) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[workers.length];</span><br><span class="line">        PriorityQueue&lt;Pair&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Pair&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Pair a, Pair b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">int</span> da = a.dist;</span><br><span class="line">                <span class="keyword">int</span> db = b.dist;</span><br><span class="line">                <span class="keyword">if</span> (da != db) <span class="keyword">return</span> da - db;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (a.worker != b.worker) <span class="keyword">return</span> a.worker - b.worker;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> a.bike - b.bike;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        HashSet&lt;Integer&gt; workerSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        HashSet&lt;Integer&gt; bikesSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; workers.length; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bikes.length; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> dist = Math.abs(workers[i][<span class="number">0</span>] - bikes[j][<span class="number">0</span>]) + Math.abs(workers[i][<span class="number">1</span>] - bikes[j][<span class="number">1</span>]);</span><br><span class="line">                pq.offer(<span class="keyword">new</span> Pair(i, j, dist));</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">while</span>(bikesSet.size() &lt; workers.length)&#123;</span><br><span class="line">            Pair tmp = pq.poll();</span><br><span class="line">            <span class="keyword">if</span> (!workerSet.contains(tmp.worker) &amp;&amp; !bikesSet.contains(tmp.bike))&#123;</span><br><span class="line">                workerSet.add(tmp.worker);</span><br><span class="line">                bikesSet.add(tmp.bike);</span><br><span class="line">                res[tmp.worker] = tmp.bike;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Method 2: count sorting, O(MN)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span>[] assignBikes(<span class="keyword">int</span>[][] workers, <span class="keyword">int</span>[][] bikes) &#123;</span><br><span class="line">        <span class="comment">// Notice that the Manhattan distance is between 0 and 2000, </span></span><br><span class="line">        <span class="comment">// which means we can sort easily without even using priority queue</span></span><br><span class="line">        <span class="keyword">int</span> w = workers.length, b = bikes.length;</span><br><span class="line">        <span class="keyword">int</span>[] wo = <span class="keyword">new</span> <span class="keyword">int</span>[w], bi = <span class="keyword">new</span> <span class="keyword">int</span>[b];</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt;[] dists = <span class="keyword">new</span> List[<span class="number">2001</span>];</span><br><span class="line">        Arrays.fill(wo, -<span class="number">1</span>);</span><br><span class="line">        Arrays.fill(bi, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span>[] worker = workers[i];</span><br><span class="line">                <span class="keyword">int</span>[] bike = bikes[j];</span><br><span class="line">                <span class="keyword">int</span> dist = Math.abs(worker[<span class="number">0</span>] - bike[<span class="number">0</span>]) + Math.abs(worker[<span class="number">1</span>] - bike[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (dists[dist] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    dists[dist] = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">int</span>[]&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">                dists[dist].add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> assigned = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2000</span> &amp;&amp; assigned &lt; w; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dists[i] == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] pair : dists[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (wo[pair[<span class="number">0</span>]] == -<span class="number">1</span> &amp;&amp; bi[pair[<span class="number">1</span>]] == -<span class="number">1</span>) &#123;</span><br><span class="line">                    wo[pair[<span class="number">0</span>]] = pair[<span class="number">1</span>];</span><br><span class="line">                    bi[pair[<span class="number">1</span>]] = pair[<span class="number">0</span>];</span><br><span class="line">                    assigned++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Greedy</tag>
        <tag>Sort</tag>
        <tag>Priority Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1060-missingElementinSortedArray</title>
    <url>/2020/03/01/Leetcode1060-missingElementinSortedArray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a sorted array A of unique numbers, find the K-th missing number starting from the leftmost number of the array.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A &#x3D; [4,7,9,10], K &#x3D; 1</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: </span><br><span class="line">The first missing number is 5.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A &#x3D; [4,7,9,10], K &#x3D; 3</span><br><span class="line">Output: 8</span><br><span class="line">Explanation: </span><br><span class="line">The missing numbers are [5,6,8,...], hence the third missing number is 8.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A &#x3D; [1,2,4], K &#x3D; 3</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: </span><br><span class="line">The missing numbers are [3,5,6,7,...], hence the third missing number is 6.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Let missingNum be the number of missing number in the array. Two cases that need to be handled:</p>
<p>missingNum &lt; k, then return nums[n - 1] + k - missingNum<br>missingNum &gt;= k, then use binary search(during the search k will be updated) to find the index in the array, where the kth missing number will be located in (nums[index], nums[index + 1]), return nums[index] + k<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> h = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> missingNum = nums[n - <span class="number">1</span>] - nums[<span class="number">0</span>] - (n - <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (missingNum &lt; k)</span><br><span class="line">            <span class="keyword">return</span> nums[n - <span class="number">1</span>] + k - missingNum;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(l &lt; h - <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (h + l)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> missingN = nums[mid] - nums[l] - (mid - l);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (missingN &gt;= k)&#123;</span><br><span class="line">                <span class="comment">// when the number is larger than k, then the index won't be located in (m, h]</span></span><br><span class="line">                h = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// when the number is smaller than k, then the index won't be located in [l, m), update k -= missing</span></span><br><span class="line">                k -= missingN;</span><br><span class="line">                l = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[l] + k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1081-smallestSubsequenceOfDistinctCharacters</title>
    <url>/2020/03/16/Leetcode1081-smallestSubsequenceOfDistinctCharacters/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Return the lexicographically smallest subsequence of text that contains all the distinct characters of text exactly once.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;cdadabcc&quot;</span><br><span class="line">Output: &quot;adbc&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;abcd&quot;</span><br><span class="line">Output: &quot;abcd&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;ecbacba&quot;</span><br><span class="line">Output: &quot;eacb&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;leetcode&quot;</span><br><span class="line">Output: &quot;letcod&quot;</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ol>
<li>1 &lt;= text.length &lt;= 1000</li>
<li>text consists of lowercase English letters.</li>
</ol>
<p><strong>Note:</strong> This question is the same as 316: <a href="https://leetcode.com/problems/remove-duplicate-letters/" target="_blank" rel="noopener">https://leetcode.com/problems/remove-duplicate-letters/</a></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">smallestSubsequence</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt;= <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        Stack&lt;Character&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();    </span><br><span class="line">        <span class="keyword">int</span>[] set = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];   <span class="comment">//record if stack has the character</span></span><br><span class="line">        <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];   <span class="comment">//record the number of characters remaining</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: s.toCharArray())&#123;</span><br><span class="line">            map[ch]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span> (set[ch] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                map[ch]--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!st.isEmpty() &amp;&amp; ch &lt; st.peek() &amp;&amp; map[st.peek()] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                set[st.pop()] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            st.push(ch);</span><br><span class="line">            set[ch] = <span class="number">1</span>;</span><br><span class="line">            map[ch]--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(!st.isEmpty())</span><br><span class="line">            res.append(st.pop());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode108-convertSortedArrayToBinarySearchTree</title>
    <url>/2020/02/24/Leetcode108-convertSortedArrayToBinarySearchTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p>
<p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given the sorted array: [-10,-3,0,5,9],</span><br><span class="line"></span><br><span class="line">One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:</span><br><span class="line"></span><br><span class="line">      0</span><br><span class="line">     &#x2F; \</span><br><span class="line">   -3   9</span><br><span class="line">   &#x2F;   &#x2F;</span><br><span class="line"> -10  5</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        TreeNode node = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">        node.left = helper(nums, left, mid - <span class="number">1</span>);</span><br><span class="line">        node.right = helper(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1092-shortestCommonSupersequence</title>
    <url>/2020/02/22/Leetcode1092-shortestCommonSupersequence/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences.  If multiple answers exist, you may return any of them.</p>
<p>(A string S is a subsequence of string T if deleting some number of characters from T (possibly 0, and the characters are chosen anywhere from T) results in the string S.)</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: str1 &#x3D; &quot;abac&quot;, str2 &#x3D; &quot;cab&quot;</span><br><span class="line">Output: &quot;cabac&quot;</span><br><span class="line">Explanation: </span><br><span class="line">str1 &#x3D; &quot;abac&quot; is a subsequence of &quot;cabac&quot; because we can delete the first &quot;c&quot;.</span><br><span class="line">str2 &#x3D; &quot;cab&quot; is a subsequence of &quot;cabac&quot; because we can delete the last &quot;ac&quot;.</span><br><span class="line">The answer provided is the shortest such string that satisfies these properties.</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>1 &lt;= str1.length, str2.length &lt;= 1000</li>
<li>str1 and str2 consist of lowercase English letters.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">shortestCommonSupersequence</span><span class="params">(String str1, String str2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[str1.length() + <span class="number">1</span>][str2.length() + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= str1.length(); i++) dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= str2.length(); j++) dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= str1.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= str2.length(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (str1.charAt(i - <span class="number">1</span>) == str2.charAt(j - <span class="number">1</span>))</span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> minimum = dp[str1.length()][str2.length()];</span><br><span class="line">        <span class="keyword">int</span> i = str1.length();</span><br><span class="line">        <span class="keyword">int</span> j = str2.length();</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &gt; <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str1.charAt(i - <span class="number">1</span>) == str2.charAt(j - <span class="number">1</span>))&#123;</span><br><span class="line">                res = str1.charAt(i - <span class="number">1</span>) + res;</span><br><span class="line">                i--;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (dp[i-<span class="number">1</span>][j] &lt; dp[i][j-<span class="number">1</span>])&#123;</span><br><span class="line">                res = str1.charAt(i - <span class="number">1</span>) + res;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                res = str2.charAt(j - <span class="number">1</span>) + res;</span><br><span class="line">                j--;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            res = str1.charAt(i - <span class="number">1</span>) + res;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            res = str2.charAt(j - <span class="number">1</span>) + res;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode110-balancedBianryTree</title>
    <url>/2019/11/16/Leetcode110-balancedBianryTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, determine if it is height-balanced.</p>
<p>For this problem, a height-balanced binary tree is defined as:</p>
<p>a binary tree in which the left and right subtrees of every node differ in height by no more than 1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1</strong>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given the following tree [3,9,20,null,null,15,7]:</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br></pre></td></tr></table></figure><br>Return true.</p>
<p><strong>Example 2</strong>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given the following tree [1,2,2,3,3,null,null,4,4]:</span><br><span class="line"></span><br><span class="line">       1</span><br><span class="line">      &#x2F; \</span><br><span class="line">     2   2</span><br><span class="line">    &#x2F; \</span><br><span class="line">   3   3</span><br><span class="line">  &#x2F; \</span><br><span class="line"> 4   4</span><br></pre></td></tr></table></figure><br>Return false.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// traver tree</span></span><br><span class="line">    <span class="comment">// public boolean isBalanced(TreeNode root) &#123;</span></span><br><span class="line">    <span class="comment">//     if (root == null) return true;</span></span><br><span class="line">    <span class="comment">//     int left = height(root.left);</span></span><br><span class="line">    <span class="comment">//     int right = height(root.right);</span></span><br><span class="line">    <span class="comment">//     if (Math.abs(left - right) &gt; 1) return false;</span></span><br><span class="line">    <span class="comment">//     return isBalanced(root.left) &amp;&amp; isBalanced(root.right);      </span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// private int height(TreeNode node)&#123;</span></span><br><span class="line">    <span class="comment">//     if (node == null) return 0;</span></span><br><span class="line">    <span class="comment">//     int left = height(node.left);</span></span><br><span class="line">    <span class="comment">//     int right = height(node.right);</span></span><br><span class="line">    <span class="comment">//     return Math.max(left, right) + 1;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// Based on DFS     </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> dfs(root) != -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = dfs(node.left);</span><br><span class="line">        <span class="keyword">if</span> (left == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = dfs(node.right);</span><br><span class="line">        <span class="keyword">if</span> (right == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (Math.abs(left - right) &gt; <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(left, right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Microsoft</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1088-confusingNumberII</title>
    <url>/2020/04/07/Leetcode1088-confusingNumberII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We can rotate digits by 180 degrees to form new digits. When 0, 1, 6, 8, 9 are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. When 2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid.</p>
<p>A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.(Note that the rotated number can be greater than the original number.)</p>
<p>Given a positive integer N, return the number of confusing numbers between 1 and N inclusive.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 20</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: </span><br><span class="line">The confusing numbers are [6,9,10,16,18,19].</span><br><span class="line">6 converts to 9.</span><br><span class="line">9 converts to 6.</span><br><span class="line">10 converts to 01 which is just 1.</span><br><span class="line">16 converts to 91.</span><br><span class="line">18 converts to 81.</span><br><span class="line">19 converts to 61.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 100</span><br><span class="line">Output: 19</span><br><span class="line">Explanation: </span><br><span class="line">The confusing numbers are [6,9,10,16,18,19,60,61,66,68,80,81,86,89,90,91,98,99,100].</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<p>1 &lt;= N &lt;= 10^9</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">confusingNumberII</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        map.put(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="number">6</span>, <span class="number">9</span>);</span><br><span class="line">        map.put(<span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">        map.put(<span class="number">9</span>, <span class="number">6</span>);</span><br><span class="line">        </span><br><span class="line">        helper(<span class="number">0</span>, <span class="number">0</span>, N);</span><br><span class="line">        <span class="keyword">return</span> N == <span class="number">1000000000</span> ? res + <span class="number">1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cur, <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (idx &gt; <span class="number">9</span> || cur &gt; N)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (isConfused(cur))</span><br><span class="line">            res++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> number: map.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span> (idx == <span class="number">0</span> &amp;&amp; number == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            helper(idx + <span class="number">1</span>, cur * <span class="number">10</span> + number, N);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isConfused</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> rot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = x;</span><br><span class="line">        <span class="keyword">while</span>(x &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            rot = rot * <span class="number">10</span> + map.get(x % <span class="number">10</span>);</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rot != temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1105-fillingBookcaseShelves</title>
    <url>/2020/03/28/Leetcode1105-fillingBookcaseShelves/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We have a sequence of books: the i-th book has thickness books[i][0] and height books[i][1].</p>
<p>We want to place these books in order onto bookcase shelves that have total width shelf_width.</p>
<p>We choose some of the books to place on this shelf (such that the sum of their thickness is &lt;= shelf_width), then build another level of shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down.  We repeat this process until there are no more books to place.</p>
<p>Note again that at each step of the above process, the order of the books we place is the same order as the given sequence of books.  For example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.</p>
<p>Return the minimum possible height that the total bookshelf can be after placing shelves in this manner.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><img src="https://assets.leetcode.com/uploads/2019/06/24/shelves.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: books &#x3D; [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width &#x3D; 4</span><br><span class="line">Output: 6</span><br><span class="line">Explanation:</span><br><span class="line">The sum of the heights of the 3 shelves are 1 + 3 + 2 &#x3D; 6.</span><br><span class="line">Notice that book number 2 does not have to be on the first shelf.</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= books.length &lt;= 1000</li>
<li>1 &lt;= books[i][0] &lt;= shelf_width &lt;= 1000</li>
<li>1 &lt;= books[i][1] &lt;= 1000</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p> dp[i]: the min height for placing first books i - 1 on shelves</p>
<p> For dp[i+1],</p>
<p> either place book i on a new shelve =&gt; dp[i] + height[i], or grab previous books together with book i and move to next level together, utlitzing the sub problem dp[j] =&gt; min(dp[j] + max(height[j+1] .. height[i])), where sum(width[j+1] + … + sum(width[i]) &lt;= shelve_width</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minHeightShelves</span><span class="params">(<span class="keyword">int</span>[][] books, <span class="keyword">int</span> shelf_width)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[books.length + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= books.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> width = books[i-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> height = books[i-<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>] + height;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (width + books[j-<span class="number">1</span>][<span class="number">0</span>] &gt; shelf_width) <span class="keyword">break</span>;</span><br><span class="line">                height = Math.max(height, books[j-<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">                width += books[j-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">                dp[i] = Math.min(dp[i], dp[j-<span class="number">1</span>] + height);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[books.length];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode111-minimumDepthOfBinaryTree</title>
    <url>/2020/02/10/Leetcode111-minimumDepthOfBinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, find its minimum depth.</p>
<p>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>
<p>Note: A leaf is a node with no children.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Given binary tree [3,9,20,null,null,15,7],<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><br>return its minimum depth = 2.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(root, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode node, <span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>) <span class="keyword">return</span> depth;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span> &amp;&amp; node.right != <span class="keyword">null</span>) </span><br><span class="line">            <span class="keyword">return</span> Math.min(helper(node.left, depth + <span class="number">1</span>), helper(node.right, depth + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (node.left == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> helper(node.right, depth + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> helper(node.left, depth + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1110-deleteNodesAndReturnForest</title>
    <url>/2020/04/07/Leetcode1110-deleteNodesAndReturnForest/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the root of a binary tree, each node in the tree has a distinct value.</p>
<p>After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).</p>
<p>Return the roots of the trees in the remaining forest.  You may return the result in any order.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><img src="https://assets.leetcode.com/uploads/2019/07/01/screen-shot-2019-07-01-at-53836-pm.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [1,2,3,4,5,6,7], to_delete &#x3D; [3,5]</span><br><span class="line">Output: [[1,2,null,4],[6],[7]]</span><br></pre></td></tr></table></figure><br><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the given tree is at most 1000.</li>
<li>Each node has a distinct value between 1 and 1000.</li>
<li>to_delete.length &lt;= 1000</li>
<li>to_delete contains distinct values between 1 and 1000.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">delNodes</span><span class="params">(TreeNode root, <span class="keyword">int</span>[] to_delete)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: to_delete)</span><br><span class="line">            set.add(num);</span><br><span class="line">        List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line">        helper(root, res, set, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">helper</span><span class="params">(TreeNode node, List&lt;TreeNode&gt; res, HashSet&lt;Integer&gt; set, <span class="keyword">boolean</span> isRoot)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isDeleted = set.contains(node.val);</span><br><span class="line">        <span class="keyword">if</span> (isRoot &amp;&amp; !isDeleted) res.add(node);</span><br><span class="line">        node.left = helper(node.left, res, set, isDeleted);</span><br><span class="line">        node.right = helper(node.right, res, set, isDeleted);</span><br><span class="line">        <span class="keyword">return</span> isDeleted ? <span class="keyword">null</span> : node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>DFS</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode112-pathSum</title>
    <url>/2020/01/27/Leetcode112-pathSum/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.</p>
<p>Note: A leaf is a node with no children.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Given the below binary tree and sum = 22,<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      5</span><br><span class="line">     &#x2F; \</span><br><span class="line">    4   8</span><br><span class="line">   &#x2F;   &#x2F; \</span><br><span class="line">  11  13  4</span><br><span class="line"> &#x2F;  \      \</span><br><span class="line">7    2      1</span><br></pre></td></tr></table></figure><br>return true, as there exist a root-to-leaf path 5-&gt;4-&gt;11-&gt;2 which sum is 22.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> dfs(root, sum, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(TreeNode node, <span class="keyword">int</span> sum, <span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        cur += node.val;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur == sum) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dfs(node.left, sum, cur) || dfs(node.right, sum, cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1099-twoSumLessThanK</title>
    <url>/2019/10/08/Leetcode1099-twoSumLessThanK/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array A of integers and integer K, return the maximum S such that there exists i &lt; j with A[i] + A[j] = S and S &lt; K. If no i, j exist satisfying this equation, return -1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A &#x3D; [34,23,1,24,75,33,54,8], K &#x3D; 60</span><br><span class="line">Output: 58</span><br><span class="line">Explanation: </span><br><span class="line">We can use 34 and 24 to sum 58 which is less than 60.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A &#x3D; [10,20,30], K &#x3D; 15</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: </span><br><span class="line">In this case it&#39;s not possible to get a pair sum less that 15.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">twoSumLessThanK</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (A == <span class="keyword">null</span> || A.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(A);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = A.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] + A[j] &gt;= K)&#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                res = Math.max(res, A[i] + A[j]);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res == Integer.MIN_VALUE) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// class Solution &#123;</span></span><br><span class="line"><span class="comment">//     public int twoSumLessThanK(int[] A, int K) &#123;</span></span><br><span class="line"><span class="comment">//         TreeSet&lt;Integer&gt; set = new TreeSet&lt;&gt;();</span></span><br><span class="line"><span class="comment">//         int res = -1;</span></span><br><span class="line"><span class="comment">//         for (int a : A) &#123;</span></span><br><span class="line"><span class="comment">//             Integer pre = set.lower(K - a);</span></span><br><span class="line"><span class="comment">//             if (pre != null) &#123;</span></span><br><span class="line"><span class="comment">//                 res = Math.max(res, a + pre);</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             set.add(a);</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return res;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Amazon</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode113-pathSumII</title>
    <url>/2020/02/10/Leetcode113-pathSumII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree and a sum, find all root-to-leaf paths where each path’s sum equals the given sum.</p>
<p><strong>Note:</strong> A leaf is a node with no children.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Given the below binary tree and sum = 22,<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      5</span><br><span class="line">     &#x2F; \</span><br><span class="line">    4   8</span><br><span class="line">   &#x2F;   &#x2F; \</span><br><span class="line">  11  13  4</span><br><span class="line"> &#x2F;  \    &#x2F; \</span><br><span class="line">7    2  5   1</span><br></pre></td></tr></table></figure><br>Return:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">   [5,4,11,2],</span><br><span class="line">   [5,8,4,5]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> sum) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        helper(root, sum, res, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode node, <span class="keyword">int</span> target, List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; cur, <span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">        cur.add(node.val);</span><br><span class="line">        sum += node.val;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span> &amp;&amp; sum == target)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(cur));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println(cur + ", " + sum);</span></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            helper(node.left, target, res, cur, sum);</span><br><span class="line">            cur.remove(cur.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            helper(node.right, target, res, cur, sum);</span><br><span class="line">            cur.remove(cur.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode114-flattenBinaryTreeToLinkedList</title>
    <url>/2020/02/10/Leetcode114-flattenBinaryTreeToLinkedList/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, flatten it to a linked list in-place.</p>
<p>For example, given the following tree:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   5</span><br><span class="line"> &#x2F; \   \</span><br><span class="line">3   4   6</span><br></pre></td></tr></table></figure><br>The flattened tree should look like:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line">   \</span><br><span class="line">    3</span><br><span class="line">     \</span><br><span class="line">      4</span><br><span class="line">       \</span><br><span class="line">        5</span><br><span class="line">         \</span><br><span class="line">          6</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1:</strong><br>Just Post traversal, the best<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TreeNode pre = <span class="keyword">null</span>; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        flatten(root.right);</span><br><span class="line">        flatten(root.left);</span><br><span class="line">        root.right = pre;</span><br><span class="line">        root.left = <span class="keyword">null</span>;</span><br><span class="line">        pre = root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 2:</strong><br>Used stack, the idea could be used in other problems.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (root != <span class="keyword">null</span> || !st.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) st.push(root.right);</span><br><span class="line">            <span class="keyword">if</span> (root.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                root.right = root.left;</span><br><span class="line">                root.left = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!st.isEmpty())&#123;</span><br><span class="line">                root.right = st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            root = root.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Stack</tag>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1114-printInOrder</title>
    <url>/2020/03/28/Leetcode1114-printInOrder/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Suppose we have a class:</p>
<p>public class Foo {<br>  public void first() { print(“first”); }<br>  public void second() { print(“second”); }<br>  public void third() { print(“third”); }<br>}<br>The same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output: &quot;firstsecondthird&quot;</span><br><span class="line">Explanation: There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). &quot;firstsecondthird&quot; is the correct output.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,2]</span><br><span class="line">Output: &quot;firstsecondthird&quot;</span><br><span class="line">Explanation: The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). &quot;firstsecondthird&quot; is the correct output.</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">**Note:**</span><br><span class="line"></span><br><span class="line">We do not know how the threads will be scheduled in the operating system, even though the numbers in the input seems to imply the ordering. The input format you see is mainly to ensure our tests&#39; comprehensiveness.</span><br><span class="line"></span><br><span class="line">## Solution</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">import java.util.concurrent.*;</span><br><span class="line">class Foo &#123;</span><br><span class="line">    </span><br><span class="line">    Semaphore run2, run3;</span><br><span class="line">    public Foo() &#123;</span><br><span class="line">        run2 &#x3D; new Semaphore(0);</span><br><span class="line">        run3 &#x3D; new Semaphore(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void first(Runnable printFirst) throws InterruptedException &#123;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; printFirst.run() outputs &quot;first&quot;. Do not change or remove this line.</span><br><span class="line">        printFirst.run();</span><br><span class="line">        run2.release();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void second(Runnable printSecond) throws InterruptedException &#123;</span><br><span class="line">        run2.acquire();</span><br><span class="line">        &#x2F;&#x2F; printSecond.run() outputs &quot;second&quot;. Do not change or remove this line.</span><br><span class="line">        printSecond.run();</span><br><span class="line">        run3.release();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void third(Runnable printThird) throws InterruptedException &#123;</span><br><span class="line">        run3.acquire();</span><br><span class="line">        &#x2F;&#x2F; printThird.run() outputs &quot;third&quot;. Do not change or remove this line.</span><br><span class="line">        printThird.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1143-longestCommonSubsequence</title>
    <url>/2020/02/20/Leetcode1143-longestCommonSubsequence/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings text1 and text2, return the length of their longest common subsequence.</p>
<p>A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, “ace” is a subsequence of “abcde” while “aec” is not). A common subsequence of two strings is a subsequence that is common to both strings.</p>
<p>If there is no common subsequence, return 0.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: text1 &#x3D; &quot;abcde&quot;, text2 &#x3D; &quot;ace&quot; </span><br><span class="line">Output: 3  </span><br><span class="line">Explanation: The longest common subsequence is &quot;ace&quot; and its length is 3.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: text1 &#x3D; &quot;abc&quot;, text2 &#x3D; &quot;abc&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The longest common subsequence is &quot;abc&quot; and its length is 3.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: text1 &#x3D; &quot;abc&quot;, text2 &#x3D; &quot;def&quot;</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: There is no such common subsequence, so the result is 0.</span><br></pre></td></tr></table></figure><br><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= text1.length &lt;= 1000</li>
<li>1 &lt;= text2.length &lt;= 1000</li>
<li>The input strings consist of lowercase English characters only.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1:</strong> DP</p>
<script type="math/tex; mode=display">init: dp[i][0] = dp[0][j] = 0; (0 <= i < s1.length(), 0 <= j < s2.length())</script><script type="math/tex; mode=display">dp[i][j] = dp[i-1][j-1] + 1; (s1[i] = s2[j])</script><script type="math/tex; mode=display">dp[i][j] = max(dp[i-1][j], dp[i][j-1] )</script><script type="math/tex; mode=display">res = dp[s1.length()][s2.length()]</script><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (text1.length() == <span class="number">0</span> || text2.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[text1.length() + <span class="number">1</span>][text2.length() + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= text1.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= text2.length(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (text1.charAt(i-<span class="number">1</span>) == text2.charAt(j-<span class="number">1</span>)) dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[text1.length()][text2.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2:</strong> Recursion with memory<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helper(text1, <span class="number">0</span>, text2, <span class="number">0</span>, <span class="keyword">new</span> <span class="keyword">int</span>[text1.length()][text2.length()]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(String s1, <span class="keyword">int</span> index1, String s2, <span class="keyword">int</span> index2, <span class="keyword">int</span>[][] memory)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index1 &gt;= s1.length() || index2 &gt;= s2.length()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (memory[index1][index2] &gt; <span class="number">0</span>) <span class="keyword">return</span> memory[index1][index2] - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (s1.charAt(index1) == s2.charAt(index2))</span><br><span class="line">            <span class="keyword">return</span> helper(s1, index1 + <span class="number">1</span>, s2, index2 + <span class="number">1</span>, memory) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            memory[index1][index2] = Math.max(helper(s1, index1 + <span class="number">1</span>, s2, index2, memory), helper(s1, index1, s2, index2 + <span class="number">1</span>, memory));</span><br><span class="line">            memory[index1][index2]++;</span><br><span class="line">            <span class="keyword">return</span> memory[index1][index2]-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode115-distinctSubsequences</title>
    <url>/2020/02/22/Leetcode115-distinctSubsequences/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string S and a string T, count the number of distinct subsequences of S which equals T.</p>
<p>A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, “ACE” is a subsequence of “ABCDE” while “AEC” is not).</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: S &#x3D; &quot;rabbbit&quot;, T &#x3D; &quot;rabbit&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">As shown below, there are 3 ways you can generate &quot;rabbit&quot; from S.</span><br><span class="line">(The caret symbol ^ means the chosen letters)</span><br><span class="line"></span><br><span class="line">rabbbit</span><br><span class="line">^^^^ ^^</span><br><span class="line">rabbbit</span><br><span class="line">^^ ^^^^</span><br><span class="line">rabbbit</span><br><span class="line">^^^ ^^^</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: S &#x3D; &quot;babgbag&quot;, T &#x3D; &quot;bag&quot;</span><br><span class="line">Output: 5</span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">As shown below, there are 5 ways you can generate &quot;bag&quot; from S.</span><br><span class="line">(The caret symbol ^ means the chosen letters)</span><br><span class="line"></span><br><span class="line">babgbag</span><br><span class="line">^^ ^</span><br><span class="line">babgbag</span><br><span class="line">^^    ^</span><br><span class="line">babgbag</span><br><span class="line">^    ^^</span><br><span class="line">babgbag</span><br><span class="line">  ^  ^^</span><br><span class="line">babgbag</span><br><span class="line">    ^^^</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>We first keep in mind that s is the longer string [0, i-1], t is the shorter substring [0, j-1]. We can assume t is fixed, and s is increasing in character one by one (this is the key point).</p>
<p>For example:<br>t : ab—&gt; ab —&gt; ab —&gt; ab<br>s: a —&gt; ac —&gt; acb —&gt; acbb</p>
<p>The first case is easy to catch. When the new character in s, s[i-1], is not equal with the head char in t, t[j-1], we can no longer increment the number of distinct subsequences, it is the same as the situation before incrementing the s, so dp[i][j] = dp[i-1][j].</p>
<p>However, when the new incrementing character in s, s[i-1] is equal with t[j-1], which contains two case:</p>
<p>We don’t match those two characters, which means that it still has original number of distinct subsequences, so dp[i][j] = dp[i-1][j].<br>We match those two characters, in this way. dp[i][j] = dp[i-1][j-1];<br>Thus, including both two case, dp[i][j] = dp[i-1][j] + dp[i-1][j-1]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDistinct</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = s.length();</span><br><span class="line">        <span class="keyword">int</span> n = t.length();</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>]; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i-<span class="number">1</span>) == t.charAt(j-<span class="number">1</span>))</span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + dp[i-<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = dp[i-<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1169-invalidTransactions</title>
    <url>/2020/03/01/Leetcode1169-invalidTransactions/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A transaction is possibly invalid if:</p>
<p>the amount exceeds $1000, or;<br>if it occurs within (and including) 60 minutes of another transaction with the same name in a different city.<br>Each transaction string transactions[i] consists of comma separated values representing the name, time (in minutes), amount, and city of the transaction.</p>
<p>Given a list of transactions, return a list of transactions that are possibly invalid.  You may return the answer in any order.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: transactions &#x3D; [&quot;alice,20,800,mtv&quot;,&quot;alice,50,100,beijing&quot;]</span><br><span class="line">Output: [&quot;alice,20,800,mtv&quot;,&quot;alice,50,100,beijing&quot;]</span><br><span class="line">Explanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: transactions &#x3D; [&quot;alice,20,800,mtv&quot;,&quot;alice,50,1200,mtv&quot;]</span><br><span class="line">Output: [&quot;alice,50,1200,mtv&quot;]</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: transactions &#x3D; [&quot;alice,20,800,mtv&quot;,&quot;bob,50,1200,mtv&quot;]</span><br><span class="line">Output: [&quot;bob,50,1200,mtv&quot;]</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>transactions.length &lt;= 1000</li>
<li>Each transactions[i] takes the form “{name},{time},{amount},{city}”</li>
<li>Each {name} and {city} consist of lowercase English letters, and have lengths between 1 and 10.</li>
<li>Each {time} consist of digits, and represent an integer between 0 and 1000.</li>
<li>Each {amount} consist of digits, and represent an integer between 0 and 2000.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="comment">// Key: Name</span></span><br><span class="line"><span class="comment">// Value: List of &#123;time, amount, city&#125;</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// once new transaction come under one name</span></span><br><span class="line"><span class="comment">// check amount first, </span></span><br><span class="line"><span class="comment">// then if in differnt cities, check if time invalid </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define a custmized class to store history imfomation, it can save time of spliting each time</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span></span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">int</span> time;</span><br><span class="line">        String city;</span><br><span class="line">        String trans;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Transaction</span><span class="params">(String name, <span class="keyword">int</span> time, String city, String trans)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.time = time;</span><br><span class="line">            <span class="keyword">this</span>.city = city;</span><br><span class="line">            <span class="keyword">this</span>.trans = trans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">invalidTransactions</span><span class="params">(String[] transactions)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, List&lt;Transaction&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (transactions == <span class="keyword">null</span> || transactions.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        HashSet&lt;String&gt; invalid = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String transaction: transactions)&#123;</span><br><span class="line">            String[] cur = transaction.split(<span class="string">","</span>);</span><br><span class="line">            String name = cur[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> time = Integer.valueOf(cur[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> amount = Integer.valueOf(cur[<span class="number">2</span>]);</span><br><span class="line">            String city = cur[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//             Check if amount invalid</span></span><br><span class="line">            <span class="keyword">if</span> (amount &gt; <span class="number">1000</span>)</span><br><span class="line">                invalid.add(transaction);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(name))</span><br><span class="line">                map.put(name, <span class="keyword">new</span> ArrayList&lt;Transaction&gt;());</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (Transaction history: map.get(name))&#123;</span><br><span class="line"><span class="comment">//                 Check if in different cities</span></span><br><span class="line">                <span class="keyword">if</span> (!history.city.equals(cur[<span class="number">3</span>]))&#123;</span><br><span class="line"><span class="comment">//                     Check if time invalid</span></span><br><span class="line">                    <span class="keyword">if</span> (Math.abs(time - history.time) &lt;= <span class="number">60</span>)&#123;</span><br><span class="line">                        invalid.add(transaction);</span><br><span class="line">                        invalid.add(history.trans);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(name).add(<span class="keyword">new</span> Transaction(name, time, city, transaction));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;(invalid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Bloomberg</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1153-stringTransformsIntoAnotherString</title>
    <url>/2020/04/07/Leetcode1153-stringTransformsIntoAnotherString/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings str1 and str2 of the same length, determine whether you can transform str1 into str2 by doing zero or more conversions.</p>
<p>In one conversion you can convert all occurrences of one character in str1 to any other lowercase English character.</p>
<p>Return true if and only if you can transform str1 into str2.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: str1 &#x3D; &quot;aabcc&quot;, str2 &#x3D; &quot;ccdee&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Convert &#39;c&#39; to &#39;e&#39; then &#39;b&#39; to &#39;d&#39; then &#39;a&#39; to &#39;c&#39;. Note that the order of conversions matter.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: str1 &#x3D; &quot;leetcode&quot;, str2 &#x3D; &quot;codeleet&quot;</span><br><span class="line">Output: false</span><br><span class="line">Explanation: There is no way to transform str1 to str2.</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ol>
<li>1 &lt;= str1.length == str2.length &lt;= 10^4</li>
<li>Both str1 and str2 contain only lowercase English letters.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>此题的对应有以下几个关系:</p>
<ol>
<li>一对一，每一个char互相对应转换即可 a-&gt;b</li>
<li>多对一， aabcc,ccdee, a-&gt;c, c-&gt;e，其实只要有未在target string出现过的char，那么就可以拿来作为temp char桥梁，比如 a-&gt;g-&gt;c这样转换就不会同时影响c-&gt;e的转换</li>
<li>一对多，a-&gt;f, a-&gt;g 这样是绝对不可能的，因为char会被同时影响</li>
</ol>
<p>另外还有一种特殊情况就是，source和target的unique char的数量是一样的时候，如果此时是26个<br>则说明完全不能转换，因为没有extra的temp char作为转换的桥梁<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  there should at least one character that is unused, to use it as the tmp for transformation.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConvert</span><span class="params">(String str1, String str2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str1.equals(str2)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        HashMap&lt;Character, Character&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str1.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.getOrDefault(str1.charAt(i), str2.charAt(i)) != str2.charAt(i))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            map.put(str1.charAt(i), str2.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashSet&lt;&gt;(map.values()).size() &lt; <span class="number">26</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Hash Table</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode116-populatingNextRightPointersInEachNode</title>
    <url>/2020/03/02/Leetcode116-populatingNextRightPointersInEachNode/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>}<br>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.</p>
<p>Initially, all next pointers are set to NULL.</p>
<p><strong>Follow up:</strong></p>
<ul>
<li>You may only use constant extra space.</li>
<li>Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><img src="https://assets.leetcode.com/uploads/2019/02/14/116_sample.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [1,2,3,4,5,6,7]</span><br><span class="line">Output: [1,#,2,3,#,4,5,6,7,#]</span><br><span class="line">Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the given tree is less than 4096.</li>
<li>-1000 &lt;= node.val &lt;= 1000</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: Basic solution</strong></p>
<p>Just used two pointers, one to record each level’s heads, one to traversal nodes in one level.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node left;</span></span><br><span class="line"><span class="comment">    public Node right;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val, Node _left, Node _right, Node _next) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        left = _left;</span></span><br><span class="line"><span class="comment">        right = _right;</span></span><br><span class="line"><span class="comment">        next = _next;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">connect</span><span class="params">(Node root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">        Node head = root;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>)&#123;</span><br><span class="line">            Node cur = head;</span><br><span class="line">            <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (cur.left != <span class="keyword">null</span>) cur.left.next = cur.right;</span><br><span class="line">                <span class="keyword">if</span> (cur.right != <span class="keyword">null</span> &amp;&amp; cur.next != <span class="keyword">null</span>) cur.right.next = cur.next.left;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2: General Solution</strong></p>
<p>As the solution in next probelm. Used three pointers.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node left;</span></span><br><span class="line"><span class="comment">    public Node right;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val, Node _left, Node _right, Node _next) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        left = _left;</span></span><br><span class="line"><span class="comment">        right = _right;</span></span><br><span class="line"><span class="comment">        next = _next;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">connect</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">        Node pre = <span class="keyword">null</span>;</span><br><span class="line">        Node head = <span class="keyword">null</span>;</span><br><span class="line">        Node cur = root;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (cur.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (head == <span class="keyword">null</span>) </span><br><span class="line">                        head = cur.left;</span><br><span class="line">                    <span class="keyword">if</span> (pre != <span class="keyword">null</span>)</span><br><span class="line">                        pre.next = cur.left;</span><br><span class="line">                    pre = cur.left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (head == <span class="keyword">null</span>)</span><br><span class="line">                        head = cur.right;</span><br><span class="line">                    <span class="keyword">if</span> (pre != <span class="keyword">null</span>)</span><br><span class="line">                        pre.next = cur.right;</span><br><span class="line">                    pre = cur.right;</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            cur = head;</span><br><span class="line">            head = <span class="keyword">null</span>;</span><br><span class="line">            pre = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
        <tag>Tree</tag>
        <tag>Iteration</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode117-populatingNextRightPointersInEachNodeII</title>
    <url>/2020/03/02/Leetcode117-populatingNextRightPointersInEachNodeII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.</p>
<p>Initially, all next pointers are set to NULL.</p>
<p><strong>Follow up:</strong></p>
<ul>
<li>You may only use constant extra space.</li>
<li>Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><img src="https://assets.leetcode.com/uploads/2019/02/15/117_sample.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [1,2,3,4,5,null,7]</span><br><span class="line">Output: [1,#,2,3,#,4,5,7,#]</span><br><span class="line">Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the given tree is less than 6000.</li>
<li>-100 &lt;= node.val &lt;= 100</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Used three pointers. One to record each level’s head, one to record the prev node in one level, one to traversal nodes in one level.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node left;</span></span><br><span class="line"><span class="comment">    public Node right;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val, Node _left, Node _right, Node _next) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        left = _left;</span></span><br><span class="line"><span class="comment">        right = _right;</span></span><br><span class="line"><span class="comment">        next = _next;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">connect</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">        Node head = <span class="keyword">null</span>;</span><br><span class="line">        Node pre = <span class="keyword">null</span>;</span><br><span class="line">        Node cur = root;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (cur.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (pre != <span class="keyword">null</span>)</span><br><span class="line">                        pre.next = cur.left;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        head = cur.left;</span><br><span class="line">                    pre = cur.left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (pre != <span class="keyword">null</span>)</span><br><span class="line">                        pre.next = cur.right;</span><br><span class="line">                    <span class="keyword">else</span> </span><br><span class="line">                        head = cur.right;</span><br><span class="line">                    pre = cur.right;</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            cur = head;</span><br><span class="line">            pre = <span class="keyword">null</span>;</span><br><span class="line">            head = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
        <tag>Tree</tag>
        <tag>Iteration</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode119-pascalsTriangleII</title>
    <url>/2019/10/31/Leetcode119-pascalsTriangleII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-negative index k where k ≤ 33, return the kth index row of the Pascal’s triangle.</p>
<p>Note that the row index starts from 0.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt=""><br>In Pascal’s triangle, each number is the sum of the two numbers directly above it.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: [1,3,3,1]</span><br></pre></td></tr></table></figure>
<p><strong>Follow up:</strong></p>
<p>Could you optimize your algorithm to use only O(k) extra space?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        res.add(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (rowIndex == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        res.add(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (rowIndex == <span class="number">1</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= rowIndex; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = res.get(j - <span class="number">1</span>) + res.get(j);</span><br><span class="line">                res.set(j, tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// newLine.add(1);</span></span><br><span class="line">            <span class="comment">// for (int j = 0; j &lt; res.size() - 1; j++)&#123;</span></span><br><span class="line">            <span class="comment">//     newLine.add(res.get(j) + res.get(j + 1));</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">// newLine.add(1);</span></span><br><span class="line">            <span class="comment">// res = newLine;</span></span><br><span class="line">            <span class="comment">// newLine = new ArrayList&lt;Integer&gt;();</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Cerner</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode118-pascalsTriangle</title>
    <url>/2019/10/31/Leetcode118-pascalsTriangle/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-negative integer numRows, generate the first numRows of Pascal’s triangle.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif" alt=""><br>In Pascal’s triangle, each number is the sum of the two numbers directly above it.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 5</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">     [1],</span><br><span class="line">    [1,1],</span><br><span class="line">   [1,2,1],</span><br><span class="line">  [1,3,3,1],</span><br><span class="line"> [1,4,6,4,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        res.get(<span class="number">0</span>).add(<span class="number">1</span>);        </span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        res.get(<span class="number">1</span>).add(<span class="number">1</span>);</span><br><span class="line">        res.get(<span class="number">1</span>).add(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">2</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= numRows; i++)&#123;</span><br><span class="line">            List&lt;Integer&gt; preLine= res.get(i - <span class="number">2</span>);</span><br><span class="line">            List&lt;Integer&gt; newLine = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            newLine.add(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; preLine.size() - <span class="number">1</span>; j++)&#123;</span><br><span class="line">                newLine.add(preLine.get(j) + preLine.get(j + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            newLine.add(<span class="number">1</span>);</span><br><span class="line">            res.add(newLine);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Cerner</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1185-dayOfTheWeek</title>
    <url>/2019/10/22/Leetcode1185-dayOfTheWeek/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a date, return the corresponding day of the week for that date.</p>
<p>The input is given as three integers representing the day, month and year respectively.</p>
<p>Return the answer as one of the following values {“Sunday”, “Monday”, “Tuesday”, “Wednesday”, “Thursday”, “Friday”, “Saturday”}.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: day &#x3D; 31, month &#x3D; 8, year &#x3D; 2019</span><br><span class="line">Output: &quot;Saturday&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: day &#x3D; 18, month &#x3D; 7, year &#x3D; 1999</span><br><span class="line">Output: &quot;Sunday&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: day &#x3D; 15, month &#x3D; 8, year &#x3D; 1993</span><br><span class="line">Output: &quot;Sunday&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//     based on 1971-1-1 is Friday</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dayOfTheWeek</span><span class="params">(<span class="keyword">int</span> day, <span class="keyword">int</span> month, <span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line">        String[] week = <span class="keyword">new</span> String[]&#123;<span class="string">"Sunday"</span>, <span class="string">"Monday"</span>, <span class="string">"Tuesday"</span>, <span class="string">"Wednesday"</span>, <span class="string">"Thursday"</span>, <span class="string">"Friday"</span>, <span class="string">"Saturday"</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] months = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1971</span>; i &lt; year; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> ((i % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">100</span> != <span class="number">0</span>) || i % <span class="number">400</span> == <span class="number">0</span>) num += <span class="number">366</span>; <span class="comment">//leap year</span></span><br><span class="line">            <span class="keyword">else</span> num += <span class="number">365</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((i % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">100</span> != <span class="number">0</span>) || i % <span class="number">400</span> == <span class="number">0</span>) months[<span class="number">1</span>] = <span class="number">29</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; month - <span class="number">1</span>; i++)</span><br><span class="line">            num += months[i];</span><br><span class="line">        num += day - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (week[(num + <span class="number">5</span>) % <span class="number">7</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Microsoft</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1192-criticalConnectionsInANetwork</title>
    <url>/2019/09/22/Leetcode1192-criticalConnectionsInANetwork/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">There are n servers numbered from 0 to n-1 connected by undirected server-to-server connections forming a network where connections[i] &#x3D; [a, b] represents a connection between servers a and b. Any server can reach any other server directly or indirectly through the network.</span><br><span class="line"></span><br><span class="line">A critical connection is a connection that, if removed, will make some server unable to reach some other server.</span><br><span class="line"></span><br><span class="line">Return all critical connections in the network in any order.</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 4, connections &#x3D; [[0,1],[1,2],[2,0],[1,3]]</span><br><span class="line">Output: [[1,3]]</span><br><span class="line">Explanation: [[3,1]] is also accepted.</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Constraints:</span><br><span class="line"></span><br><span class="line">1 &lt;&#x3D; n &lt;&#x3D; 10^5</span><br><span class="line">n-1 &lt;&#x3D; connections.length &lt;&#x3D; 10^5</span><br><span class="line">connections[i][0] !&#x3D; connections[i][1]</span><br><span class="line">There are no repeated connections.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, List&lt;List&lt;Integer&gt;&gt; graph, <span class="keyword">int</span>[] disc, <span class="keyword">int</span>[] low, <span class="keyword">int</span>[] parent, <span class="keyword">boolean</span>[] visited)</span></span>&#123;</span><br><span class="line">        visited[u] = <span class="keyword">true</span>;</span><br><span class="line">        disc[u] = low[u] = ++ time;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : graph.get(u))&#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[v])&#123;</span><br><span class="line">                parent[v] = u;</span><br><span class="line">                dfs(v, graph, disc, low, parent,visited);</span><br><span class="line">                low[u] = Math.min(low[u], low[v]);</span><br><span class="line">                <span class="keyword">if</span> (low[v] &gt; disc[u])&#123;</span><br><span class="line">                    List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    tmp.add(u);</span><br><span class="line">                    tmp.add(v);</span><br><span class="line">                    res.add(tmp);</span><br><span class="line">                &#125;</span><br><span class="line">                    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (v != parent[u])&#123;</span><br><span class="line">                    low[u] = Math.min(low[u], disc[v]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; criticalConnections(<span class="keyword">int</span> n, List&lt;List&lt;Integer&gt;&gt; connections) &#123;</span><br><span class="line">        </span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; graph = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            graph.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; pair : connections)&#123;</span><br><span class="line">            <span class="keyword">int</span> u = pair.get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">int</span> v = pair.get(<span class="number">1</span>);</span><br><span class="line">            graph.get(u).add(v);</span><br><span class="line">            graph.get(v).add(u);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] disc = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] low = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n; i++)&#123;</span><br><span class="line">            visited[i] = <span class="keyword">false</span>;</span><br><span class="line">            parent[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        dfs(<span class="number">0</span>, graph, disc, low, parent,visited);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Graph</tag>
        <tag>Tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode120-triangle</title>
    <url>/2020/02/07/Leetcode120-triangle/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.</p>
<p>For example, given the following triangle<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">     [2],</span><br><span class="line">    [3,4],</span><br><span class="line">   [6,5,7],</span><br><span class="line">  [4,1,8,3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).</p>
<p><strong>Note:</strong></p>
<p>Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[triangle.size() + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = triangle.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; j++)&#123;</span><br><span class="line">                dp[j] = Math.min(dp[j], dp[j + <span class="number">1</span>]) + triangle.get(i).get(j); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1209-removeAllAdjacentDuplicatesInStringII</title>
    <url>/2020/03/01/Leetcode1209-removeAllAdjacentDuplicatesInStringII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string s, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them causing the left and the right side of the deleted substring to concatenate together.</p>
<p>We repeatedly make k duplicate removals on s until we no longer can.</p>
<p>Return the final string after all such duplicate removals have been made.</p>
<p>It is guaranteed that the answer is unique.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;abcd&quot;, k &#x3D; 2</span><br><span class="line">Output: &quot;abcd&quot;</span><br><span class="line">Explanation: There&#39;s nothing to delete.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;deeedbbcccbdaa&quot;, k &#x3D; 3</span><br><span class="line">Output: &quot;aa&quot;</span><br><span class="line">Explanation: </span><br><span class="line">First delete &quot;eee&quot; and &quot;ccc&quot;, get &quot;ddbbbdaa&quot;</span><br><span class="line">Then delete &quot;bbb&quot;, get &quot;dddaa&quot;</span><br><span class="line">Finally delete &quot;ddd&quot;, get &quot;aa&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;pbbcggttciiippooaais&quot;, k &#x3D; 2</span><br><span class="line">Output: &quot;ps&quot;</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= s.length &lt;= 10^5</li>
<li>2 &lt;= k &lt;= 10^4</li>
<li>s only contains lower case English letters.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: used two stacks, the slowest, 18ms</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">// slowest method: used two stacks, O(N), 18ms</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeDuplicates</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> s;</span><br><span class="line">        </span><br><span class="line">        Stack&lt;Character&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; counter = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> cur = k - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch : s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span> (st.isEmpty() || ch != st.peek())&#123;</span><br><span class="line">                cur = k - <span class="number">1</span>;</span><br><span class="line">                st.push(ch);</span><br><span class="line">                counter.push(cur);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ch == st.peek())&#123;</span><br><span class="line">                cur--;</span><br><span class="line">                <span class="keyword">if</span> (cur == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++)&#123;</span><br><span class="line">                        st.pop();</span><br><span class="line">                        counter.pop();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!counter.isEmpty())</span><br><span class="line">                        cur = counter.peek();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    st.push(ch);</span><br><span class="line">                    counter.push(cur);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(!st.isEmpty())</span><br><span class="line">            res.append(st.pop());</span><br><span class="line">        <span class="keyword">return</span> res.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2: Basic method, used one stack to store char with count,  10ms</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">// Used one stack to store char with count, 10ms, O(N)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pair</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> count;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(<span class="keyword">char</span> ch, <span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.ch = ch;</span><br><span class="line">            <span class="keyword">this</span>.count = count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeDuplicates</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> s;</span><br><span class="line">        </span><br><span class="line">        Stack&lt;Pair&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span> (st.isEmpty()||ch != st.peek().ch)&#123;</span><br><span class="line">                st.push(<span class="keyword">new</span> Pair(ch, <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ch == st.peek().ch)&#123;</span><br><span class="line">                <span class="keyword">if</span> (st.peek().count + <span class="number">1</span> == k)&#123;</span><br><span class="line">                    st.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    st.peek().count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(!st.isEmpty())&#123;</span><br><span class="line">            Pair top = st.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; top.count; i++)</span><br><span class="line">                res.append(top.ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.reverse().toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 3: two pointers, the fastest, 3ms</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//  Two Pointers, O(N), 3ms</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeDuplicates</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, n = s.length(), count[] = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">char</span>[] stack = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j, ++i) &#123;</span><br><span class="line">            stack[i] = stack[j];</span><br><span class="line">            count[i] = i &gt; <span class="number">0</span> &amp;&amp; stack[i - <span class="number">1</span>] == stack[j] ? count[i - <span class="number">1</span>] + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (count[i] == k) i -= k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(stack, <span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode121-bestTimeToButAndSellStock</title>
    <url>/2019/10/07/Leetcode121-bestTimeToButAndSellStock/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Say you have an array for which the $i^{th}$ element is the price of a given stock on day i.</p>
<p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p>Note that you cannot sell a stock before you buy one.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,1,5,3,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Buy on day 2 (price &#x3D; 1) and sell on day 5 (price &#x3D; 6), profit &#x3D; 6-1 &#x3D; 5.</span><br><span class="line">             Not 7-1 &#x3D; 6, as selling price needs to be larger than buying price.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit &#x3D; 0.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>O(N) normal solution<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="keyword">null</span> || prices.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> buy = prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> sell = Integer.MIN_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prices[i] &lt; buy)&#123;</span><br><span class="line">                res = Math.max(res, sell - buy);</span><br><span class="line">                buy  = prices[i];</span><br><span class="line">                sell = Integer.MIN_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (prices[i] &gt; sell)&#123;</span><br><span class="line">                sell = prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = Math.max(res, sell - buy);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>O(N) DP solution<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxCur = <span class="number">0</span>, maxSoFar = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            maxCur = Math.max(<span class="number">0</span>, maxCur += prices[i] - prices[i-<span class="number">1</span>]);</span><br><span class="line">            maxSoFar = Math.max(maxCur, maxSoFar);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSoFar;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>DP</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode122-bestTimeToBuyAndSellStockII</title>
    <url>/2020/03/16/Leetcode122-bestTimeToBuyAndSellStockII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).</p>
<p>Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,1,5,3,6,4]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Buy on day 2 (price &#x3D; 1) and sell on day 3 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.</span><br><span class="line">             Then buy on day 4 (price &#x3D; 3) and sell on day 5 (price &#x3D; 6), profit &#x3D; 6-3 &#x3D; 3.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Buy on day 1 (price &#x3D; 1) and sell on day 5 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.</span><br><span class="line">             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are</span><br><span class="line">             engaging multiple transactions at the same time. You must sell before buying again.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit &#x3D; 0.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Solution 1: Greedy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Greedy    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)</span><br><span class="line">            res += Math.max(prices[i] - prices[i - <span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2: If we cannot buy and sell stocks at one day.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// If we cannot buy and sell stocks at one day.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> profit = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; prices.length) &#123;</span><br><span class="line">            <span class="comment">// find next local minimum</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; prices.length-<span class="number">1</span> &amp;&amp; prices[i+<span class="number">1</span>] &lt;= prices[i]) i++;</span><br><span class="line">            <span class="keyword">int</span> min = prices[i++]; <span class="comment">// need increment to avoid infinite loop for "[1]"</span></span><br><span class="line">            <span class="comment">// find next local maximum</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; prices.length-<span class="number">1</span> &amp;&amp; prices[i+<span class="number">1</span>] &gt;= prices[i]) i++;</span><br><span class="line">            profit += i &lt; prices.length ? prices[i++] - min : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1223-diceRollSimulation</title>
    <url>/2020/03/02/Leetcode1223-diceRollSimulation/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A die simulator generates a random number from 1 to 6 for each roll. You introduced a constraint to the generator such that it cannot roll the number i more than rollMax[i] (1-indexed) consecutive times. </p>
<p>Given an array of integers rollMax and an integer n, return the number of distinct sequences that can be obtained with exact n rolls.</p>
<p>Two sequences are considered different if at least one element differs from each other. Since the answer may be too large, return it modulo 10^9 + 7.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 2, rollMax &#x3D; [1,1,2,2,2,3]</span><br><span class="line">Output: 34</span><br><span class="line">Explanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 &#x3D; 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 &#x3D; 34.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 2, rollMax &#x3D; [1,1,1,1,1,1]</span><br><span class="line">Output: 30</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 3, rollMax &#x3D; [1,1,1,2,2,3]</span><br><span class="line">Output: 181</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dieSimulator</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] rollMax)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mod = (<span class="keyword">int</span>)<span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="comment">//dp[i][j] represents the number of distinct sequences that can be obtained when rolling i times and ending with j</span></span><br><span class="line">        <span class="comment">//The one more row represents the total sequences when rolling i times</span></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][<span class="number">7</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">            dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">6</span>] = <span class="number">6</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)&#123;</span><br><span class="line">                <span class="comment">//If there are no constraints, the total sequences ending with j should be the total sequences from previous rolling</span></span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][<span class="number">6</span>];</span><br><span class="line">                <span class="comment">//For xx1, only 111 is not allowed, so we only need to remove 1 sequence from previous sum</span></span><br><span class="line">                <span class="keyword">if</span> (i - rollMax[j] == <span class="number">1</span>)</span><br><span class="line">                    dp[i][j]--;</span><br><span class="line">                <span class="comment">//For axx1, we need to remove the number of a11 (211 + 311 + 411 + 511 + 611) =&gt; (..2 + ..3 + ..4 + ..5 + ..6) =&gt; (sum - ..1)</span></span><br><span class="line">                <span class="keyword">if</span> (i - rollMax[j] &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> reducation = dp[i - rollMax[j] - <span class="number">1</span>][<span class="number">6</span>] - dp[i - rollMax[j] - <span class="number">1</span>][j];</span><br><span class="line">                    <span class="comment">//must add one more mod because subtraction may introduce negative numbers</span></span><br><span class="line">                    dp[i][j] = ((dp[i][j] - reducation) % mod + mod) % mod;</span><br><span class="line">                &#125;</span><br><span class="line">                total = (total + dp[i][j]) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i][<span class="number">6</span>] = total;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[n][<span class="number">6</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode123-bestTimeToBuyAndSellStockIII</title>
    <url>/2020/03/10/Leetcode123-bestTimeToBuyAndSellStockIII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete at most two transactions.</p>
<p>Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,3,5,0,0,3,1,4]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: Buy on day 4 (price &#x3D; 0) and sell on day 6 (price &#x3D; 3), profit &#x3D; 3-0 &#x3D; 3.</span><br><span class="line">             Then buy on day 7 (price &#x3D; 1) and sell on day 8 (price &#x3D; 4), profit &#x3D; 4-1 &#x3D; 3.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Buy on day 1 (price &#x3D; 1) and sell on day 5 (price &#x3D; 5), profit &#x3D; 5-1 &#x3D; 4.</span><br><span class="line">             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are</span><br><span class="line">             engaging multiple transactions at the same time. You must sell before buying again.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit &#x3D; 0.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: Basic DP, $O(kn^2)$</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f[k, i] represents the max profit up until prices[i] (Note: NOT ending with prices[i]) using at most k transactions. </span><br><span class="line">f[k, i] &#x3D; Math.max(f[k, i - 1], prices[i] - prices[j] + f[k - 1, j])</span><br><span class="line">        &#x3D; Math.max(f[k, i - 1], prices[i] + Math.max(f[k - 1, j] - prices[j]))</span><br><span class="line">f[0, i] &#x3D; 0;</span><br><span class="line">f[k, 0] &#x3D; 0;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// int k = 2;</span></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][prices.length];</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">2</span>; k++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = dp[k - <span class="number">1</span>][<span class="number">0</span>] - prices[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)&#123;</span><br><span class="line">                dp[k][i] = Math.max(dp[k][i - <span class="number">1</span>], prices[i] + temp);</span><br><span class="line">                res = Math.max(res, dp[k][i]);</span><br><span class="line">                temp = Math.max(temp, dp[k - <span class="number">1</span>][i] - prices[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 2: Improved DP, $O(kn)$</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//     O(kn)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span>  </span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">int</span>[] min = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; min.length; i++)</span><br><span class="line">                min[i] = prices[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++)  &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">2</span>; k++) &#123;</span><br><span class="line">                    min[k] = Math.min(min[k], prices[i] - dp[k-<span class="number">1</span>]);</span><br><span class="line">                    dp[k] = Math.max(dp[k], prices[i] - min[k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dp[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Space complex: $O(1)$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span>  </span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> buy1 = Integer.MAX_VALUE, buy2 = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">int</span> sell1 = <span class="number">0</span>, sell2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">                buy1 = Math.min(buy1, prices[i]);</span><br><span class="line">                sell1 = Math.max(sell1, prices[i] - buy1);</span><br><span class="line">                buy2 = Math.min(buy2, prices[i] - sell1);</span><br><span class="line">                sell2 = Math.max(sell2, prices[i] - buy2);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> sell2;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode124-binaryTreeMaximumPathSum</title>
    <url>/2019/10/07/Leetcode124-binaryTreeMaximumPathSum/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty binary tree, find the maximum path sum.</p>
<p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line"></span><br><span class="line">       1</span><br><span class="line">      &#x2F; \</span><br><span class="line">     2   3</span><br><span class="line"></span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [-10,9,20,null,null,15,7]</span><br><span class="line"></span><br><span class="line">   -10</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br><span class="line"></span><br><span class="line">Output: 42</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> res = Integer.MIN_VALUE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        travelsal(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">travelsal</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> left = Math.max(travelsal(node.left), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> right = Math.max(travelsal(node.right), <span class="number">0</span>);</span><br><span class="line">        res = Math.max(res, left + right + node.val);</span><br><span class="line">        <span class="keyword">return</span> Math.max(left, right) + node.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode125-validPalindrome</title>
    <url>/2020/03/02/Leetcode125-validPalindrome/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
<p><strong>Note:</strong> For the purpose of this problem, we define empty string as valid palindrome.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;race a car&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.isEmpty()) &#123;</span><br><span class="line">        	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> head = <span class="number">0</span>, tail = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> cHead, cTail;</span><br><span class="line">        <span class="keyword">while</span>(head &lt;= tail) &#123;</span><br><span class="line">        	cHead = s.charAt(head);</span><br><span class="line">        	cTail = s.charAt(tail);</span><br><span class="line">        	<span class="keyword">if</span> (!Character.isLetterOrDigit(cHead)) &#123;</span><br><span class="line">        		head++;</span><br><span class="line">        	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(!Character.isLetterOrDigit(cTail)) &#123;</span><br><span class="line">        		tail--;</span><br><span class="line">        	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        		<span class="keyword">if</span> (Character.toLowerCase(cHead) != Character.toLowerCase(cTail)) &#123;</span><br><span class="line">        			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        		&#125;</span><br><span class="line">        		head++;</span><br><span class="line">        		tail--;</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1254-numberOfClosedIslands</title>
    <url>/2020/02/10/Leetcode1254-numberOfClosedIslands/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.</p>
<p>Return the number of closed islands.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: grid &#x3D; [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: </span><br><span class="line">Islands in gray are closed because they are completely surrounded by water (group of 1s).</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: grid &#x3D; [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: grid &#x3D; [[1,1,1,1,1,1,1],</span><br><span class="line">               [1,0,0,0,0,0,1],</span><br><span class="line">               [1,0,1,1,1,0,1],</span><br><span class="line">               [1,0,1,0,1,0,1],</span><br><span class="line">               [1,0,1,1,1,0,1],</span><br><span class="line">               [1,0,0,0,0,0,1],</span><br><span class="line">               [1,1,1,1,1,1,1]]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] direction = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">closedIsland</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid.length == <span class="number">0</span> || grid[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][<span class="number">0</span>] == <span class="number">0</span>) helper(grid, i, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (grid[i][grid[<span class="number">0</span>].length - <span class="number">1</span>] == <span class="number">0</span>) helper(grid, i, grid[<span class="number">0</span>].length - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid[<span class="number">0</span>].length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[<span class="number">0</span>][i] == <span class="number">0</span>) helper(grid, <span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">if</span> (grid[grid.length - <span class="number">1</span>][i] == <span class="number">0</span>) helper(grid, grid.length - <span class="number">1</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    res ++;</span><br><span class="line">                    helper(grid, i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid[x][y] == <span class="number">0</span>) grid[x][y] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; direction.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + direction[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ny = y + direction[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; grid.length &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; grid[<span class="number">0</span>].length &amp;&amp; grid[nx][ny] == <span class="number">0</span>)&#123;</span><br><span class="line">                helper(grid, nx, ny);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1231-divideChocolate</title>
    <url>/2020/04/07/Leetcode1231-divideChocolate/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array sweetness.</p>
<p>You want to share the chocolate with your K friends so you start cutting the chocolate bar into K+1 pieces using K cuts, each piece consists of some consecutive chunks.</p>
<p>Being generous, you will eat the piece with the minimum total sweetness and give the other pieces to your friends.</p>
<p>Find the maximum total sweetness of the piece you can get by cutting the chocolate bar optimally.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: sweetness &#x3D; [1,2,3,4,5,6,7,8,9], K &#x3D; 5</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: You can divide the chocolate to [1,2,3], [4,5], [6], [7], [8], [9]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: sweetness &#x3D; [5,6,7,8,9,1,2,3,4], K &#x3D; 8</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: There is only one way to cut the bar into 9 pieces.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: sweetness &#x3D; [1,2,2,1,2,2,1,2,2], K &#x3D; 2</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: You can divide the chocolate to [1,2,2], [1,2,2], [1,2,2]</span><br></pre></td></tr></table></figure><br><strong>Constraints:</strong></p>
<ul>
<li>0 &lt;= K &lt; sweetness.length &lt;= 10^4</li>
<li>1 &lt;= sweetness[i] &lt;= 10^5</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Binary Search</span></span><br><span class="line"><span class="comment">// Time O(Nlog(10^9))</span></span><br><span class="line"><span class="comment">// Space O(1)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximizeSweetness</span><span class="params">(<span class="keyword">int</span>[] sweetness, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = (<span class="keyword">int</span>)<span class="number">1e9</span>/(K + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> cuts = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> sweet: sweetness)&#123;</span><br><span class="line">                cur += sweet;</span><br><span class="line">                <span class="keyword">if</span> (cur &gt;= mid)&#123;</span><br><span class="line">                    cuts++;</span><br><span class="line">                    cur = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span> (cuts &gt; K) <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cuts &gt; K)</span><br><span class="line">                left = mid;</span><br><span class="line">            <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Binary Search</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode126-wordLadderII</title>
    <url>/2019/10/09/Leetcode126-wordLadderII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two words (beginWord and endWord), and a dictionary’s word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:</p>
<ol>
<li>Only one letter can be changed at a time</li>
<li>Each transformed word must exist in the word list. Note that beginWord is not a transformed word.<br><strong>Note:</strong></li>
</ol>
<ul>
<li>Return an empty list if there is no such transformation sequence.</li>
<li>All words have the same length.</li>
<li>All words contain only lowercase alphabetic characters.</li>
<li>You may assume no duplicates in the word list.</li>
<li>You may assume beginWord and endWord are non-empty and are not the same.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">beginWord &#x3D; &quot;hit&quot;,</span><br><span class="line">endWord &#x3D; &quot;cog&quot;,</span><br><span class="line">wordList &#x3D; [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],</span><br><span class="line">  [&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">beginWord &#x3D; &quot;hit&quot;</span><br><span class="line">endWord &#x3D; &quot;cog&quot;</span><br><span class="line">wordList &#x3D; [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]</span><br><span class="line"></span><br><span class="line">Output: []</span><br><span class="line"></span><br><span class="line">Explanation: The endWord &quot;cog&quot; is not in wordList, therefore no possible transformation.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; findLadders(String start, String end, List&lt;String&gt; wordList) &#123;</span><br><span class="line">        HashSet&lt;String&gt; dict = <span class="keyword">new</span> HashSet&lt;String&gt;(wordList);</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();         </span><br><span class="line">        HashMap&lt;String, ArrayList&lt;String&gt;&gt; nodeNeighbors = <span class="keyword">new</span> HashMap&lt;String, ArrayList&lt;String&gt;&gt;();<span class="comment">// Neighbors for every node</span></span><br><span class="line">        HashMap&lt;String, Integer&gt; distance = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();<span class="comment">// Distance of every node from the start node</span></span><br><span class="line">        ArrayList&lt;String&gt; solution = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        dict.add(start);          </span><br><span class="line">        bfs(start, end, dict, nodeNeighbors, distance);                 </span><br><span class="line">        dfs(start, end, dict, nodeNeighbors, distance, solution, res);   </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// BFS: Trace every node's distance from the start node (level by level).</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(String start, String end, Set&lt;String&gt; dict, HashMap&lt;String, ArrayList&lt;String&gt;&gt; nodeNeighbors, HashMap&lt;String, Integer&gt; distance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String str : dict)</span><br><span class="line">            nodeNeighbors.put(str, <span class="keyword">new</span> ArrayList&lt;String&gt;());</span><br><span class="line"></span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        queue.offer(start);</span><br><span class="line">        distance.put(start, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> count = queue.size();</span><br><span class="line">            <span class="keyword">boolean</span> foundEnd = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">                String cur = queue.poll();</span><br><span class="line">                <span class="keyword">int</span> curDistance = distance.get(cur);                </span><br><span class="line">                ArrayList&lt;String&gt; neighbors = getNeighbors(cur, dict);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (String neighbor : neighbors) &#123;</span><br><span class="line">                    nodeNeighbors.get(cur).add(neighbor);</span><br><span class="line">                    <span class="keyword">if</span> (!distance.containsKey(neighbor)) &#123;<span class="comment">// Check if visited</span></span><br><span class="line">                        distance.put(neighbor, curDistance + <span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">if</span> (end.equals(neighbor))<span class="comment">// Found the shortest path</span></span><br><span class="line">                            foundEnd = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            queue.offer(neighbor);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (foundEnd) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find all next level nodes.    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ArrayList&lt;String&gt; <span class="title">getNeighbors</span><span class="params">(String node, Set&lt;String&gt; dict)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">char</span> chs[] = node.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch =<span class="string">'a'</span>; ch &lt;= <span class="string">'z'</span>; ch++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chs.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (chs[i] == ch) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">char</span> old_ch = chs[i];</span><br><span class="line">                chs[i] = ch;</span><br><span class="line">                <span class="keyword">if</span> (dict.contains(String.valueOf(chs))) &#123;</span><br><span class="line">                    res.add(String.valueOf(chs));</span><br><span class="line">                &#125;</span><br><span class="line">                chs[i] = old_ch;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DFS: output all paths with the shortest distance.</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String cur, String end, Set&lt;String&gt; dict, HashMap&lt;String, ArrayList&lt;String&gt;&gt; nodeNeighbors, HashMap&lt;String, Integer&gt; distance, ArrayList&lt;String&gt; solution, List&lt;List&lt;String&gt;&gt; res)</span> </span>&#123;</span><br><span class="line">        solution.add(cur);</span><br><span class="line">        <span class="keyword">if</span> (end.equals(cur)) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;String&gt;(solution));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (String next : nodeNeighbors.get(cur)) &#123;            </span><br><span class="line">                <span class="keyword">if</span> (distance.get(next) == distance.get(cur) + <span class="number">1</span>) &#123;</span><br><span class="line">                    dfs(next, end, dict, nodeNeighbors, distance, solution, res);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;           </span><br><span class="line">        solution.remove(solution.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>BFS</tag>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode130-surroundedRegions</title>
    <url>/2019/11/13/Leetcode130-surroundedRegions/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2D board containing ‘X’ and ‘O’ (the letter O), capture all regions surrounded by ‘X’.</p>
<p>A region is captured by flipping all ‘O’s into ‘X’s in that surrounded region.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X X X X</span><br><span class="line">X O O X</span><br><span class="line">X X O X</span><br><span class="line">X O X X</span><br></pre></td></tr></table></figure>
<p>After running your function, the board should be:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">X X X X</span><br><span class="line">X X X X</span><br><span class="line">X X X X</span><br><span class="line">X O X X</span><br></pre></td></tr></table></figure></p>
<p><strong>Explanation:</strong></p>
<p>Surrounded regions shouldn’t be on the border, which means that any ‘O’ on the border of the board are not flipped to ‘X’. Any ‘O’ that is not on the border and it is not connected to an ‘O’ on the border will be flipped to ‘X’. Two cells are connected if they are adjacent cells connected horizontally or vertically.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] direction = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;-<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,&#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board == <span class="keyword">null</span> || board.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = board.length;</span><br><span class="line">        <span class="keyword">int</span> n = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (board[<span class="number">0</span>][i] == <span class="string">'O'</span>) dfs(board, <span class="number">0</span>, i);</span><br><span class="line">            <span class="keyword">if</span> (board[m - <span class="number">1</span>][i] == <span class="string">'O'</span>) dfs(board, m-<span class="number">1</span>, i);           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][<span class="number">0</span>] == <span class="string">'O'</span>) dfs(board, i, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (board[i][n-<span class="number">1</span>] == <span class="string">'O'</span>) dfs(board, i, n-<span class="number">1</span>);           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="string">'+'</span>) board[i][j] = <span class="string">'O'</span>;</span><br><span class="line">                <span class="keyword">else</span> board[i][j] = <span class="string">'X'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        board[x][y] = <span class="string">'+'</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + direction[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ny = y + direction[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; board.length &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; board[<span class="number">0</span>].length &amp;&amp; board[nx][ny] == <span class="string">'O'</span>)</span><br><span class="line">                dfs(board, nx, ny);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1249-minimumRemoveToMakeValidParentheses</title>
    <url>/2020/03/02/Leetcode1249-minimumRemoveToMakeValidParentheses/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string s of ‘(‘ , ‘)’ and lowercase English characters. </p>
<p>Your task is to remove the minimum number of parentheses ( ‘(‘ or ‘)’, in any positions ) so that the resulting parentheses string is valid and return any valid string.</p>
<p>Formally, a parentheses string is valid if and only if:</p>
<ul>
<li>It is the empty string, contains only lowercase characters, or</li>
<li>It can be written as AB (A concatenated with B), where A and B are valid strings, or</li>
<li>It can be written as (A), where A is a valid string.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;lee(t(c)o)de)&quot;</span><br><span class="line">Output: &quot;lee(t(c)o)de&quot;</span><br><span class="line">Explanation: &quot;lee(t(co)de)&quot; , &quot;lee(t(c)ode)&quot; would also be accepted.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;a)b(c)d&quot;</span><br><span class="line">Output: &quot;ab(c)d&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;))((&quot;</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: An empty string is also valid.</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;(a(b(c)d)&quot;</span><br><span class="line">Output: &quot;a(b(c)d)&quot;</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= s.length &lt;= 10^5</li>
<li>s[i] is one of  ‘(‘ , ‘)’ and lowercase English letters.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pair</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> idx;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(<span class="keyword">char</span> ch, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.ch = ch;</span><br><span class="line">            <span class="keyword">this</span>.idx = idx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">minRemoveToMakeValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(s);</span><br><span class="line">        Stack&lt;Integer&gt; st = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sb.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sb.charAt(i) == <span class="string">&#x27;(&#x27;</span>) st.add(i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (sb.charAt(i) == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!st.empty() &amp;&amp; st.peek() &gt;= <span class="number">0</span>) st.pop();</span><br><span class="line">            <span class="keyword">else</span> st.add(-(i + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!st.empty())</span><br><span class="line">            sb.deleteCharAt(Math.abs(st.pop()) - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Bloomberg</tag>
        <tag>String</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode128-longestConsecutiveSequence</title>
    <url>/2020/03/10/Leetcode128-longestConsecutiveSequence/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.</p>
<p>Your algorithm should run in O(n) complexity.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [100, 4, 200, 1, 3, 2]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums)</span><br><span class="line">            set.add(num);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: set)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!set.contains(num-<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = num + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(set.contains(temp))</span><br><span class="line">                    temp++;</span><br><span class="line">                res = Math.max(res, temp - num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Array</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode127-wordLadder</title>
    <url>/2019/10/09/Leetcode127-wordLadder/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two words (beginWord and endWord), and a dictionary’s word list, find the length of shortest transformation sequence from beginWord to endWord, such that:</p>
<p>Only one letter can be changed at a time.<br>Each transformed word must exist in the word list. Note that beginWord is not a transformed word.</p>
<p><strong>Note:</strong></p>
<ul>
<li>Return 0 if there is no such transformation sequence.</li>
<li>All words have the same length.</li>
<li>All words contain only lowercase alphabetic characters.</li>
<li>You may assume no duplicates in the word list.</li>
<li>You may assume beginWord and endWord are non-empty and are not the same.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">beginWord &#x3D; &quot;hit&quot;,</span><br><span class="line">endWord &#x3D; &quot;cog&quot;,</span><br><span class="line">wordList &#x3D; [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</span><br><span class="line"></span><br><span class="line">Output: 5</span><br><span class="line"></span><br><span class="line">Explanation: As one shortest transformation is &quot;hit&quot; -&gt; &quot;hot&quot; -&gt; &quot;dot&quot; -&gt; &quot;dog&quot; -&gt; &quot;cog&quot;,</span><br><span class="line">return its length 5.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">beginWord &#x3D; &quot;hit&quot;</span><br><span class="line">endWord &#x3D; &quot;cog&quot;</span><br><span class="line">wordList &#x3D; [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]</span><br><span class="line"></span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">Explanation: The endWord &quot;cog&quot; is not in wordList, therefore no possible transformation.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLength</span><span class="params">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;String&gt; dic = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String word: wordList) dic.add(word);</span><br><span class="line">        <span class="keyword">if</span> (!dic.contains(endWord)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        HashSet&lt;String&gt; reachable = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        reachable.add(beginWord);</span><br><span class="line">        <span class="keyword">while</span>(!reachable.contains(endWord))&#123;</span><br><span class="line">            HashSet&lt;String&gt; toAdd = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String word: reachable)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">                    <span class="keyword">char</span>[] arr = word.toCharArray();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">char</span> ch = <span class="string">'a'</span>; ch &lt;= <span class="string">'z'</span>; ch++)&#123;</span><br><span class="line">                        arr[i] = ch;</span><br><span class="line">                        String tmp = <span class="keyword">new</span> String(arr);</span><br><span class="line">                        <span class="keyword">if</span> (dic.contains(tmp))&#123;</span><br><span class="line">                            toAdd.add(tmp);</span><br><span class="line">                            dic.remove(tmp);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (toAdd.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            reachable = toAdd;</span><br><span class="line">            res ++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode131-palindromePartitioning</title>
    <url>/2020/02/08/Leetcode131-palindromePartitioning/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string s, partition s such that every substring of the partition is a palindrome.</p>
<p>Return all possible palindrome partitioning of s.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;aab&quot;</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  [&quot;aa&quot;,&quot;b&quot;],</span><br><span class="line">  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        helper(res, s, <span class="keyword">new</span> ArrayList&lt;String&gt;(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(List&lt;List&lt;String&gt;&gt; res, String s, List&lt;String&gt; temp, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; s.length()-<span class="number">1</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(temp));</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index + <span class="number">1</span>; i &lt;= s.length(); i++)&#123;</span><br><span class="line">            String cur = s.substring(index, i);</span><br><span class="line">            <span class="keyword">if</span> (!isPalindrome(cur)) <span class="keyword">continue</span>; </span><br><span class="line">            temp.add(cur);</span><br><span class="line">            helper(res, s, temp, i);</span><br><span class="line">            temp.remove(temp.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = s.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(left) != s.charAt(right)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            left ++;</span><br><span class="line">            right --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode133-cloneGraph</title>
    <url>/2019/10/14/Leetcode133-cloneGraph/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph. Each node in the graph contains a val (int) and a list (List[Node]) of its neighbors.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><img src="https://assets.leetcode.com/uploads/2019/02/19/113_sample.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">&#123;&quot;$id&quot;:&quot;1&quot;,&quot;neighbors&quot;:[&#123;&quot;$id&quot;:&quot;2&quot;,&quot;neighbors&quot;:[&#123;&quot;$ref&quot;:&quot;1&quot;&#125;,&#123;&quot;$id&quot;:&quot;3&quot;,&quot;neighbors&quot;:[&#123;&quot;$ref&quot;:&quot;2&quot;&#125;,&#123;&quot;$id&quot;:&quot;4&quot;,&quot;neighbors&quot;:[&#123;&quot;$ref&quot;:&quot;3&quot;&#125;,&#123;&quot;$ref&quot;:&quot;1&quot;&#125;],&quot;val&quot;:4&#125;],&quot;val&quot;:3&#125;],&quot;val&quot;:2&#125;,&#123;&quot;$ref&quot;:&quot;4&quot;&#125;],&quot;val&quot;:1&#125;</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Node 1&#39;s value is 1, and it has two neighbors: Node 2 and 4.</span><br><span class="line">Node 2&#39;s value is 2, and it has two neighbors: Node 1 and 3.</span><br><span class="line">Node 3&#39;s value is 3, and it has two neighbors: Node 2 and 4.</span><br><span class="line">Node 4&#39;s value is 4, and it has two neighbors: Node 1 and 3.</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ol>
<li>The number of nodes will be between 1 and 100.</li>
<li>The undirected graph is a simple graph, which means no repeated edges and no self-loops in the graph.</li>
<li>Since the graph is undirected, if node p has node q as neighbor, then node q must have node p as neighbor too.</li>
<li>You must return the copy of the given node as a reference to the cloned graph.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public List&lt;Node&gt; neighbors;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val,List&lt;Node&gt; _neighbors) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        neighbors = _neighbors;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">cloneGraph</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> node;</span><br><span class="line">        HashMap&lt;Integer, Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> clone(node, map);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">clone</span><span class="params">(Node node, HashMap&lt;Integer, Node&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(node.val)) <span class="keyword">return</span> map.get(node.val);</span><br><span class="line">        </span><br><span class="line">        List&lt;Node&gt; newNeighbors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Node newNode = <span class="keyword">new</span> Node(node.val, newNeighbors);</span><br><span class="line">        map.put(node.val, newNode);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Node n: node.neighbors)&#123;</span><br><span class="line">            newNode.neighbors.add(clone(n, map));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Hash Table</tag>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode136-singleNumber</title>
    <url>/2020/03/02/Leetcode136-singleNumber/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty array of integers, every element appears twice except for one. Find that single one.</p>
<p><strong>Note:</strong></p>
<p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums) res = res ^ num;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Bloomberg</tag>
        <tag>Bit Manipulation</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode138-copyListWithRandomPointer</title>
    <url>/2019/09/23/Leetcode138-copyListWithRandomPointer/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p>
<p>Return a deep copy of the list.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><img src="https://discuss.leetcode.com/uploads/files/1470150906153-2yxeznm.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">&#123;&quot;$id&quot;:&quot;1&quot;,&quot;next&quot;:&#123;&quot;$id&quot;:&quot;2&quot;,&quot;next&quot;:null,&quot;random&quot;:&#123;&quot;$ref&quot;:&quot;2&quot;&#125;,&quot;val&quot;:2&#125;,&quot;random&quot;:&#123;&quot;$ref&quot;:&quot;2&quot;&#125;,&quot;val&quot;:1&#125;</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Node 1&#39;s value is 1, both of its next and random pointer points to Node 2.</span><br><span class="line">Node 2&#39;s value is 2, its next pointer points to null and its random pointer points to itself.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: O(1) space</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment">    public Node random;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val,Node _next,Node _random) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        next = _next;</span></span><br><span class="line"><span class="comment">        random = _random;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// loop 1: copy all nodes</span></span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            Node next = cur.next;</span><br><span class="line">            cur.next = <span class="keyword">new</span> Node(cur.val, next, <span class="keyword">null</span>);</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// loop 2: assign all random pointers</span></span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.random != <span class="keyword">null</span>)&#123;</span><br><span class="line">                cur.next.random = cur.random.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// loop 3: reconstrcut new list</span></span><br><span class="line">        cur = head;</span><br><span class="line">        Node newHead = cur.next;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            Node next = cur.next.next;</span><br><span class="line">            Node copy = cur.next;</span><br><span class="line">            cur.next = next;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>)</span><br><span class="line">                copy.next = next.next;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>Solution 2: HashMap, O(N) space</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment">    public Node random;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val,Node _next,Node _random) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        next = _next;</span></span><br><span class="line"><span class="comment">        random = _random;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">        Map&lt;Node, Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// loop 1. copy all the nodes</span></span><br><span class="line">        Node node = head;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.put(node, <span class="keyword">new</span> Node(node.val, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// loop 2. assign next and random pointers</span></span><br><span class="line">        node = head;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.get(node).next = map.get(node.next);</span><br><span class="line">            map.get(node).random = map.get(node.random);</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> map.get(head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
        <tag>LinkedList</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode140-wordBreakII</title>
    <url>/2019/10/09/Leetcode140-wordBreakII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.</p>
<p><strong>Note:</strong></p>
<ul>
<li>The same word in the dictionary may be reused multiple times in the segmentation.</li>
<li>You may assume the dictionary does not contain duplicate words.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;catsanddog&quot;</span><br><span class="line">wordDict &#x3D; [&quot;cat&quot;, &quot;cats&quot;, &quot;and&quot;, &quot;sand&quot;, &quot;dog&quot;]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  &quot;cats and dog&quot;,</span><br><span class="line">  &quot;cat sand dog&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;pineapplepenapple&quot;</span><br><span class="line">wordDict &#x3D; [&quot;apple&quot;, &quot;pen&quot;, &quot;applepen&quot;, &quot;pine&quot;, &quot;pineapple&quot;]</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  &quot;pine apple pen apple&quot;,</span><br><span class="line">  &quot;pineapple pen apple&quot;,</span><br><span class="line">  &quot;pine applepen apple&quot;</span><br><span class="line">]</span><br><span class="line">Explanation: Note that you are allowed to reuse a dictionary word.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s &#x3D; &quot;catsandog&quot;</span><br><span class="line">wordDict &#x3D; [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class="line">Output:</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1</strong></p>
<p>DFS function returns an array including all substrings derived from s</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="comment">// DFS solution3: store useful substring</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;String&gt; dic = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String word: wordDict) dic.add(word);</span><br><span class="line">        <span class="keyword">return</span> DFS(s, dic, <span class="keyword">new</span> HashMap&lt;String, LinkedList&lt;String&gt;&gt;());</span><br><span class="line">    &#125;       </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">DFS</span><span class="params">(String s, Set&lt;String&gt; wordDict, HashMap&lt;String, LinkedList&lt;String&gt;&gt;map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(s)) </span><br><span class="line">            <span class="keyword">return</span> map.get(s);</span><br><span class="line">        </span><br><span class="line">        LinkedList&lt;String&gt;res = <span class="keyword">new</span> LinkedList&lt;String&gt;();     </span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            res.add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;               </span><br><span class="line">        <span class="keyword">for</span> (String word : wordDict) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.startsWith(word)) &#123;</span><br><span class="line">                List&lt;String&gt;sublist = DFS(s.substring(word.length()), wordDict, map);</span><br><span class="line">                <span class="keyword">for</span> (String sub : sublist) </span><br><span class="line">                    res.add(word + (sub.isEmpty() ? <span class="string">&quot;&quot;</span> : <span class="string">&quot; &quot;</span>) + sub);               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;       </span><br><span class="line">        map.put(s, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2: not the fastest</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// DFS solution : store unable substring</span></span><br><span class="line">    <span class="keyword">boolean</span> isSuccess = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">        HashSet&lt;String&gt; dic = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String word: wordDict) dic.add(word);</span><br><span class="line">        </span><br><span class="line">        HashSet&lt;String&gt; noWay = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        String seq = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        dfs(s, dic, noWay, seq, res);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(String s, HashSet&lt;String&gt; dic, HashSet&lt;String&gt; noWay, String seq, List&lt;String&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (seq != <span class="keyword">null</span> || seq.length() != <span class="number">0</span>)&#123;</span><br><span class="line">                res.add(seq.trim());</span><br><span class="line">                isSuccess = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.length(); i++)&#123;</span><br><span class="line">            String first = s. substring(<span class="number">0</span>, i);</span><br><span class="line">            String last = s.substring(i);</span><br><span class="line">            <span class="keyword">if</span> (dic.contains(first) &amp;&amp; !noWay.contains(last))&#123;</span><br><span class="line">                String tmp = seq;</span><br><span class="line">                seq += first + <span class="string">&quot; &quot;</span>;</span><br><span class="line">                dfs(last, dic, noWay, seq, res);</span><br><span class="line">                <span class="keyword">if</span> (!isSuccess) noWay.add(last);</span><br><span class="line">                seq = tmp;</span><br><span class="line">                <span class="keyword">if</span> (seq.length() == <span class="number">0</span> &amp;&amp; isSuccess == <span class="keyword">true</span>) isSuccess = <span class="keyword">false</span>;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode139-wordBreak</title>
    <url>/2019/10/08/Leetcode139-wordBreak/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.</p>
<p><strong>Note:</strong></p>
<ul>
<li>The same word in the dictionary may be reused multiple times in the segmentation.</li>
<li>You may assume the dictionary does not contain duplicate words.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;leetcode&quot;, wordDict &#x3D; [&quot;leet&quot;, &quot;code&quot;]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Return true because &quot;leetcode&quot; can be segmented as &quot;leet code&quot;.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;applepenapple&quot;, wordDict &#x3D; [&quot;apple&quot;, &quot;pen&quot;]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Return true because &quot;applepenapple&quot; can be segmented as &quot;apple pen apple&quot;.</span><br><span class="line">             Note that you are allowed to reuse a dictionary word.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;catsandog&quot;, wordDict &#x3D; [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; dict)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String st: dict)&#123;</span><br><span class="line">            set.add(st);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span>[] f = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length() + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        f[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// First DP O(N*M)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(String str: dict)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str.length() &lt;= i)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(f[i - str.length()])&#123;</span><br><span class="line">                        <span class="keyword">if</span>(s.substring(i-str.length(), i).equals(str))&#123;</span><br><span class="line">                            f[i] = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Second DP O(N^2)</span></span><br><span class="line">        <span class="comment">// for(int i=1; i &lt;= s.length(); i++)&#123;</span></span><br><span class="line">        <span class="comment">//     for(int j=0; j &lt; i; j++)&#123;</span></span><br><span class="line">        <span class="comment">//         if(f[j] &amp;&amp; dict.contains(s.substring(j, i)))&#123;</span></span><br><span class="line">        <span class="comment">//             f[i] = true;</span></span><br><span class="line">        <span class="comment">//             break;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> f[s.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>memorizal DFS, O(n!)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        HashSet&lt;String&gt; memory = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String st: wordDict)&#123;</span><br><span class="line">            set.add(st);</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> helper(s, set, memory);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(String s, HashSet&lt;String&gt; set, HashSet&lt;String&gt; memory)</span></span>&#123;</span><br><span class="line">        <span class="comment">// System.out.println(s);</span></span><br><span class="line">        <span class="keyword">if</span> (set.contains(s)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            String tmp = s.substring(<span class="number">0</span>, i);</span><br><span class="line">            String rest = s.substring(i, s.length());</span><br><span class="line">            <span class="keyword">if</span> (set.contains(tmp) &amp;&amp; !memory.contains(rest))</span><br><span class="line">                <span class="keyword">if</span> (helper(rest, set, memory)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">else</span> memory.add(rest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>DP</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode141-linkedListCycle</title>
    <url>/2019/09/19/Leetcode141-linkedListCycle/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a linked list, determine if it has a cycle in it.</p>
<p>To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [3,2,0,-4], pos &#x3D; 1</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the second node.</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [1,2], pos &#x3D; 0</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the first node.</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [1], pos &#x3D; -1</span><br><span class="line">Output: false</span><br><span class="line">Explanation: There is no cycle in the linked list.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        ListNode p = head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p.next == head) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            ListNode tmp = p.next;</span><br><span class="line">            p.next = head;</span><br><span class="line">            p = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// Excellent Method, but logical</span></span><br><span class="line">        <span class="comment">// ListNode slow = head;</span></span><br><span class="line">        <span class="comment">// ListNode fast = head;</span></span><br><span class="line">        <span class="comment">// while (fast.next != null &amp;&amp; fast.next.next != null)&#123;</span></span><br><span class="line">        <span class="comment">//     slow = slow.next;</span></span><br><span class="line">        <span class="comment">//     fast = fast.next.next;</span></span><br><span class="line">        <span class="comment">//     if (slow == fast) return true;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return false;</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode143-reorderList</title>
    <url>/2020/02/07/Leetcode143-reorderList/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a singly linked list L: L0→L1→…→Ln-1→Ln,<br>reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…</p>
<p>You may not modify the values in the list’s nodes, only nodes itself may be changed.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given 1-&gt;2-&gt;3-&gt;4, reorder it to 1-&gt;4-&gt;2-&gt;3.</span><br></pre></td></tr></table></figure><br><strong>Example 2</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given 1-&gt;2-&gt;3-&gt;4-&gt;5, reorder it to 1-&gt;5-&gt;2-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1</strong><br>Not the best<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        List&lt;ListNode&gt; nodeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ListNode tmp = head;</span><br><span class="line">        <span class="keyword">while</span>(tmp != <span class="keyword">null</span>)&#123;</span><br><span class="line">            nodeList.add(tmp);</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nodeList.size()-<span class="number">1</span>;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            nodeList.get(right).next = nodeList.get(left).next;</span><br><span class="line">            nodeList.get(left).next = nodeList.get(right);</span><br><span class="line">            nodeList.get(right-<span class="number">1</span>).next = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//          Speed more better</span></span><br><span class="line"><span class="comment">//          ListNode tmpNode = nodeList.get(left).next;</span></span><br><span class="line"><span class="comment">//          nodeList.get(left).next = nodeList.get(right);</span></span><br><span class="line"><span class="comment">//          cur.next.next = tmpNode;</span></span><br><span class="line"><span class="comment">//          nodeList.get(right-1).next = null;</span></span><br><span class="line"><span class="comment">//          cur = tmpNode;</span></span><br><span class="line">            left ++;</span><br><span class="line">            right --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right)&#123;</span><br><span class="line">            nodeList.get(left).next = <span class="keyword">null</span>;</span><br><span class="line">            nodeList.get(right).next = nodeList.get(left);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><strong>Solution 2</strong><br>Best<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//Find the middle of the list</span></span><br><span class="line">            ListNode p1=head;</span><br><span class="line">            ListNode p2=head;</span><br><span class="line">            <span class="keyword">while</span>(p2.next!=<span class="keyword">null</span>&amp;&amp;p2.next.next!=<span class="keyword">null</span>)&#123; </span><br><span class="line">                p1=p1.next;</span><br><span class="line">                p2=p2.next.next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//Reverse the half after middle  1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6 to 1-&gt;2-&gt;3-&gt;6-&gt;5-&gt;4</span></span><br><span class="line">            ListNode preMiddle=p1;</span><br><span class="line">            ListNode preCurrent=p1.next;</span><br><span class="line">            <span class="keyword">while</span>(preCurrent.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                ListNode current=preCurrent.next;</span><br><span class="line">                preCurrent.next=current.next;</span><br><span class="line">                current.next=preMiddle.next;</span><br><span class="line">                preMiddle.next=current;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//Start reorder one by one  1-&gt;2-&gt;3-&gt;6-&gt;5-&gt;4 to 1-&gt;6-&gt;2-&gt;5-&gt;3-&gt;4</span></span><br><span class="line">            p1=head;</span><br><span class="line">            p2=preMiddle.next;</span><br><span class="line">            <span class="keyword">while</span>(p1!=preMiddle)&#123;</span><br><span class="line">                preMiddle.next=p2.next;</span><br><span class="line">                p2.next=p1.next;</span><br><span class="line">                p1.next=p2;</span><br><span class="line">                p1=p2.next;</span><br><span class="line">                p2=preMiddle.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode146-LRUcache</title>
    <url>/2019/10/06/Leetcode146-LRUcache/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.</p>
<p>get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br>put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>
<p>The cache is initialized with a positive capacity.</p>
<p><strong>Follow up:</strong><br>Could you do both operations in O(1) time complexity?</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LRUCache cache &#x3D; new LRUCache( 2 &#x2F;* capacity *&#x2F; );</span><br><span class="line"></span><br><span class="line">cache.put(1, 1);</span><br><span class="line">cache.put(2, 2);</span><br><span class="line">cache.get(1);       &#x2F;&#x2F; returns 1</span><br><span class="line">cache.put(3, 3);    &#x2F;&#x2F; evicts key 2</span><br><span class="line">cache.get(2);       &#x2F;&#x2F; returns -1 (not found)</span><br><span class="line">cache.put(4, 4);    &#x2F;&#x2F; evicts key 1</span><br><span class="line">cache.get(1);       &#x2F;&#x2F; returns -1 (not found)</span><br><span class="line">cache.get(3);       &#x2F;&#x2F; returns 3</span><br><span class="line">cache.get(4);       &#x2F;&#x2F; returns 4</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>O(1) soluton<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">doubleList</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        doubleList pre;</span><br><span class="line">        doubleList next;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">doubleList</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value, doubleList pre, doubleList next)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.pre = pre;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">doubleList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, doubleList&gt; map;</span><br><span class="line">    <span class="keyword">private</span> doubleList head,tail;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        head = <span class="keyword">new</span> doubleList();</span><br><span class="line">        tail = <span class="keyword">new</span> doubleList();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key))&#123;</span><br><span class="line">            doubleList cur = map.get(key); </span><br><span class="line"></span><br><span class="line">            cur.pre.next = cur.next;</span><br><span class="line">            cur.next.pre = cur.pre;</span><br><span class="line">            </span><br><span class="line">            cur.next = head.next;</span><br><span class="line">            cur.pre = head;</span><br><span class="line">            head.next = cur;</span><br><span class="line">            cur.next.pre = cur;</span><br><span class="line">            </span><br><span class="line">            map.put(key, cur);</span><br><span class="line">            <span class="keyword">return</span> cur.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key))&#123;</span><br><span class="line">            doubleList cur = map.get(key);</span><br><span class="line">            </span><br><span class="line">            cur.pre.next = cur.next;</span><br><span class="line">            cur.next.pre = cur.pre;</span><br><span class="line">            </span><br><span class="line">            cur.next = head.next;</span><br><span class="line">            cur.pre = head;</span><br><span class="line">            head.next = cur;</span><br><span class="line">            cur.next.pre = cur;</span><br><span class="line">            </span><br><span class="line">            cur.value = value;</span><br><span class="line">            map.put(key, cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                doubleList cur = <span class="keyword">new</span> doubleList(key, value, head, tail);</span><br><span class="line">                head.next = cur;</span><br><span class="line">                tail.pre = cur;</span><br><span class="line">                map.put(key, cur);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                doubleList cur = <span class="keyword">new</span> doubleList(key, value, head, head.next);</span><br><span class="line">                head.next = cur;</span><br><span class="line">                cur.next.pre = cur;</span><br><span class="line">                map.put(key, cur);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (map.size() &gt; capacity)&#123;</span><br><span class="line">                    map.remove(tail.pre.key);</span><br><span class="line">                    tail.pre.pre.next = tail;</span><br><span class="line">                    tail.pre = tail.pre.pre;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LRUCache obj = new LRUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><br>O(N) solution<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map;</span><br><span class="line">    LinkedList&lt;Integer&gt; keySet;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        keySet = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key))&#123;</span><br><span class="line">            <span class="keyword">int</span> value = map.get(key);</span><br><span class="line">            <span class="keyword">if</span> (keySet.removeFirstOccurrence(key)) keySet.offerFirst(key);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key))&#123;</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            <span class="keyword">if</span> (keySet.removeFirstOccurrence(key))&#123;</span><br><span class="line">                keySet.offerFirst(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            keySet.offerFirst(key);</span><br><span class="line">            <span class="keyword">if</span> (keySet.size() &gt; capacity)&#123;</span><br><span class="line">                map.remove(keySet.removeLast());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
        <tag>Design</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode145-binaryTreePosterTraversal</title>
    <url>/2019/09/14/Leetcode145-binaryTreePosterTraversal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the postorder traversal of its nodes’ values.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [3,2,1]</span><br></pre></td></tr></table></figure>
<p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) postOrder(node.left);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) postOrder(node.right);</span><br><span class="line">        res.add(node.val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Recursive solution</span></span><br><span class="line">        <span class="comment">//postOrder(root);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Iterative solution</span></span><br><span class="line">        <span class="comment">// Stack&lt;TreeNode&gt; st = new Stack&lt;&gt;();</span></span><br><span class="line">        <span class="comment">// st.push(root);</span></span><br><span class="line">        <span class="comment">// if (root.right != null)&#123;</span></span><br><span class="line">        <span class="comment">//     st.push(root.right);</span></span><br><span class="line">        <span class="comment">//     root.right = null;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// if (root.left != null)&#123;</span></span><br><span class="line">        <span class="comment">//     st.push(root.left);</span></span><br><span class="line">        <span class="comment">//     root.left = null;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// while (!st.empty())&#123;</span></span><br><span class="line">        <span class="comment">//     TreeNode node = st.pop();</span></span><br><span class="line">        <span class="comment">//     if (node.left == null &amp;&amp; node.right == null)</span></span><br><span class="line">        <span class="comment">//         res.add(node.val);</span></span><br><span class="line">        <span class="comment">//     else&#123;</span></span><br><span class="line">        <span class="comment">//         st.push(node);</span></span><br><span class="line">        <span class="comment">//         if (node.right != null)&#123;</span></span><br><span class="line">        <span class="comment">//             st.push(node.right);</span></span><br><span class="line">        <span class="comment">//             node.right = null;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//         if (node.left != null)&#123;</span></span><br><span class="line">        <span class="comment">//             st.push(node.left);</span></span><br><span class="line">        <span class="comment">//             node.left = null;</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// return res;</span></span><br><span class="line">        </span><br><span class="line">        LinkedList&lt;Integer&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode p = root;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() || p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(p);</span><br><span class="line">                result.addFirst(p.val);  <span class="comment">// Reverse the process of preorder</span></span><br><span class="line">                p = p.right;             <span class="comment">// Reverse the process of preorder</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode node = stack.pop();</span><br><span class="line">                p = node.left;           <span class="comment">// Reverse the process of preorder</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Posteroder</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode144-binaryTreePreorderTraversal</title>
    <url>/2019/09/13/Leetcode144-binaryTreePreorderTraversal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the preorder traversal of its nodes’ values.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,2,3]</span><br></pre></td></tr></table></figure>
<p><strong>Follow up</strong>: Recursive solution is trivial, could you do it iteratively?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        res.add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) preOrder(node.left);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) preOrder(node.right);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="comment">//Recursive solution</span></span><br><span class="line">        <span class="comment">//preOrder(root);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Stack method</span></span><br><span class="line">        <span class="comment">// Stack&lt;TreeNode&gt; toDo = new Stack&lt;&gt;();</span></span><br><span class="line">        <span class="comment">// toDo.push(root);</span></span><br><span class="line">        <span class="comment">// while(!toDo.empty())&#123;</span></span><br><span class="line">        <span class="comment">//     TreeNode node = toDo.pop();</span></span><br><span class="line">        <span class="comment">//     res.add(node.val);</span></span><br><span class="line">        <span class="comment">//     if (node.right != null) toDo.push(node.right);</span></span><br><span class="line">        <span class="comment">//     if (node.left != null) toDo.push(node.left);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return res;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//iterative method</span></span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        TreeNode p = root;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() || p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(p);</span><br><span class="line">                result.add(p.val);  <span class="comment">// Add before going to children</span></span><br><span class="line">                p = p.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode node = stack.pop();</span><br><span class="line">                p = node.right;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Preorder</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode149-maxPointsOnALine</title>
    <url>/2020/03/02/Leetcode149-maxPointsOnALine/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,1],[2,2],[3,3]]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">^</span><br><span class="line">|</span><br><span class="line">|        o</span><br><span class="line">|     o</span><br><span class="line">|  o  </span><br><span class="line">+-------------&gt;</span><br><span class="line">0  1  2  3  4</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation:</span><br><span class="line">^</span><br><span class="line">|</span><br><span class="line">|  o</span><br><span class="line">|     o        o</span><br><span class="line">|        o</span><br><span class="line">|  o        o</span><br><span class="line">+-------------------&gt;</span><br><span class="line">0  1  2  3  4  5  6</span><br></pre></td></tr></table></figure></p>
<p><strong>NOTE:</strong> input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: Hash Map</strong></p>
<p>O(n^2), used (x1 - x2) / gcd and (y1 - y2) / gcd (gcd is the gcd between (x1 - x2) and (y1-y2))</p>
<p>To avoid to use double, which can occur accuracy problem</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPoints</span><span class="params">(<span class="keyword">int</span>[][] points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (points == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (points.length &lt;= <span class="number">2</span>) <span class="keyword">return</span> points.length;</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer, Map&lt;Integer, Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Map&lt;Integer, Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">            map.clear();</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">1</span>, max = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; points.length; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = points[j][<span class="number">0</span>] - points[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> y = points[j][<span class="number">1</span>] - points[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) &#123;</span><br><span class="line">                    num++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> gcd = generateGCD(x, y);</span><br><span class="line">                <span class="keyword">if</span> (gcd != <span class="number">0</span>) &#123;</span><br><span class="line">                    x /= gcd;</span><br><span class="line">                    y /= gcd;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(x)) &#123;</span><br><span class="line">                    map.get(x).put(y, map.get(x).getOrDefault(y, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    Map&lt;Integer, Integer&gt; m = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">                    m.put(y, <span class="number">1</span>);</span><br><span class="line">                    map.put(x, m);</span><br><span class="line">                &#125;</span><br><span class="line">                max = Math.max(max, map.get(x).get(y));</span><br><span class="line">            &#125;</span><br><span class="line">            result = Math.max(result, max + num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">generateGCD</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> generateGCD(b, a % b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2</strong></p>
<p>O(n^3), used Cross product to determine if these three points are in one line</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPoints</span><span class="params">(<span class="keyword">int</span>[][] points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, n = points.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> duplicate = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">long</span> x1 = points[i][<span class="number">0</span>], y1 = points[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">long</span> x2 = points[j][<span class="number">0</span>], y2 = points[j][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (x1 == x2 &amp;&amp; y1 == y2) &#123;</span><br><span class="line">                    duplicate++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">                    <span class="keyword">int</span> x3 = points[k][<span class="number">0</span>], y3 = points[k][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (x1*y2 + x2*y3 + x3*y1 - x3*y2 - x2*y1 - x1 * y3 == <span class="number">0</span>) &#123;</span><br><span class="line">                        cnt++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                res = Math.max(res, cnt);</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, duplicate);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Bloomberg</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode155-minStack</title>
    <url>/2019/10/13/Leetcode155-minStack/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>
<ul>
<li>push(x) — Push element x onto stack.</li>
<li>pop() — Removes the element on top of the stack.</li>
<li>top() — Get the top element.</li>
<li>getMin() — Retrieve the minimum element in the stack.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MinStack minStack &#x3D; new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin();   --&gt; Returns -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; Returns 0.</span><br><span class="line">minStack.getMin();   --&gt; Returns -2.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Only push the minVal when it need to updated</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; st;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> minVal;</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        minVal = Integer.MAX_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= minVal)&#123;</span><br><span class="line">            st.push(minVal);</span><br><span class="line">            minVal = x;</span><br><span class="line">        &#125;</span><br><span class="line">        st.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minVal == st.pop()) minVal = st.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> st.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MinStack obj = new MinStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.getMin();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode151-reverseWordsInAString</title>
    <url>/2019/10/12/Leetcode151-reverseWordsInAString/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an input string, reverse the string word by word.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;the sky is blue&quot;</span><br><span class="line">Output: &quot;blue is sky the&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;  hello world!  &quot;</span><br><span class="line">Output: &quot;world! hello&quot;</span><br><span class="line">Explanation: Your reversed string should not contain leading or trailing spaces.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;a good   example&quot;</span><br><span class="line">Output: &quot;example good a&quot;</span><br><span class="line">Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ul>
<li>A word is defined as a sequence of non-space characters.</li>
<li>Input string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.</li>
<li>You need to reduce multiple spaces between two words to a single space in the reversed string.</li>
</ul>
<p><strong>Follow up:</strong></p>
<p>For C programmers, try to solve it in-place in O(1) extra space.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        String[] arr = s.trim().split(<span class="string">"\\s+"</span>);</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            res += arr[i] + <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res += arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Method 2: Don’t use split/trim<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span>[] a = s.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> n = a.length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// step 1. reverse the whole string</span></span><br><span class="line">    reverse(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// step 2. reverse each word</span></span><br><span class="line">    reverseWords(a, n);</span><br><span class="line">    <span class="comment">// step 3. clean up spaces</span></span><br><span class="line">    <span class="keyword">return</span> cleanSpaces(a, n);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">reverseWords</span><span class="params">(<span class="keyword">char</span>[] a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; j || i &lt; n &amp;&amp; a[i] == <span class="string">' '</span>) i++; <span class="comment">// skip spaces</span></span><br><span class="line">      <span class="keyword">while</span> (j &lt; i || j &lt; n &amp;&amp; a[j] != <span class="string">' '</span>) j++; <span class="comment">// skip non spaces</span></span><br><span class="line">      reverse(a, i, j - <span class="number">1</span>);                      <span class="comment">// reverse the word</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// trim leading, trailing and multiple spaces</span></span><br><span class="line">  <span class="function">String <span class="title">cleanSpaces</span><span class="params">(<span class="keyword">char</span>[] a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">while</span> (j &lt; n) &#123;</span><br><span class="line">      <span class="keyword">while</span> (j &lt; n &amp;&amp; a[j] == <span class="string">' '</span>) j++;             <span class="comment">// skip spaces</span></span><br><span class="line">      <span class="keyword">while</span> (j &lt; n &amp;&amp; a[j] != <span class="string">' '</span>) a[i++] = a[j++]; <span class="comment">// keep non spaces</span></span><br><span class="line">      <span class="keyword">while</span> (j &lt; n &amp;&amp; a[j] == <span class="string">' '</span>) j++;             <span class="comment">// skip spaces</span></span><br><span class="line">      <span class="keyword">if</span> (j &lt; n) a[i++] = <span class="string">' '</span>;                      <span class="comment">// keep only one space</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(a).substring(<span class="number">0</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// reverse a[] from a[i] to a[j]</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">char</span> t = a[i];</span><br><span class="line">      a[i++] = a[j];</span><br><span class="line">      a[j--] = t;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode165-compareVersionNumbers</title>
    <url>/2019/09/11/Leetcode165-compareVersionNumbers/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Compare two version numbers version1 and version2.</p>
<p>If version1 &gt; version2 return 1; if version1 &lt; version2 return -1;otherwise return 0.</p>
<p>You may assume that the version strings are non-empty and contain only digits and the . character.</p>
<p>The . character does not represent a decimal point and is used to separate number sequences.</p>
<p>For instance, 2.5 is not “two and a half” or “half way to version three”, it is the fifth second-level revision of the second first-level revision.</p>
<p>You may assume the default revision number for each level of a version number to be 0. For example, version number 3.4 has a revision number of 3 and 4 for its first and second level revision number. Its third and fourth level revision number are both 0.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: version1 &#x3D; &quot;0.1&quot;, version2 &#x3D; &quot;1.1&quot;</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: version1 &#x3D; &quot;1.0.1&quot;, version2 &#x3D; &quot;1&quot;</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: version1 &#x3D; &quot;7.5.2.4&quot;, version2 &#x3D; &quot;7.5.3&quot;</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: version1 &#x3D; &quot;1.01&quot;, version2 &#x3D; &quot;1.001&quot;</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: Ignoring leading zeroes, both “01” and “001&quot; represent the same number “1”</span><br></pre></td></tr></table></figure><br><strong>Example 5:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: version1 &#x3D; &quot;1.0&quot;, version2 &#x3D; &quot;1.0.0&quot;</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The first version number does not have a third level revision number, which means its third level revision number is default to &quot;0&quot;</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">**Note:**</span><br></pre></td></tr></table></figure><br>Version strings are composed of numeric strings separated by dots . and this numeric strings may have leading zeroes.<br>Version strings do not start or end with dots, and they will not be two consecutive dots.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## Solution</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">class Solution &#123;</span><br><span class="line">    &#x2F;&#x2F; public List&lt;String&gt; convert(String version)&#123;</span><br><span class="line">    &#x2F;&#x2F;     char[] v &#x3D; version.toCharArray(); </span><br><span class="line">    &#x2F;&#x2F;     String seperateTemp &#x3D; &quot;&quot;;</span><br><span class="line">    &#x2F;&#x2F;     List&lt;String&gt; tempNum &#x3D; new ArrayList&lt;String&gt;(); </span><br><span class="line">    &#x2F;&#x2F;     for (char ch : v)&#123;</span><br><span class="line">    &#x2F;&#x2F;         if (seperateTemp.length() &#x3D;&#x3D; 0 &amp;&amp; ch &#x3D;&#x3D; &#39;0&#39;) continue;</span><br><span class="line">    &#x2F;&#x2F;         if (ch &#x3D;&#x3D; &#39;.&#39; &amp;&amp; seperateTemp.length() &gt; 0)&#123;</span><br><span class="line">    &#x2F;&#x2F;             tempNum.add(seperateTemp);</span><br><span class="line">    &#x2F;&#x2F;             seperateTemp &#x3D; &quot;&quot;;</span><br><span class="line">    &#x2F;&#x2F;         &#125;</span><br><span class="line">    &#x2F;&#x2F;         else if (ch &#x3D;&#x3D; &#39;.&#39; &amp;&amp; seperateTemp.length() &#x3D;&#x3D; 0)&#123;</span><br><span class="line">    &#x2F;&#x2F;             tempNum.add(&quot;0&quot;);</span><br><span class="line">    &#x2F;&#x2F;         &#125;</span><br><span class="line">    &#x2F;&#x2F;         else seperateTemp +&#x3D; ch;</span><br><span class="line">    &#x2F;&#x2F;     &#125;</span><br><span class="line">    &#x2F;&#x2F;     if (seperateTemp.length() &#x3D;&#x3D; 0) tempNum.add(&quot;0&quot;);</span><br><span class="line">    &#x2F;&#x2F;     else tempNum.add(seperateTemp);</span><br><span class="line">    &#x2F;&#x2F;     return tempNum;</span><br><span class="line">    &#x2F;&#x2F; &#125;</span><br><span class="line">       </span><br><span class="line">    public int compareVersion(String version1, String version2) &#123;</span><br><span class="line">&#x2F;&#x2F;         stupid method      </span><br><span class="line">&#x2F;&#x2F;         List&lt;String&gt; num1 &#x3D; new ArrayList&lt;String&gt;(convert(version1));</span><br><span class="line">&#x2F;&#x2F;         List&lt;String&gt; num2 &#x3D; new ArrayList&lt;String&gt;(convert(version2));</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">&#x2F;&#x2F;         while (num1.size() &gt; num2.size())&#123;</span><br><span class="line">&#x2F;&#x2F;             num2.add(&quot;0&quot;);</span><br><span class="line">&#x2F;&#x2F;         &#125;</span><br><span class="line">&#x2F;&#x2F;         while (num1.size() &lt; num2.size())&#123;</span><br><span class="line">&#x2F;&#x2F;             num1.add(&quot;0&quot;);</span><br><span class="line">&#x2F;&#x2F;         &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;         for (int i &#x3D; 0; i &lt; num1.size(); i++)&#123;</span><br><span class="line">&#x2F;&#x2F;             int a &#x3D; Integer.parseInt(num1.get(i));</span><br><span class="line">&#x2F;&#x2F;             int b &#x3D; Integer.parseInt(num2.get(i));</span><br><span class="line">&#x2F;&#x2F;             if (a &gt; b) return 1;</span><br><span class="line">&#x2F;&#x2F;             else if (a &lt; b) return -1;</span><br><span class="line">&#x2F;&#x2F;         &#125;</span><br><span class="line">&#x2F;&#x2F;         return 0;</span><br><span class="line">        </span><br><span class="line">&#x2F;&#x2F;      method 2: but if 1.11111111111111111111111.1??</span><br><span class="line">&#x2F;&#x2F;             String[] levels1 &#x3D; version1.split(&quot;\\.&quot;);</span><br><span class="line">&#x2F;&#x2F;     String[] levels2 &#x3D; version2.split(&quot;\\.&quot;);</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;     int length &#x3D; Math.max(levels1.length, levels2.length);</span><br><span class="line">&#x2F;&#x2F;     for (int i&#x3D;0; i&lt;length; i++) &#123;</span><br><span class="line">&#x2F;&#x2F;     	Integer v1 &#x3D; i &lt; levels1.length ? Integer.parseInt(levels1[i]) : 0;</span><br><span class="line">&#x2F;&#x2F;     	Integer v2 &#x3D; i &lt; levels2.length ? Integer.parseInt(levels2[i]) : 0;</span><br><span class="line">&#x2F;&#x2F;     	int compare &#x3D; v1.compareTo(v2);</span><br><span class="line">&#x2F;&#x2F;     	if (compare !&#x3D; 0) &#123;</span><br><span class="line">&#x2F;&#x2F;     		return compare;</span><br><span class="line">&#x2F;&#x2F;     	&#125;</span><br><span class="line">&#x2F;&#x2F;     &#125;</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;     return 0;</span><br><span class="line">        </span><br><span class="line">&#x2F;&#x2F;   Method 3: final good method</span><br><span class="line">        String[] levels1 &#x3D; version1.split(&quot;\\.&quot;);</span><br><span class="line">        String[] levels2 &#x3D; version2.split(&quot;\\.&quot;);</span><br><span class="line">    </span><br><span class="line">        int length &#x3D; Math.max(levels1.length, levels2.length);</span><br><span class="line">        for (int i&#x3D;0; i&lt;length; i++) &#123;</span><br><span class="line">    	    String v1 &#x3D; i &lt; levels1.length ? levels1[i] : &quot;0&quot;;</span><br><span class="line">    	    String v2 &#x3D; i &lt; levels2.length ? levels2[i] : &quot;0&quot;;</span><br><span class="line">    	    while (v1.charAt(0) &#x3D;&#x3D; &#39;0&#39; &amp;&amp; v1.length() &gt; 1) v1 &#x3D; v1.substring(1, v1.length());</span><br><span class="line">            while (v2.charAt(0) &#x3D;&#x3D; &#39;0&#39; &amp;&amp; v2.length() &gt; 1) v2 &#x3D; v2.substring(1, v2.length());</span><br><span class="line">            if (v1.length() &gt; v2.length()) return 1;</span><br><span class="line">            else if (v1.length() &lt; v2.length()) return -1;</span><br><span class="line">            </span><br><span class="line">            for (int j&#x3D;0; j &lt; v1.length(); j++)&#123;</span><br><span class="line">                if (v1.charAt(j) &gt; v2.charAt(j)) return 1;</span><br><span class="line">                else if (v1.charAt(j) &lt; v2.charAt(j)) return -1;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>String</tag>
        <tag>Math</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode166-fractionToRecurringDecimal</title>
    <url>/2020/03/16/Leetcode166-fractionToRecurringDecimal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.</p>
<p>If the fractional part is repeating, enclose the repeating part in parentheses.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: numerator &#x3D; 1, denominator &#x3D; 2</span><br><span class="line">Output: &quot;0.5&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: numerator &#x3D; 2, denominator &#x3D; 1</span><br><span class="line">Output: &quot;2&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: numerator &#x3D; 2, denominator &#x3D; 3</span><br><span class="line">Output: &quot;0.(6)&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fractionToDecimal</span><span class="params">(<span class="keyword">int</span> numerator, <span class="keyword">int</span> denominator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numerator == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        res.append((numerator &gt; <span class="number">0</span>) ^ (denominator &gt; <span class="number">0</span>) ? <span class="string">"-"</span> : <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">long</span> num = Math.abs((<span class="keyword">long</span>)numerator);</span><br><span class="line">        <span class="keyword">long</span> den = Math.abs((<span class="keyword">long</span>)denominator);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//      integral part</span></span><br><span class="line">        res.append(num / den);</span><br><span class="line">        num %= den;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">return</span> res.toString();</span><br><span class="line">        </span><br><span class="line"><span class="comment">//      fraction part</span></span><br><span class="line">        res.append(<span class="string">"."</span>);</span><br><span class="line">        HashMap&lt;Long, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(num, res.length());</span><br><span class="line">        <span class="keyword">while</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            num *= <span class="number">10</span>;</span><br><span class="line">            res.append(num / den);</span><br><span class="line">            num %= den;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(num))&#123;</span><br><span class="line">                res.insert(map.get(num), <span class="string">"("</span>);</span><br><span class="line">                res.append(<span class="string">")"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> map.put(num, res.length());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Hash Table</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode160-intersectionOfTwoLinkedList</title>
    <url>/2020/03/02/Leetcode160-intersectionOfTwoLinkedList/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write a program to find the node at which the intersection of two singly linked lists begins.</p>
<p>For example, the following two linked lists:</p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/13/160_statement.png" alt=""></p>
<p>begin to intersect at node c1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,0,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3</span><br><span class="line">Output: Reference of the node with value &#x3D; 8</span><br><span class="line">Input Explanation: The intersected node&#39;s value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: intersectVal &#x3D; 2, listA &#x3D; [0,9,1,2,4], listB &#x3D; [3,2,4], skipA &#x3D; 3, skipB &#x3D; 1</span><br><span class="line">Output: Reference of the node with value &#x3D; 2</span><br><span class="line">Input Explanation: The intersected node&#39;s value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [0,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">**Example 3:**</span><br><span class="line"></span><br><span class="line">![](https:&#x2F;&#x2F;assets.leetcode.com&#x2F;uploads&#x2F;2018&#x2F;12&#x2F;13&#x2F;160_example_3.png)</span><br></pre></td></tr></table></figure><br>Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<br>Output: null<br>Input Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.<br>Explanation: The two lists do not intersect, so return null.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**Notes:**</span><br><span class="line"></span><br><span class="line">* If the two linked lists have no intersection at all, return null.</span><br><span class="line">* The linked lists must retain their original structure after the function returns.</span><br><span class="line">* You may assume there are no cycles anywhere in the entire linked structure.</span><br><span class="line">* Your code should preferably run in O(n) time and use only O(1) memory.</span><br><span class="line"></span><br><span class="line">## Solution</span><br><span class="line"></span><br><span class="line">**Solution 1**</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123;</span><br><span class="line"> *         val &#x3D; x;</span><br><span class="line"> *         next &#x3D; null;</span><br><span class="line"> *     &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Solution &#123;</span><br><span class="line">&#x2F;&#x2F;     Method 1: calculate length</span><br><span class="line">    public ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123;</span><br><span class="line">        if (headA &#x3D;&#x3D; null || headB &#x3D;&#x3D; null) return null;</span><br><span class="line">        </span><br><span class="line">        int lenA &#x3D; getLen(headA);</span><br><span class="line">        int lenB &#x3D; getLen(headB);</span><br><span class="line">        </span><br><span class="line">        while(lenA &gt; lenB)&#123;</span><br><span class="line">            headA &#x3D; headA.next;</span><br><span class="line">            lenA--;</span><br><span class="line">        &#125;</span><br><span class="line">        while(lenA &lt; lenB)&#123;</span><br><span class="line">            headB &#x3D; headB.next;</span><br><span class="line">            lenB--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        while(headA !&#x3D; headB)&#123;</span><br><span class="line">            headA &#x3D; headA.next;</span><br><span class="line">            headB &#x3D; headB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return headA;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    private int getLen(ListNode node)&#123;</span><br><span class="line">        int res&#x3D; 0;</span><br><span class="line">        while(node !&#x3D; null)&#123;</span><br><span class="line">            res++;</span><br><span class="line">            node &#x3D; node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 2</strong><br>method 2: After the first iteration, the two pointers will be reset to the other list if these two lists have different length. After the longer one reset, the two pointers have the same rest length position to start<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (headA == <span class="keyword">null</span> || headB == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        ListNode a = headA;</span><br><span class="line">        ListNode b = headB;</span><br><span class="line">        <span class="keyword">while</span>(a != b)&#123;</span><br><span class="line">            a = a == <span class="keyword">null</span> ? headB : a.next;</span><br><span class="line">            b = b == <span class="keyword">null</span> ? headA : b.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode169-majorityElement</title>
    <url>/2020/03/16/Leetcode169-majorityElement/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.</p>
<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,2,3]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,2,1,1,1,2,2]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Boyer-Moore Majority Algorithm</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> candidate = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">                candidate = num;</span><br><span class="line">            <span class="keyword">if</span> (candidate == num)</span><br><span class="line">                count++;</span><br><span class="line">            <span class="keyword">else</span> count--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> candidate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode174-dungeonGame</title>
    <url>/2020/02/22/Leetcode174-dungeonGame/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The demons had captured the princess (P) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (K) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.</p>
<p>The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.</p>
<p>Some of the rooms are guarded by demons, so the knight loses health (negative integers) upon entering these rooms; other rooms are either empty (0’s) or contain magic orbs that increase the knight’s health (positive integers).</p>
<p>In order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.</p>
<p>Write a function to determine the knight’s minimum initial health so that he is able to rescue the princess.</p>
<p>For example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-2(k)   -3     3</span><br><span class="line">-5      -10    1</span><br><span class="line">10      30     -5(P)</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>The knight’s health has no upper bound.</li>
<li>Any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateMinimumHP</span><span class="params">(<span class="keyword">int</span>[][] dungeon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dungeon == <span class="keyword">null</span> || dungeon.length == <span class="number">0</span> || dungeon[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = dungeon.length;</span><br><span class="line">        <span class="keyword">int</span> n = dungeon[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        </span><br><span class="line">        dp[m - <span class="number">1</span>][n - <span class="number">1</span>] = Math.max(<span class="number">1</span> - dungeon[m - <span class="number">1</span>][n - <span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">            dp[i][n - <span class="number">1</span>] = Math.max(dp[i + <span class="number">1</span>][n - <span class="number">1</span>] - dungeon[i][n - <span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            dp[m - <span class="number">1</span>][j] = Math.max(dp[m - <span class="number">1</span>][j + <span class="number">1</span>] - dungeon[m - <span class="number">1</span>][j], <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">int</span> down = Math.max(dp[i + <span class="number">1</span>][j] - dungeon[i][j], <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">int</span> right = Math.max(dp[i][j + <span class="number">1</span>] - dungeon[i][j], <span class="number">1</span>);</span><br><span class="line">                dp[i][j] = Math.min(down, right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode171-excelSheetColumnNumber</title>
    <url>/2020/03/02/Leetcode171-excelSheetColumnNumber/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p>
<p>For example:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A -&gt; 1</span><br><span class="line">B -&gt; 2</span><br><span class="line">C -&gt; 3</span><br><span class="line">...</span><br><span class="line">Z -&gt; 26</span><br><span class="line">AA -&gt; 27</span><br><span class="line">AB -&gt; 28 </span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;A&quot;</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;AB&quot;</span><br><span class="line">Output: 28</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;ZY&quot;</span><br><span class="line">Output: 701</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            res += cur * (s.charAt(i) - <span class="string">'A'</span> + <span class="number">1</span>);</span><br><span class="line">            cur *= <span class="number">26</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode186-reverseWordsinaStringII</title>
    <url>/2019/10/22/Leetcode186-reverseWordsinaStringII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an input string , reverse the string word by word. </p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:  [&quot;t&quot;,&quot;h&quot;,&quot;e&quot;,&quot; &quot;,&quot;s&quot;,&quot;k&quot;,&quot;y&quot;,&quot; &quot;,&quot;i&quot;,&quot;s&quot;,&quot; &quot;,&quot;b&quot;,&quot;l&quot;,&quot;u&quot;,&quot;e&quot;]</span><br><span class="line">Output: [&quot;b&quot;,&quot;l&quot;,&quot;u&quot;,&quot;e&quot;,&quot; &quot;,&quot;i&quot;,&quot;s&quot;,&quot; &quot;,&quot;s&quot;,&quot;k&quot;,&quot;y&quot;,&quot; &quot;,&quot;t&quot;,&quot;h&quot;,&quot;e&quot;]</span><br></pre></td></tr></table></figure>
<p><strong>Note: </strong></p>
<ul>
<li>A word is defined as a sequence of non-space characters.</li>
<li>The input string does not contain leading or trailing spaces.</li>
<li>The words are always separated by a single space.</li>
<li>Follow up: Could you do it in-place without allocating extra space?</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseWords</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        swap(s, <span class="number">0</span>, s.length - <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(end &lt; s.length)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s[end] == <span class="string">' '</span>)&#123;</span><br><span class="line">                swap(s, start, end - <span class="number">1</span>);</span><br><span class="line">                start = end + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            end++;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(s, start, end - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] s, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">char</span> tmp = s[i];</span><br><span class="line">            s[i] = s[j];</span><br><span class="line">            s[j] = tmp;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode199-binaryTreeRightSideView</title>
    <url>/2020/03/02/Leetcode199-binaryTreeRightSideView/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,null,5,null,4]</span><br><span class="line">Output: [1, 3, 4]</span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">   1            &lt;---</span><br><span class="line"> &#x2F;   \</span><br><span class="line">2     3         &lt;---</span><br><span class="line"> \     \</span><br><span class="line">  5     4       &lt;---</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">rightSideView</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                TreeNode node = q.poll();</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) q.offer(node.left);</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) q.offer(node.right);</span><br><span class="line">                <span class="keyword">if</span> (i == size - <span class="number">1</span>) res.add(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>BFS</tag>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode173-binarySearchTreeIterator</title>
    <url>/2020/03/02/Leetcode173-binarySearchTreeIterator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.</p>
<p>Calling next() will return the next smallest number in the BST.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>!()[<a href="https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png">https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png</a>]<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BSTIterator iterator &#x3D; new BSTIterator(root);</span><br><span class="line">iterator.next();    &#x2F;&#x2F; return 3</span><br><span class="line">iterator.next();    &#x2F;&#x2F; return 7</span><br><span class="line">iterator.hasNext(); &#x2F;&#x2F; return true</span><br><span class="line">iterator.next();    &#x2F;&#x2F; return 9</span><br><span class="line">iterator.hasNext(); &#x2F;&#x2F; return true</span><br><span class="line">iterator.next();    &#x2F;&#x2F; return 15</span><br><span class="line">iterator.hasNext(); &#x2F;&#x2F; return true</span><br><span class="line">iterator.next();    &#x2F;&#x2F; return 20</span><br><span class="line">iterator.hasNext(); &#x2F;&#x2F; return false</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ul>
<li>next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.</li>
<li>You may assume that next() call will always be valid, that is, there will be at least a next smallest number in the BST when next() is called.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Stack&lt;TreeNode&gt; st;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BSTIterator</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        pushAll(root);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** <span class="doctag">@return</span> the next smallest number */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TreeNode res = st.pop();</span><br><span class="line">        pushAll(res.right);</span><br><span class="line">        <span class="keyword">return</span> res.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** <span class="doctag">@return</span> whether we have a next smallest number */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !st.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pushAll</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>)&#123;</span><br><span class="line">            st.push(node);</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
        <tag>Design</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode202-happyNumber</title>
    <url>/2020/02/20/Leetcode202-happyNumber/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write an algorithm to determine if a number is “happy”.</p>
<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 19</span><br><span class="line">Output: true</span><br><span class="line">Explanation: </span><br><span class="line">12 + 92 &#x3D; 82</span><br><span class="line">82 + 22 &#x3D; 68</span><br><span class="line">62 + 82 &#x3D; 100</span><br><span class="line">12 + 02 + 02 &#x3D; 1</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(n);</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">                sum += Math.pow((n % <span class="number">10</span>), <span class="number">2</span>);</span><br><span class="line">                n /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(sum)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            set.add(sum);</span><br><span class="line">            n = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Bloomberg</tag>
        <tag>Math</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode200-numberOfIslands</title>
    <url>/2019/10/07/Leetcode200-numberOfIslands/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2d grid map of ‘1’s (land) and ‘0’s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">11110</span><br><span class="line">11010</span><br><span class="line">11000</span><br><span class="line">00000</span><br><span class="line"></span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">11000</span><br><span class="line">11000</span><br><span class="line">00100</span><br><span class="line">00011</span><br><span class="line"></span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span> || grid[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = grid.length;</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    res++;</span><br><span class="line">                    clear(grid,i,j,m,n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid[x][y] == <span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        grid[x][y] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx &gt;=<span class="number">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; n) clear(grid,nx,ny,m,n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>DFS</tag>
        <tag>BFS</tag>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode198-houseRobber</title>
    <url>/2019/10/13/Leetcode198-houseRobber/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Rob house 1 (money &#x3D; 1) and then rob house 3 (money &#x3D; 3).</span><br><span class="line">             Total amount you can rob &#x3D; 1 + 3 &#x3D; 4.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,7,9,3,1]</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: Rob house 1 (money &#x3D; 2), rob house 3 (money &#x3D; 9) and rob house 5 (money &#x3D; 1).</span><br><span class="line">             Total amount you can rob &#x3D; 2 + 9 + 1 &#x3D; 12.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums.length == <span class="number">2</span>) <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>], dp[i-<span class="number">2</span>]+nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode188-bestTimeToBuyAndSellStockIV</title>
    <url>/2020/03/16/Leetcode188-bestTimeToBuyAndSellStockIV/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Say you have an array for which the i-th element is the price of a given stock on day i.</p>
<p>Design an algorithm to find the maximum profit. You may complete at most k transactions.</p>
<p><strong>Note:</strong></p>
<p>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,4,1], k &#x3D; 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: Buy on day 1 (price &#x3D; 2) and sell on day 2 (price &#x3D; 4), profit &#x3D; 4-2 &#x3D; 2.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,2,6,5,0,3], k &#x3D; 2</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Buy on day 2 (price &#x3D; 2) and sell on day 3 (price &#x3D; 6), profit &#x3D; 6-2 &#x3D; 4.</span><br><span class="line">             Then buy on day 5 (price &#x3D; 0) and sell on day 6 (price &#x3D; 3), profit &#x3D; 3-0 &#x3D; 3.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (k &gt;=  prices.length/<span class="number">2</span>) &#123;</span><br><span class="line">		    <span class="keyword">int</span> maxPro = <span class="number">0</span>;</span><br><span class="line">		    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">			    <span class="keyword">if</span> (prices[i] &gt; prices[i-<span class="number">1</span>])</span><br><span class="line">				    maxPro += prices[i] - prices[i-<span class="number">1</span>];</span><br><span class="line">		    &#125;</span><br><span class="line">		    <span class="keyword">return</span> maxPro;</span><br><span class="line">	    &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> n = prices.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[k+<span class="number">1</span>][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line">    	    <span class="keyword">int</span> localMax = dp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[<span class="number">0</span>];</span><br><span class="line">    	    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">    		    dp[i][j] = Math.max(dp[i][j-<span class="number">1</span>],  prices[j] + localMax);</span><br><span class="line">    		    localMax = Math.max(localMax, dp[i-<span class="number">1</span>][j] - prices[j]);</span><br><span class="line">    	    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[k][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode204-countPrimes</title>
    <url>/2019/10/14/Leetcode204-countPrimes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Count the number of prime numbers less than a non-negative number, n.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 10</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span>[] notPrimes = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="keyword">int</span> res =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (notPrimes[i] == <span class="keyword">false</span>)&#123;</span><br><span class="line">                res ++;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; i * j &lt; n; j++) notPrimes[i * j] = <span class="keyword">true</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode208-implementTrie(Prefix_Tree)</title>
    <url>/2019/11/05/Leetcode208-implementTrie-Prefix-Tree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement a trie with insert, search, and startsWith methods.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Trie trie &#x3D; new Trie();</span><br><span class="line"></span><br><span class="line">trie.insert(&quot;apple&quot;);</span><br><span class="line">trie.search(&quot;apple&quot;);   &#x2F;&#x2F; returns true</span><br><span class="line">trie.search(&quot;app&quot;);     &#x2F;&#x2F; returns false</span><br><span class="line">trie.startsWith(&quot;app&quot;); &#x2F;&#x2F; returns true</span><br><span class="line">trie.insert(&quot;app&quot;);   </span><br><span class="line">trie.search(&quot;app&quot;);     &#x2F;&#x2F; returns true</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>You may assume that all inputs are consist of lowercase letters a-z.</li>
<li>All inputs are guaranteed to be non-empty strings.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isWord;</span><br><span class="line">        TrieNode[] next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span></span>&#123;</span><br><span class="line">            next = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">            isWord = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    TrieNode root;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Inserts a word into the trie. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] wArray = word.toCharArray();</span><br><span class="line">        TrieNode cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: wArray)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.next[ch - <span class="string">'a'</span>] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                cur.next[ch - <span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                cur = cur.next[ch - <span class="string">'a'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cur = cur.next[ch - <span class="string">'a'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.isWord = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns if the word is in the trie. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        TrieNode cur = root;</span><br><span class="line">        <span class="keyword">char</span>[] wArray = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: wArray)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.next[ch - <span class="string">'a'</span>] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span> cur = cur.next[ch - <span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.isWord;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns if there is any word in the trie that starts with the given prefix. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        TrieNode cur = root;</span><br><span class="line">        <span class="keyword">char</span>[] wArray = prefix.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: wArray)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.next[ch - <span class="string">'a'</span>] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span> cur = cur.next[ch - <span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Trie obj = new Trie();</span></span><br><span class="line"><span class="comment"> * obj.insert(word);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.search(word);</span></span><br><span class="line"><span class="comment"> * boolean param_3 = obj.startsWith(prefix);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Design</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode206-reverseLinkedList</title>
    <url>/2019/09/18/Leetcode206-reverseLinkedList/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Reverse a singly linked list.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">Output: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure>
<p><strong>Follow up:</strong><br>A linked list can be reversed either iteratively or recursively. Could you implement both?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">Recursion</span><span class="params">(ListNode head, ListNode newHead)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> newHead;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode next = head.next;</span><br><span class="line">        head.next = newHead;</span><br><span class="line">        <span class="keyword">return</span> Recursion(next, head);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ListNode newHead = null;</span></span><br><span class="line">        <span class="comment">// while (head != null)&#123;</span></span><br><span class="line">        <span class="comment">//     ListNode next = head.next;</span></span><br><span class="line">        <span class="comment">//     head.next = newHead;</span></span><br><span class="line">        <span class="comment">//     newHead = head;</span></span><br><span class="line">        <span class="comment">//     head = next;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return newHead;</span></span><br><span class="line">        <span class="keyword">return</span> Recursion(head, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode203-removeLinkedListElements</title>
    <url>/2020/02/20/Leetcode203-removeLinkedListElements/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Remove all elements from a linked list of integers that have value val.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:  1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val &#x3D; 6</span><br><span class="line">Output: 1-&gt;2-&gt;3-&gt;4-&gt;5</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        ListNode pre = dummy;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.val == val)</span><br><span class="line">                pre.next = cur.next;</span><br><span class="line">            <span class="keyword">else</span> pre = cur;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode205-isomorphicStrings</title>
    <url>/2019/11/05/Leetcode205-isomorphicStrings/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings s and t, determine if they are isomorphic.</p>
<p>Two strings are isomorphic if the characters in s can be replaced to get t.</p>
<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;egg&quot;, t &#x3D; &quot;add&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;foo&quot;, t &#x3D; &quot;bar&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;paper&quot;, t &#x3D; &quot;title&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Note:</strong><br>You may assume both s and t have the same length.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIsomorphic</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || s.length() == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">char</span>[] a1 = s.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] a2 = t.toCharArray();</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;Character, Character&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(a1[<span class="number">0</span>], a2[<span class="number">0</span>]);</span><br><span class="line">        HashSet&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(a2[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a1.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (a1[i] == a1[i-<span class="number">1</span>] &amp;&amp; a2[i] == a2[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (a1[i] != a1[i-<span class="number">1</span>] &amp;&amp; a2[i] != a2[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(a1[i]))&#123;</span><br><span class="line">                    <span class="keyword">if</span> (map.get(a1[i]) == a2[i]) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (set.contains(a2[i])) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    map.put(a1[i], a2[i]);</span><br><span class="line">                    set.add(a2[i]);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode207-courseSchedule</title>
    <url>/2019/10/05/Leetcode207-courseSchedule/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are a total of n courses you have to take, labeled from 0 to n-1.</p>
<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]</p>
<p>Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2, [[1,0]] </span><br><span class="line">Output: true</span><br><span class="line">Explanation: There are a total of 2 courses to take. </span><br><span class="line">             To take course 1 you should have finished course 0. So it is possible.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2, [[1,0],[0,1]]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: There are a total of 2 courses to take. </span><br><span class="line">             To take course 1 you should have finished course 0, and to take course 0 you should</span><br><span class="line">             also have finished course 1. So it is impossible.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canFinish</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numCourses == <span class="number">0</span> || prerequisites == <span class="keyword">null</span> || prerequisites.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;Integer&gt; red = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; adj = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++) adj.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] li: prerequisites)&#123;</span><br><span class="line">            map.put(li[<span class="number">0</span>], map.getOrDefault(li[<span class="number">0</span>], <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            adj.get(li[<span class="number">1</span>]).add(li[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(li[<span class="number">1</span>])) map.put(li[<span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(i))&#123;</span><br><span class="line">                <span class="keyword">if</span> (map.get(i) == <span class="number">0</span>) red.offer(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!red.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = red.poll();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i: adj.get(tmp))&#123;</span><br><span class="line">                <span class="keyword">if</span> (map.get(i) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    map.put(i, map.get(i)-<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (map.get(i) == <span class="number">0</span>)&#123;</span><br><span class="line">                        red.offer(i);                       </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> it: map.keySet()) </span><br><span class="line">            <span class="keyword">if</span> (map.get(it) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>Amazon</tag>
        <tag>Topological Sort</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode209-minimumSizeSubarraySum</title>
    <url>/2020/03/28/Leetcode209-minimumSizeSubarraySum/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn’t one, return 0 instead.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; 7, nums &#x3D; [2,3,1,2,4,3]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: the subarray [4,3] has the minimal length under the problem constraint.</span><br></pre></td></tr></table></figure>
<p><strong>Follow up:</strong></p>
<p>If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). </p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1:</strong> Two Pointers, O(N)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">// Two Pointers, O(n)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; nums.length)&#123;</span><br><span class="line">            cur += nums[right];</span><br><span class="line">            <span class="keyword">if</span>(cur &lt; s)&#123;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(cur &gt;= s)&#123;</span><br><span class="line">                    res = Math.min(res, right - left + <span class="number">1</span>);</span><br><span class="line">                    cur -= nums[left];</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == Integer.MAX_VALUE ? <span class="number">0</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2:</strong> Follow up, Bianry search, O(NlogN)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//     O(NlongN): bianry search</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] sums = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sums.length; i++) sums[i] = sums[i - <span class="number">1</span>] + nums[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> minLen = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> end = binarySearch(i + <span class="number">1</span>, sums.length - <span class="number">1</span>, sums[i] + s, sums);</span><br><span class="line">            <span class="keyword">if</span> (end == sums.length) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (end - i &lt; minLen) minLen = end - i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minLen == Integer.MAX_VALUE ? <span class="number">0</span> : minLen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> lo, <span class="keyword">int</span> hi, <span class="keyword">int</span> key, <span class="keyword">int</span>[] sums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">           <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">           <span class="keyword">if</span> (sums[mid] &gt;= key)&#123;</span><br><span class="line">               hi = mid - <span class="number">1</span>;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               lo = mid + <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode210-courseScheduleII</title>
    <url>/2019/10/12/Leetcode210-courseScheduleII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are a total of n courses you have to take, labeled from 0 to n-1.</p>
<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]</p>
<p>Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.</p>
<p>There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2, [[1,0]] </span><br><span class="line">Output: [0,1]</span><br><span class="line">Explanation: There are a total of 2 courses to take. To take course 1 you should have finished   </span><br><span class="line">             course 0. So the correct course order is [0,1] .</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 4, [[1,0],[2,0],[3,1],[3,2]]</span><br><span class="line">Output: [0,1,2,3] or [0,2,1,3]</span><br><span class="line">Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both     </span><br><span class="line">             courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. </span><br><span class="line">             So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ol>
<li>The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.</li>
<li>You may assume that there are no duplicate edges in the input prerequisites.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] findOrder(<span class="keyword">int</span> numCourses, <span class="keyword">int</span>[][] prerequisites) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numCourses == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[numCourses];</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        HashMap&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; blue = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; i++)&#123;</span><br><span class="line">            blue.put(i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] pair: prerequisites)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(pair[<span class="number">1</span>])) map.get(pair[<span class="number">1</span>]).add(pair[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(pair[<span class="number">1</span>], <span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">                map.get(pair[<span class="number">1</span>]).add(pair[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            blue.put(pair[<span class="number">0</span>], blue.get(pair[<span class="number">0</span>]) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> node: blue.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span> (blue.get(node) == <span class="number">0</span>)&#123;</span><br><span class="line">                q.offer(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = q.poll();</span><br><span class="line">            blue.remove(cur);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(cur))&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> next: map.get(cur))&#123;</span><br><span class="line">                    blue.put(next, blue.get(next)-<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (blue.get(next) == <span class="number">0</span>)&#123;</span><br><span class="line">                        blue.remove(next);</span><br><span class="line">                        q.offer(next);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res[index] = cur;</span><br><span class="line">            index ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (blue.size() != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>Amazon</tag>
        <tag>Topological Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode215-kthLargestElementInAnArray</title>
    <url>/2019/09/18/Leetcode215-kthLargestElementInAnArray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,2,1,5,6,4] and k &#x3D; 2</span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure></p>
<p><strong>Example</strong> 2:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,2,3,1,2,4,5,5,6] and k &#x3D; 4</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Solution-1-Heap"><a href="#Solution-1-Heap" class="headerlink" title="Solution 1: Heap"></a>Solution 1: Heap</h3><p><strong>Time Complexity:</strong> <script type="math/tex">O(NlogK)</script></p>
<p><strong>Space Complexity:</strong> <script type="math/tex">O(K)</script></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// sort and print</span></span><br><span class="line">        <span class="comment">// Arrays.sort(nums);</span></span><br><span class="line">        <span class="comment">// return nums[nums.length - k];</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//PriorityQueue</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer a, Integer b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a-b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);           </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> e : nums)&#123;</span><br><span class="line">            pq.offer(e);</span><br><span class="line">            <span class="keyword">if</span> (pq.size() &gt; k)&#123;</span><br><span class="line">                pq.poll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pq.poll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-2-Quick-Select"><a href="#Solution-2-Quick-Select" class="headerlink" title="Solution 2: Quick Select"></a>Solution 2: Quick Select</h3><p><strong>Time Complexity:</strong> <script type="math/tex">O(N)</script>, worest case: <script type="math/tex">O(N^2)</script></p>
<p><strong>Space Complexity:</strong> <script type="math/tex">O(1)</script></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> quickSelect(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">quickSelect</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = low;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// use quick sort&#x27;s idea</span></span><br><span class="line">        <span class="comment">// put nums that are &lt;= pivot to the left</span></span><br><span class="line">        <span class="comment">// put nums that are  &gt; pivot to the right</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = low; j &lt; high; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &lt;= nums[high]) &#123;</span><br><span class="line">            swap(nums, pivot++, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(nums, pivot, high);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// count the nums that are &gt; pivot from high</span></span><br><span class="line">        <span class="keyword">int</span> count = high - pivot + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// pivot is the one!</span></span><br><span class="line">        <span class="keyword">if</span> (count == k) <span class="keyword">return</span> nums[pivot];</span><br><span class="line">        <span class="comment">// pivot is too small, so it must be on the right</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; k) <span class="keyword">return</span> quickSelect(nums, pivot + <span class="number">1</span>, high, k);</span><br><span class="line">        <span class="comment">// pivot is too big, so it must be on the left</span></span><br><span class="line">        <span class="keyword">return</span> quickSelect(nums, low, pivot - <span class="number">1</span>, k - count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Sort</tag>
        <tag>Priority Queue</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode212-wordSearchII</title>
    <url>/2019/10/09/Leetcode212-wordSearchII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2D board and a list of words from the dictionary, find all words in the board.</p>
<p>Each word must be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">board &#x3D; [</span><br><span class="line">  [&#39;o&#39;,&#39;a&#39;,&#39;a&#39;,&#39;n&#39;],</span><br><span class="line">  [&#39;e&#39;,&#39;t&#39;,&#39;a&#39;,&#39;e&#39;],</span><br><span class="line">  [&#39;i&#39;,&#39;h&#39;,&#39;k&#39;,&#39;r&#39;],</span><br><span class="line">  [&#39;i&#39;,&#39;f&#39;,&#39;l&#39;,&#39;v&#39;]</span><br><span class="line">]</span><br><span class="line">words &#x3D; [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;]</span><br><span class="line"></span><br><span class="line">Output: [&quot;eat&quot;,&quot;oath&quot;]</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>All inputs are consist of lowercase letters a-z.</li>
<li>The values of words are distinct.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Solution with hashset<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findWords</span><span class="params">(<span class="keyword">char</span>[][] board, String[] words)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board == <span class="keyword">null</span> || board.length == <span class="number">0</span> || board[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        </span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        HashSet&lt;String&gt; dic = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s: words)&#123;</span><br><span class="line">            dic.add(s);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.length(); i++)&#123;</span><br><span class="line">                set.add(s.substring(<span class="number">0</span>,i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = board.length;</span><br><span class="line">        <span class="keyword">int</span> n = board[<span class="number">0</span>].length;</span><br><span class="line">        HashSet&lt;String&gt; res = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[][] dir = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;-<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,&#123;<span class="number">0</span> ,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                String s = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">                visited[i][j]  = <span class="keyword">true</span>;</span><br><span class="line">                dfs(board, m, n, i, j, dic, set, res, dir, s, visited);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> x, <span class="keyword">int</span> y, HashSet&lt;String&gt; dic, HashSet&lt;String&gt; set, HashSet&lt;String&gt; res, <span class="keyword">int</span>[][] dir, String word, <span class="keyword">boolean</span>[][] visited)</span></span>&#123;</span><br><span class="line">        word += board[x][y];</span><br><span class="line">        <span class="keyword">if</span> (dic.contains(word))&#123;</span><br><span class="line">            res.add(word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!set.contains(word)) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; n &amp;&amp; !visited[nx][ny])&#123;</span><br><span class="line">                visited[nx][ny] = <span class="keyword">true</span>;</span><br><span class="line">                dfs(board, m, n, nx, ny, dic, set, res, dir, word, visited);</span><br><span class="line">                visited[nx][ny] = <span class="keyword">false</span>;                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Solution 2: Trie + DFS<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findWords</span><span class="params">(<span class="keyword">char</span>[][] board, String[] words)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;String&gt; res = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        TrieNode root = buildTrie(words);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                dfs (board, i, j, root, res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> i, <span class="keyword">int</span> j, TrieNode p, HashSet&lt;String&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c = board[i][j];</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'#'</span> || p.next[c - <span class="string">'a'</span>] == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        p = p.next[c - <span class="string">'a'</span>];</span><br><span class="line">        <span class="keyword">if</span> (p.word != <span class="keyword">null</span>) &#123;   <span class="comment">// found one</span></span><br><span class="line">            res.add(p.word);</span><br><span class="line">            p.word = <span class="keyword">null</span>;     <span class="comment">// de-duplicate</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        board[i][j] = <span class="string">'#'</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) dfs(board, i - <span class="number">1</span>, j ,p, res); </span><br><span class="line">        <span class="keyword">if</span> (j &gt; <span class="number">0</span>) dfs(board, i, j - <span class="number">1</span>, p, res);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; board.length - <span class="number">1</span>) dfs(board, i + <span class="number">1</span>, j, p, res); </span><br><span class="line">        <span class="keyword">if</span> (j &lt; board[<span class="number">0</span>].length - <span class="number">1</span>) dfs(board, i, j + <span class="number">1</span>, p, res); </span><br><span class="line">        board[i][j] = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TrieNode <span class="title">buildTrie</span><span class="params">(String[] words)</span> </span>&#123;</span><br><span class="line">        TrieNode root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">        <span class="keyword">for</span> (String w : words) &#123;</span><br><span class="line">            TrieNode p = root;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c : w.toCharArray()) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = c - <span class="string">'a'</span>;</span><br><span class="line">                <span class="keyword">if</span> (p.next[i] == <span class="keyword">null</span>) p.next[i] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                p = p.next[i];</span><br><span class="line">            &#125;</span><br><span class="line">        p.word = w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">        TrieNode[] next = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">        String word;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Hash Table</tag>
        <tag>Amazon</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode217-containsDuplicate</title>
    <url>/2019/10/14/Leetcode217-containsDuplicate/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers, find if the array contains any duplicates.</p>
<p>Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,1]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,1,1,3,3,4,3,2,4,2]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(num)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode218-theSkylineProblem</title>
    <url>/2019/10/23/Leetcode218-theSkylineProblem/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A city’s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Now suppose you are given the locations and height of all the buildings as shown on a cityscape photo (Figure A), write a program to output the skyline formed by these buildings collectively (Figure B).<br><img src="https://assets.leetcode.com/uploads/2018/10/22/skyline1.png" alt=""><br><img src="https://assets.leetcode.com/uploads/2018/10/22/skyline2.png" alt=""><br>The geometric information of each building is represented by a triplet of integers [Li, Ri, Hi], where Li and Ri are the x coordinates of the left and right edge of the ith building, respectively, and Hi is its height. It is guaranteed that 0 ≤ Li, Ri ≤ INT_MAX, 0 &lt; Hi ≤ INT_MAX, and Ri - Li &gt; 0. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.</p>
<p>For instance, the dimensions of all buildings in Figure A are recorded as: [ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] .</p>
<p>The output is a list of “key points” (red dots in Figure B) in the format of [ [x1,y1], [x2, y2], [x3, y3], … ] that uniquely defines a skyline. A key point is the left endpoint of a horizontal line segment. Note that the last key point, where the rightmost building ends, is merely used to mark the termination of the skyline, and always has zero height. Also, the ground in between any two adjacent buildings should be considered part of the skyline contour.</p>
<p>For instance, the skyline in Figure B should be represented as:[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ].</p>
<p><strong>Notes:</strong></p>
<ul>
<li>The number of buildings in any input list is guaranteed to be in the range [0, 10000].</li>
<li>The input list is already sorted in ascending order by the left x position Li.</li>
<li>The output list must be sorted by the x position.<br>*There must be no consecutive horizontal lines of equal height in the output skyline. For instance, […[2 3], [4 5], [7 5], [11 5], [12 7]…] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: […[2 3], [4 5], [12 7], …]</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; getSkyline(<span class="keyword">int</span>[][] buildings) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; height = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] building: buildings)&#123;</span><br><span class="line">            height.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;building[<span class="number">0</span>], -building[<span class="number">2</span>]&#125;);</span><br><span class="line">            height.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;building[<span class="number">1</span>], building[<span class="number">2</span>]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(height, (a, b) -&gt; a[<span class="number">0</span>] == b[<span class="number">0</span>] ? a[<span class="number">1</span>] - b[<span class="number">1</span>] : a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; b - a);</span><br><span class="line">        pq.offer(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> preHeight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] h: height)&#123;</span><br><span class="line">            <span class="keyword">if</span> (h[<span class="number">1</span>] &lt; <span class="number">0</span>)</span><br><span class="line">                pq.offer(-h[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">else</span> pq.remove(h[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> curHeight = pq.peek();</span><br><span class="line">            <span class="keyword">if</span> (curHeight != preHeight)&#123;</span><br><span class="line">                List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                tmp.add(h[<span class="number">0</span>]);</span><br><span class="line">                tmp.add(curHeight);</span><br><span class="line">                res.add(tmp);</span><br><span class="line">                preHeight = curHeight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode222-countCompleteTreeNodes</title>
    <url>/2019/11/05/Leetcode222-countCompleteTreeNodes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a complete binary tree, count the number of nodes.</p>
<p><strong>Note:</strong></p>
<p>Definition of a complete binary tree from Wikipedia:<br>In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   3</span><br><span class="line"> &#x2F; \  &#x2F;</span><br><span class="line">4  5 6</span><br><span class="line"></span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Method 1: O(n)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;       </span><br><span class="line">        <span class="keyword">return</span> countNodes(root.left) + countNodes(root.right) + <span class="number">1</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Method 2: $O(log^2(n))$<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = leftHeight(root);</span><br><span class="line">        <span class="keyword">int</span> right = rightHeight(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (left == right)</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; left) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> countNodes(root.left) + countNodes(root.right) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">leftHeight</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dep = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">            node = node.left;</span><br><span class="line">            dep++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dep;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rightHeight</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dep = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">            node = node.right;</span><br><span class="line">            dep++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dep;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Bloomberg</tag>
        <tag>Binary Search</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode219-containsDuplicateII</title>
    <url>/2020/02/20/Leetcode219-containsDuplicateII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1</strong>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [1,2,3,1], k &#x3D; 3</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [1,0,1,1], k &#x3D; 1</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [1,2,3,1,2,3], k &#x3D; 2</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; k) set.remove(nums[i - k - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (!set.add(nums[i])) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode229-majorityElementII</title>
    <url>/2020/03/10/Leetcode229-majorityElementII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.</p>
<p>Note: The algorithm should run in linear time and in O(1) space.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,2,3]</span><br><span class="line">Output: [3]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,1,1,3,3,2,2,2]</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Boyer-Moore Majority Algorithm</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> candidate1 = nums[<span class="number">0</span>], candidate2 = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> count1 = <span class="number">0</span>, count2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">            <span class="keyword">if</span> (candidate1 == num)</span><br><span class="line">                count1++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (candidate2 == num)</span><br><span class="line">                count2++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (count1 == <span class="number">0</span>)&#123;</span><br><span class="line">                candidate1 = num;</span><br><span class="line">                count1++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (count2 == <span class="number">0</span>)&#123;</span><br><span class="line">                candidate2 = num;</span><br><span class="line">                count2++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                count1--;</span><br><span class="line">                count2--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        count1 = <span class="number">0</span>;</span><br><span class="line">        count2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">            <span class="keyword">if</span> (candidate1 == num) count1++;</span><br><span class="line">            <span class="keyword">if</span> (candidate2 == num) count2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count1 &gt; nums.length / <span class="number">3</span>)</span><br><span class="line">            res.add(candidate1);</span><br><span class="line">        <span class="keyword">if</span> (candidate1 != candidate2 &amp;&amp; count2 &gt; nums.length / <span class="number">3</span>)</span><br><span class="line">            res.add(candidate2);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode224-basicCalculator</title>
    <url>/2019/10/14/Leetcode224-basicCalculator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement a basic calculator to evaluate a simple expression string.</p>
<p>The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;1 + 1&quot;</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot; 2-1 + 2 &quot;</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;(1+(4+5+2)-3)+(6+8)&quot;</span><br><span class="line">Output: 23</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ul>
<li>You may assume that the given expression is always valid.</li>
<li>Do not use the eval built-in library function.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sign = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> ch = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(ch))&#123;</span><br><span class="line">                number = number*<span class="number">10</span> + (<span class="keyword">int</span>)(ch - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">                res += sign * number;</span><br><span class="line">                number = <span class="number">0</span>;</span><br><span class="line">                sign = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">                res += sign * number;</span><br><span class="line">                number = <span class="number">0</span>;</span><br><span class="line">                sign = -<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                st.push(res);</span><br><span class="line">                st.push(sign);</span><br><span class="line">                res = <span class="number">0</span>;</span><br><span class="line">                sign = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                res += sign * number;</span><br><span class="line">                number = <span class="number">0</span>;</span><br><span class="line">                res *= st.pop();</span><br><span class="line">                res += st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (number != <span class="number">0</span>) res += sign * number;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Amazon</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode213-houseRobberII</title>
    <url>/2020/02/20/Leetcode213-houseRobberII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night.</strong></p>
<p>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police.</strong></p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,3,2]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: You cannot rob house 1 (money &#x3D; 2) and then rob house 3 (money &#x3D; 2),</span><br><span class="line">             because they are adjacent houses.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,1]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Rob house 1 (money &#x3D; 1) and then rob house 3 (money &#x3D; 3).</span><br><span class="line">             Total amount you can rob &#x3D; 1 + 3 &#x3D; 4.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">2</span>) <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = Math.max(dp[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; nums.length-<span class="number">1</span>; i++)</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>], dp[i-<span class="number">2</span>] + nums[i]);</span><br><span class="line">        <span class="keyword">int</span> res = dp[nums.length - <span class="number">2</span>];</span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">1</span>] = nums[<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">2</span>] = Math.max(dp[<span class="number">1</span>], nums[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; nums.length; i++)</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>], dp[i-<span class="number">2</span>] + nums[i]);</span><br><span class="line">        res = Math.max(res, dp[nums.length - <span class="number">1</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode225-implementStackUsingQueues</title>
    <url>/2019/10/11/Leetcode225-implementStackUsingQueues/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement the following operations of a stack using queues.</p>
<ul>
<li>push(x) — Push element x onto stack.</li>
<li>pop() — Removes the element on top of the stack.</li>
<li>top() — Get the top element.</li>
<li>empty() — Return whether the stack is empty.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyStack stack &#x3D; new MyStack();</span><br><span class="line"></span><br><span class="line">stack.push(1);</span><br><span class="line">stack.push(2);  </span><br><span class="line">stack.top();   &#x2F;&#x2F; returns 2</span><br><span class="line">stack.pop();   &#x2F;&#x2F; returns 2</span><br><span class="line">stack.empty(); &#x2F;&#x2F; returns false</span><br></pre></td></tr></table></figure>
<p><strong>Notes:</strong></p>
<ul>
<li>You must use only standard operations of a queue — which means only push to back, peek/pop from front, size, and is empty operations are valid.</li>
<li>Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.</li>
<li>You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Queue&lt;Integer&gt; q;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x onto stack. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        q.offer(x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q.size()-<span class="number">1</span>; i++)</span><br><span class="line">            q.offer(q.poll());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the top element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (q.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Amazon</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode230-kthSmallestElementinaBST</title>
    <url>/2019/10/13/Leetcode230-kthSmallestElementinaBST/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.</p>
<p><strong>Note:</strong><br>You may assume k is always valid, 1 ≤ k ≤ BST’s total elements.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [3,1,4,null,2], k &#x3D; 1</span><br><span class="line">   3</span><br><span class="line">  &#x2F; \</span><br><span class="line"> 1   4</span><br><span class="line">  \</span><br><span class="line">   2</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [5,3,6,2,4,null,null,1], k &#x3D; 3</span><br><span class="line">       5</span><br><span class="line">      &#x2F; \</span><br><span class="line">     3   6</span><br><span class="line">    &#x2F; \</span><br><span class="line">   2   4</span><br><span class="line">  &#x2F;</span><br><span class="line"> 1</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> res;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        count = k;</span><br><span class="line">        inOrder(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) inOrder(node.left);</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</span><br><span class="line">            res = node.val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) inOrder(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode221-maximalSquare</title>
    <url>/2019/10/28/Leetcode221-maximalSquare/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line"></span><br><span class="line">1 0 1 0 0</span><br><span class="line">1 0 1 1 1</span><br><span class="line">1 1 1 1 1</span><br><span class="line">1 0 0 1 0</span><br><span class="line"></span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Method 1</p>
<p>dp[i][j] represents the length of the square which lower right corner is located at (i, j).</p>
<p>If the value of this cell is also 1, then the length of the square is the minimum of: the one above, its left, and diagonal up-left value +1. Because if one side is short or missing, it will not form a square.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    dp[i][j] = Math.min(Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]), dp[i-<span class="number">1</span>][j-<span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">                    res = Math.max(res, dp[i][j] * dp[i][j]); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Method 2: More general, using Rectangle method<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[] left = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] right = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] height = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        Arrays.fill(left, <span class="number">0</span>);</span><br><span class="line">        Arrays.fill(right, n - <span class="number">1</span>);</span><br><span class="line">        Arrays.fill(height, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> curLeft = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> curRight = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    height[j]++;</span><br><span class="line">                    left[j] = Math.max(left[j], curLeft);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    height[j] = <span class="number">0</span>;</span><br><span class="line">                    left[j] = <span class="number">0</span>;</span><br><span class="line">                    curLeft = j + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;          </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                    right[j] = Math.min(right[j], curRight);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    right[j] = n - <span class="number">1</span>;</span><br><span class="line">                    curRight = j - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> len = Math.min(height[j], right[j] - left[j] + <span class="number">1</span>);</span><br><span class="line">                res = Math.max(res, len * len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Bloomberg</tag>
        <tag>DP</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode232-implementQueueUsingStacks</title>
    <url>/2020/03/02/Leetcode232-implementQueueUsingStacks/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement the following operations of a queue using stacks.</p>
<ul>
<li>push(x) — Push element x to the back of queue.</li>
<li>pop() — Removes the element from in front of queue.</li>
<li>peek() — Get the front element.</li>
<li>empty() — Return whether the queue is empty.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyQueue queue &#x3D; new MyQueue();</span><br><span class="line"></span><br><span class="line">queue.push(1);</span><br><span class="line">queue.push(2);  </span><br><span class="line">queue.peek();  &#x2F;&#x2F; returns 1</span><br><span class="line">queue.pop();   &#x2F;&#x2F; returns 1</span><br><span class="line">queue.empty(); &#x2F;&#x2F; returns false</span><br></pre></td></tr></table></figure>
<p><strong>Notes:</strong></p>
<ul>
<li>You must use only standard operations of a stack — which means only push to top, peek/pop from top, size, and is empty operations are valid.</li>
<li>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.</li>
<li>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"><span class="comment">//     O(1) amortized</span></span><br><span class="line">    Stack&lt;Integer&gt; input;</span><br><span class="line">    Stack&lt;Integer&gt; output;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        input = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        output = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        input.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        peek();</span><br><span class="line">        <span class="keyword">return</span> output.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (output.isEmpty())</span><br><span class="line">            <span class="keyword">while</span>(!input.isEmpty())</span><br><span class="line">                output.push(input.pop());</span><br><span class="line">        <span class="keyword">return</span> output.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> input.isEmpty() &amp;&amp; output.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.peek();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Bloomberg</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode234-palindromeLinkedList</title>
    <url>/2020/03/02/Leetcode234-palindromeLinkedList/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a singly linked list, determine if it is a palindrome.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Follow up:</strong></p>
<p>Could you do it in O(n) time and O(1) space?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>Move: fast pointer goes to the end, and slow goes to the middle.</li>
<li>Reverse: the right half is reversed, and slow pointer becomes the 2nd head.</li>
<li>Compare: run the two pointers head and slow together and compare.</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode fast = head, slow = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast != <span class="keyword">null</span>) &#123; <span class="comment">// odd nodes: let right half smaller</span></span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        slow = reverse(slow);</span><br><span class="line">        fast = head;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span> (slow != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fast.val != slow.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode next = head.next;</span><br><span class="line">            head.next = prev;</span><br><span class="line">            prev = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode236-lowestCommonAncestorOfABinaryTree</title>
    <url>/2019/10/13/Leetcode236-lowestCommonAncestorOfABinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.</p>
<p>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”</p>
<p>Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]</p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt="">;</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [3,5,1,6,2,0,8,null,null,7,4], p &#x3D; 5, q &#x3D; 1</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The LCA of nodes 5 and 1 is 3.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [3,5,1,6,2,0,8,null,null,7,4], p &#x3D; 5, q &#x3D; 4</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || root.val == p.val || root.val == q.val) <span class="keyword">return</span> root;</span><br><span class="line">        TreeNode leftTree = lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        TreeNode rightTree = lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        <span class="keyword">if</span> (leftTree != <span class="keyword">null</span> &amp;&amp; rightTree != <span class="keyword">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">return</span> leftTree == <span class="keyword">null</span> ? rightTree : leftTree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode239-slidingWindowMaximum</title>
    <url>/2019/10/08/Leetcode239-slidingWindowMaximum/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [1,3,-1,-3,5,3,6,7], and k &#x3D; 3</span><br><span class="line">Output: [3,3,5,5,6,7] </span><br><span class="line">Explanation: </span><br><span class="line"></span><br><span class="line">Window position                Max</span><br><span class="line">---------------               -----</span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong><br>You may assume k is always valid, 1 ≤ k ≤ input array’s size for non-empty array.</p>
<p><strong>Follow up:</strong><br>Could you solve it in linear time?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span> || k == <span class="number">0</span> || nums.length &lt; k) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length - k + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Method 2: O(N), q stores the index.</span></span><br><span class="line">        Deque&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="comment">// remove numbers out of range k</span></span><br><span class="line">            <span class="keyword">while</span>(!q.isEmpty() &amp;&amp; (q.peek() &lt; i- k + <span class="number">1</span>))&#123;</span><br><span class="line">                q.poll();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// remove smaller numbers in k range as they are useless</span></span><br><span class="line">            <span class="keyword">while</span>(!q.isEmpty() &amp;&amp; (nums[q.peekLast()] &lt; nums[i]))&#123;</span><br><span class="line">                q.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            q.offer(i);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= k-<span class="number">1</span>)&#123;</span><br><span class="line">                res[i-k+<span class="number">1</span>] = nums[q.peek()];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">//         Method: HashMap and PriorityQueue, O(N*Klog(K))</span></span><br><span class="line"><span class="comment">//         HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//         PriorityQueue&lt;Integer&gt; pq = new PriorityQueue&lt;&gt;((a,b) -&gt; b-a);</span></span><br><span class="line"><span class="comment">//         for (int i = 0; i &lt; nums.length; i++)&#123;</span></span><br><span class="line"><span class="comment">//             if (i &lt; k)&#123;</span></span><br><span class="line"><span class="comment">//                 pq.offer(nums[i]);</span></span><br><span class="line"><span class="comment">//                 map.put(nums[i], map.getOrDefault(nums[i], 0)+1);</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             else&#123;</span></span><br><span class="line"><span class="comment">//                 int tmp = pq.peek();</span></span><br><span class="line"><span class="comment">//                 while (!map.containsKey(tmp))&#123;</span></span><br><span class="line"><span class="comment">//                     pq.poll();</span></span><br><span class="line"><span class="comment">//                     tmp = pq.peek();</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//                 res[i-k] = tmp;</span></span><br><span class="line">                </span><br><span class="line"><span class="comment">//                 map.put(nums[i-k], map.get(nums[i-k])-1);</span></span><br><span class="line"><span class="comment">//                 if (map.get(nums[i-k]) == 0) map.remove(nums[i-k]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//                 map.put(nums[i], map.getOrDefault(nums[i], 0)+1);</span></span><br><span class="line"><span class="comment">//                 pq.offer(nums[i]);</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         int last = pq.poll();</span></span><br><span class="line"><span class="comment">//         while (!map.containsKey(last))&#123;</span></span><br><span class="line"><span class="comment">//             last = pq.poll();</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         res[nums.length - k] = last;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Heap</tag>
        <tag>Deque</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode240-searchA2DMatrixII</title>
    <url>/2019/09/22/Leetcode240-searchA2DMatrixII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:</p>
<ul>
<li>Integers in each row are sorted in ascending from left to right.</li>
<li>Integers in each column are sorted in ascending from top to bottom.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Consider the following matrix:</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br><span class="line">Given target &#x3D; 5, return true.</span><br><span class="line"></span><br><span class="line">Given target &#x3D; 20, return false.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> n = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> m = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = m - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&gt;=<span class="number">0</span> &amp;&amp; i &lt; n &amp;&amp; j &gt;=<span class="number">0</span> &amp;&amp; j &lt; m)&#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == target) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] &lt; target ) i++;</span><br><span class="line">            <span class="keyword">else</span> j --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>Matrix</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode237-deleteNodeInALinkedList</title>
    <url>/2020/03/29/Leetcode237-deleteNodeInALinkedList/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p>
<p>Given linked list — head = [4,5,1,9], which looks like following</p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/28/237_example.png" alt=""></p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [4,5,1,9], node &#x3D; 5</span><br><span class="line">Output: [4,1,9]</span><br><span class="line">Explanation: You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [4,5,1,9], node &#x3D; 1</span><br><span class="line">Output: [4,5,9]</span><br><span class="line">Explanation: You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function.</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ul>
<li>The linked list will have at least two elements.</li>
<li>All of the nodes’ values will be unique.</li>
<li>The given node will not be the tail and it will always be a valid node of the linked list.</li>
<li>Do not return anything from your function.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">        node.val = node.next.val;</span><br><span class="line">        node.next = node.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode250-countUnivalueSubtrees</title>
    <url>/2020/03/02/Leetcode250-countUnivalueSubtrees/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, count the number of uni-value subtrees.</p>
<p>A Uni-value subtree means all nodes of the subtree have the same value.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:  root &#x3D; [5,1,5,5,5,null,5]</span><br><span class="line"></span><br><span class="line">              5</span><br><span class="line">             &#x2F; \</span><br><span class="line">            1   5</span><br><span class="line">           &#x2F; \   \</span><br><span class="line">          5   5   5</span><br><span class="line"></span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countUnivalSubtrees</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        helper(root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">boolean</span> left = helper(root.left);</span><br><span class="line">        <span class="keyword">boolean</span> right = helper(root.right);</span><br><span class="line">        <span class="keyword">if</span> (!left || !right) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (root.val == root.right.val)&#123;</span><br><span class="line">                res++;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (root.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (root.val == root.left.val)&#123;</span><br><span class="line">                res++;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root.val == root.left.val &amp;&amp; root.val == root.right.val)&#123;</span><br><span class="line">                res++;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode238-productOfArrayExceptSelf</title>
    <url>/2020/03/02/Leetcode238-productOfArrayExceptSelf/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array nums of n integers where n &gt; 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:  [1,2,3,4]</span><br><span class="line">Output: [24,12,8,6]</span><br></pre></td></tr></table></figure>
<p><strong>Note: </strong> Please solve it without division and in O(n).</p>
<p><strong>Follow up:</strong><br>Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Given numbers [2, 3, 4, 5], regarding the third number 4, the product of array except 4 is 2<em>3</em>5 which consists of two parts: left 2<em>3 and right 5. The product is left</em>right. We can get lefts and rights:</p>
<p>Numbers:     2    3    4     5<br>Lefts:            2  2<em>3 2</em>3<em>4<br>Rights:  3</em>4<em>5  4</em>5    5<br>Let’s fill the empty with 1:</p>
<p>Numbers:     2    3    4     5<br>Lefts:       1    2  2<em>3 2</em>3<em>4<br>Rights:  3</em>4<em>5  4</em>5    5     1<br>We can calculate lefts and rights in 2 loops. The time complexity is O(n).</p>
<p>We store lefts in result array. If we allocate a new array for rights. The space complexity is O(n). To make it O(1), we just need to store it in a variable.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) res[i] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            res[i] *= left;</span><br><span class="line">            left *= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            res[i] *= right;</span><br><span class="line">            right *= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode242-validAnagram</title>
    <url>/2020/03/02/Leetcode242-validAnagram/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings s and t , write a function to determine if t is an anagram of s.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;anagram&quot;, t &#x3D; &quot;nagaram&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;rat&quot;, t &#x3D; &quot;car&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<p>You may assume the string contains only lowercase alphabets.</p>
<p><strong>Follow up:</strong></p>
<p>What if the inputs contain unicode characters? How would you adapt your solution to such case?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (s.length() != t.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            count[s.charAt(i) - <span class="string">'a'</span>] ++;</span><br><span class="line">            count[t.charAt(i) - <span class="string">'a'</span>] --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : count)</span><br><span class="line">            <span class="keyword">if</span> (num != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Bloomberg</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode252-meetingRooms</title>
    <url>/2020/03/28/Leetcode252-meetingRooms/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],…] (si &lt; ei), determine if a person could attend all meetings.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[0,30],[5,10],[15,20]]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[7,10],[2,4]]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure></p>
<p><strong>NOTE:</strong> input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pair</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start;</span><br><span class="line">        <span class="keyword">int</span> end;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.start = start;</span><br><span class="line">            <span class="keyword">this</span>.end = end;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canAttendMeetings</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals == <span class="keyword">null</span> || intervals.length == <span class="number">0</span> || intervals[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Pair[] inter = <span class="keyword">new</span> Pair[intervals.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; intervals.length; i++)&#123;</span><br><span class="line">            inter[i] = <span class="keyword">new</span> Pair(intervals[i][<span class="number">0</span>], intervals[i][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(inter, <span class="keyword">new</span> Comparator&lt;Pair&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Pair a, Pair b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a.start - b.start;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inter.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (inter[i].end &gt; inter[i + <span class="number">1</span>].start)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode253-meetingRoomsII</title>
    <url>/2019/10/06/Leetcode253-meetingRoomsII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],…] (si &lt; ei), find the minimum number of conference rooms required.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[0, 30],[5, 10],[15, 20]]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[7,10],[2,4]]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Method 1, sort, O(NlogN)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minMeetingRooms</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals == <span class="keyword">null</span> || intervals.length == <span class="number">0</span> || intervals[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len = intervals.length;</span><br><span class="line">        <span class="keyword">int</span>[] start = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">int</span>[] end = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            start[i] = intervals[i][<span class="number">0</span>];</span><br><span class="line">            end[i] = intervals[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(start);</span><br><span class="line">        Arrays.sort(end);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> enditr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (start[i] &lt; end[enditr]) res++;</span><br><span class="line">            <span class="keyword">else</span> enditr++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Method2, Heap, O(NlogN)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minMeetingRooms</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals == <span class="keyword">null</span> || intervals.length == <span class="number">0</span> || intervals[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        TreeMap&lt;Integer, Integer&gt;map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] it: intervals)&#123;</span><br><span class="line">            map.put(it[<span class="number">0</span>], map.getOrDefault(it[<span class="number">0</span>], <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            map.put(it[<span class="number">1</span>], map.getOrDefault(it[<span class="number">1</span>], <span class="number">0</span>)-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> curRoom = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> time: map.values())&#123;</span><br><span class="line">            curRoom += time;</span><br><span class="line">            res = Math.max(res, curRoom);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>Greedy</tag>
        <tag>Heap</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode268-missingNumber</title>
    <url>/2019/10/13/Leetcode268-missingNumber/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,0,1]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [9,6,4,2,3,5,7,0,1]</span><br><span class="line">Output: 8</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span> sum = (n)*(n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> sum2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> it: nums) sum2+=it;</span><br><span class="line">        <span class="keyword">return</span> sum - sum2;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// // Method 2: XOR</span></span><br><span class="line">        <span class="comment">// int res = 0, i;</span></span><br><span class="line">        <span class="comment">// for (i = 0; i&lt; nums.length;i++)&#123;</span></span><br><span class="line">        <span class="comment">//     res = res ^ i ^ nums[i];</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return res ^ i;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode258-addDigits</title>
    <url>/2019/09/12/Leetcode258-addDigits/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 38</span><br><span class="line">Output: 2 </span><br><span class="line">Explanation: The process is like: 3 + 8 &#x3D; 11, 1 + 1 &#x3D; 2. </span><br><span class="line">             Since 2 has only one digit, return it.</span><br></pre></td></tr></table></figure>
<p><strong>Follow up:</strong><br>Could you do it without any loop/recursion in O(1) runtime?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (num &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (num / <span class="number">10</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                temp += num%<span class="number">10</span>;</span><br><span class="line">                num /= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num += temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Follow up:</span></span><br><span class="line">        <span class="comment">//return num == 0 ? 0 : (num % 9 == 0 ? 9 : (num % 9));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode256-paintHouse</title>
    <url>/2020/02/24/Leetcode256-paintHouse/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.</p>
<p>The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on… Find the minimum cost to paint all houses.</p>
<p><strong>Note:</strong><br>All costs are positive integers.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[17,2,17],[16,16,5],[14,3,19]]</span><br><span class="line">Output: 10</span><br><span class="line">Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue. </span><br><span class="line">             Minimum cost: 2 + 5 + 3 &#x3D; 10.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCost</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (costs == <span class="keyword">null</span> || costs.length == <span class="number">0</span> || costs[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> n = costs.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[costs.length][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            dp[<span class="number">0</span>][i] = costs[<span class="number">0</span>][i];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.min(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]) + costs[i][<span class="number">0</span>];</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.min(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]) + costs[i][<span class="number">1</span>];</span><br><span class="line">            dp[i][<span class="number">2</span>] = Math.min(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]) + costs[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Math.min(dp[n - <span class="number">1</span>][<span class="number">0</span>], Math.min(dp[n - <span class="number">1</span>][<span class="number">1</span>], dp[n - <span class="number">1</span>][<span class="number">2</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode273-integerToEnglishWords</title>
    <url>/2019/10/06/Leetcode273-integerToEnglishWords/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than $2^{31} - 1$.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 123</span><br><span class="line">Output: &quot;One Hundred Twenty Three&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 12345</span><br><span class="line">Output: &quot;Twelve Thousand Three Hundred Forty Five&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong></p>
<p>Input: 1234567<br>Output: “One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven”<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**Example 4:**</span><br></pre></td></tr></table></figure><br>Input: 1234567891<br>Output: “One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One”<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## Solution</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">class Solution &#123;</span><br><span class="line">    </span><br><span class="line">    private final String[] belowTen &#x3D; new String[] &#123;&quot;&quot;, &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;, &quot;Four&quot;, &quot;Five&quot;, &quot;Six&quot;, &quot;Seven&quot;, &quot;Eight&quot;, &quot;Nine&quot;&#125;;</span><br><span class="line">    private final String[] belowTwenty &#x3D; new String[] &#123;&quot;Ten&quot;, &quot;Eleven&quot;, &quot;Twelve&quot;, &quot;Thirteen&quot;, &quot;Fourteen&quot;, &quot;Fifteen&quot;, &quot;Sixteen&quot;, &quot;Seventeen&quot;, &quot;Eighteen&quot;, &quot;Nineteen&quot;&#125;;</span><br><span class="line">    private final String[] belowHundred &#x3D; new String[] &#123;&quot;&quot;, &quot;Ten&quot;, &quot;Twenty&quot;, &quot;Thirty&quot;, &quot;Forty&quot;, &quot;Fifty&quot;, &quot;Sixty&quot;, &quot;Seventy&quot;, &quot;Eighty&quot;, &quot;Ninety&quot;&#125;;</span><br><span class="line">    </span><br><span class="line">    public String numberToWords(int num) &#123;</span><br><span class="line">        if (num &#x3D;&#x3D; 0) return &quot;Zero&quot;;</span><br><span class="line">        return helper(num);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private String helper(int num)&#123;</span><br><span class="line">        String res &#x3D; &quot;&quot;;</span><br><span class="line">        if (num &lt; 10) res &#x3D; belowTen[num];</span><br><span class="line">        else if (num &lt; 20) res &#x3D; belowTwenty[num-10];</span><br><span class="line">        else if (num &lt; 100) res &#x3D; belowHundred[num&#x2F;10] + &quot; &quot; + helper(num%10);</span><br><span class="line">        else if (num &lt; 1000) res &#x3D; helper(num&#x2F;100) +&quot; Hundred &quot; + helper(num%100);</span><br><span class="line">        else if (num &lt; 1000000) res &#x3D; helper(num&#x2F;1000) + &quot; Thousand &quot; + helper(num%1000);</span><br><span class="line">        else if (num &lt; 1000000000) res &#x3D; helper(num&#x2F;1000000) + &quot; Million &quot; + helper(num%1000000);</span><br><span class="line">        else res &#x3D; helper(num&#x2F;1000000000) + &quot; Billion &quot; + helper(num%1000000000);</span><br><span class="line">        return res.trim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>String</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode269-alienDictionary</title>
    <url>/2019/10/04/Leetcode269-alienDictionary/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  &quot;wrt&quot;,</span><br><span class="line">  &quot;wrf&quot;,</span><br><span class="line">  &quot;er&quot;,</span><br><span class="line">  &quot;ett&quot;,</span><br><span class="line">  &quot;rftt&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Output: &quot;wertf&quot;</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  &quot;z&quot;,</span><br><span class="line">  &quot;x&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Output: &quot;zx&quot;</span><br><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  &quot;z&quot;,</span><br><span class="line">  &quot;x&quot;,</span><br><span class="line">  &quot;z&quot;</span><br><span class="line">] </span><br><span class="line"></span><br><span class="line">Output: &quot;&quot; </span><br><span class="line"></span><br><span class="line">Explanation: The order is invalid, so return &quot;&quot;.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>You may assume all letters are in lowercase.</li>
<li>You may assume that if a is a prefix of b, then a must appear before b in the given dictionary.</li>
<li>If the order is invalid, return an empty string.</li>
<li>There may be multiple valid order of letters, return any one of them is fine.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The key to this problem is:</p>
<ul>
<li>A topological ordering is possible if and only if the graph has no directed cycles</li>
</ul>
<p>Let’s build a graph and perform a DFS. The following states made things easier.</p>
<ul>
<li>visited[i] = -1. Not even exist.</li>
<li>visited[i] = 0. Exist. Non-visited.</li>
<li>visited[i] = 1. Visiting.</li>
<li>visited[i] = 2. Visited.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">alienOrder</span><span class="params">(String[] words)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] visited = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">int</span>[][] adj = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>][<span class="number">26</span>];</span><br><span class="line">        buildGraph(words, adj, visited);</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i] == <span class="number">0</span>) </span><br><span class="line">                <span class="keyword">if</span> (!dfs(adj, visited, res, i)) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.reverse().toString();        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] adj, <span class="keyword">int</span>[] visited, StringBuilder res, <span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">        visited[cur] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (adj[cur][i] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (visited[i] == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (visited[i] == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">if</span> (!dfs(adj, visited, res, i)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;       </span><br><span class="line">        &#125;</span><br><span class="line">        visited[cur] = <span class="number">2</span>;</span><br><span class="line">        res.append((<span class="keyword">char</span>)(cur + <span class="string">'a'</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildGraph</span><span class="params">(String[] words, <span class="keyword">int</span>[][] adj, <span class="keyword">int</span>[] visited)</span></span>&#123;</span><br><span class="line">        Arrays.fill(visited, -<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> ch: words[i].toCharArray())&#123;</span><br><span class="line">                visited[ch - <span class="string">'a'</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                String word1 = words[i-<span class="number">1</span>];</span><br><span class="line">                String word2 = words[i];</span><br><span class="line">                <span class="keyword">int</span> len = Math.min(word1.length(), word2.length());</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++)&#123;</span><br><span class="line">                    <span class="keyword">char</span> ch1 = word1.charAt(j);</span><br><span class="line">                    <span class="keyword">char</span> ch2 = word2.charAt(j);</span><br><span class="line">                    <span class="keyword">if</span> (ch1 != ch2) &#123;</span><br><span class="line">                        adj[ch1 - <span class="string">'a'</span>][ch2 - <span class="string">'a'</span>] = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
        <tag>Topological Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode283-moveZeros</title>
    <url>/2020/03/02/Leetcode283-moveZeros/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0]</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>You must do this in-place without making a copy of the array.</li>
<li>Minimize the total number of operations.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">        <span class="keyword">if</span> (num != <span class="number">0</span>)</span><br><span class="line">            nums[pos++] = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pos &lt; nums.length)</span><br><span class="line">        nums[pos++] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode284-peekingIterator</title>
    <url>/2019/10/12/Leetcode284-peekingIterator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an Iterator class interface with methods: next() and hasNext(), design and implement a PeekingIterator that support the peek() operation — it essentially peek() at the element that will be returned by the next call to next().</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Assume that the iterator is initialized to the beginning of the list: [1,2,3].</span><br><span class="line"></span><br><span class="line">Call next() gets you 1, the first element in the list.</span><br><span class="line">Now you call peek() and it returns 2, the next element. Calling next() after that still return 2. </span><br><span class="line">You call next() the final time and it returns 3, the last element. </span><br><span class="line">Calling hasNext() after that should return false.</span><br></pre></td></tr></table></figure>
<p><strong>Follow up:</strong> How would you extend your design to be generic and work with all types, not just integer?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java Iterator interface reference:</span></span><br><span class="line"><span class="comment">// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekingIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Iterator&lt;Integer&gt; it;</span><br><span class="line">    <span class="keyword">private</span> Integer cur;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PeekingIterator</span><span class="params">(Iterator&lt;Integer&gt; iterator)</span> </span>&#123;</span><br><span class="line">	    <span class="comment">// initialize any member here.</span></span><br><span class="line">	    it = iterator;</span><br><span class="line">        <span class="keyword">if</span> (it.hasNext()) cur = it.next();</span><br><span class="line">        <span class="keyword">else</span> cur = <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns the next element in the iteration without advancing the iterator.</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// hasNext() and next() should behave the same as in the Iterator interface.</span></span><br><span class="line">	<span class="comment">// Override them if needed.</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    Integer res = cur;</span><br><span class="line">        <span class="keyword">if</span> (it.hasNext()) cur = it.next();</span><br><span class="line">        <span class="keyword">else</span> cur = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">return</span> cur != <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Method 2, more better<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekingIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    Integer next;</span><br><span class="line">    Iterator&lt;Integer&gt; iter;</span><br><span class="line">    <span class="keyword">boolean</span> noSuchElement;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PeekingIterator</span><span class="params">(Iterator&lt;Integer&gt; iterator)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// initialize any member here.</span></span><br><span class="line">	iter = iterator;</span><br><span class="line">        advanceIter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns the next element in the iteration without advancing the iterator.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// you should confirm with interviewer what to return/throw</span></span><br><span class="line">        <span class="comment">// if there are no more values</span></span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hasNext() and next() should behave the same as in the Iterator interface.</span></span><br><span class="line">    <span class="comment">// Override them if needed.</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (noSuchElement)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Integer res = next;</span><br><span class="line">        advanceIter();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !noSuchElement;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">advanceIter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (iter.hasNext()) &#123;</span><br><span class="line">            next = iter.next();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            noSuchElement = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode285-inorderSuccessorInBST</title>
    <url>/2020/03/29/Leetcode285-inorderSuccessorInBST/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary search tree and a node in it, find the in-order successor of that node in the BST.</p>
<p>The successor of a node p is the node with the smallest key greater than p.val.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2019/01/23/285_example_1.PNG" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [2,1,3], p &#x3D; 1</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: 1&#39;s in-order successor node is 2. Note that both p and the return value is of TreeNode type.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><img src="https://assets.leetcode.com/uploads/2019/01/23/285_example_2.PNG" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [5,3,6,2,4,null,null,1], p &#x3D; 6</span><br><span class="line">Output: null</span><br><span class="line">Explanation: There is no in-order successor of the current node, so the answer is null.</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ol>
<li>If the given node has no in-order successor in the tree, return null.</li>
<li>It’s guaranteed that the values of the tree are unique.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1:</strong> Basical Solution, O(h);<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Solution 1: basic one, O(h)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">inorderSuccessor</span><span class="params">(TreeNode root, TreeNode p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode res = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (p.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            p = p.right;</span><br><span class="line">            <span class="keyword">while</span>(p.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">                p = p.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(root != p)&#123;</span><br><span class="line">            root = (p.val &gt; root.val) ? root.right : (res = root).left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>Solution 2:</strong> Improved solution, O(h)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">// Solution 2: more improved, O(h)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">inorderSuccessor</span><span class="params">(TreeNode root, TreeNode p)</span> </span>&#123;</span><br><span class="line">        TreeNode res = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            root = (root.val &gt; p.val) ? (res = root).left : root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode290-wordPattern</title>
    <url>/2020/02/22/Leetcode290-wordPattern/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a pattern and a string str, find if str follows the same pattern.</p>
<p>Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: pattern &#x3D; &quot;abba&quot;, str &#x3D; &quot;dog cat cat dog&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:pattern &#x3D; &quot;abba&quot;, str &#x3D; &quot;dog cat cat fish&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: pattern &#x3D; &quot;aaaa&quot;, str &#x3D; &quot;dog cat cat dog&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: pattern &#x3D; &quot;abba&quot;, str &#x3D; &quot;dog dog dog dog&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></p>
<p><strong>Notes:</strong></p>
<p>You may assume pattern contains only lowercase letters, and str contains lowercase letters that may be separated by a single space.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordPattern</span><span class="params">(String pattern, String str)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character, String&gt; map1 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        HashMap&lt;String, Character&gt; map2 = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        String[] dic = str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span> (pattern.length() != dic.length) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dic.length; i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> ch = pattern.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (!map1.containsKey(ch))&#123;</span><br><span class="line">                map1.put(ch, dic[i]);</span><br><span class="line">                <span class="keyword">if</span> (!map2.containsKey(dic[i]))&#123;</span><br><span class="line">                    map2.put(dic[i], ch);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!dic[i].equals(map1.get(ch))) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode286-wallsAndGates</title>
    <url>/2020/03/02/Leetcode286-wallsAndGates/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a m x n 2D grid initialized with these three possible values.</p>
<ol>
<li>-1 - A wall or an obstacle.</li>
<li>0 - A gate.</li>
<li>INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.<br>Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.</li>
</ol>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Given the 2D grid:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INF  -1  0  INF</span><br><span class="line">INF INF INF  -1</span><br><span class="line">INF  -1 INF  -1</span><br><span class="line">  0  -1 INF INF</span><br></pre></td></tr></table></figure><br>After running your function, the 2D grid should be:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3  -1   0   1</span><br><span class="line">2   2   1  -1</span><br><span class="line">1  -1   2  -1</span><br><span class="line">0  -1   3   4</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] dir = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;-<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,&#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wallsAndGates</span><span class="params">(<span class="keyword">int</span>[][] rooms)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> INF = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rooms.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; rooms[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (rooms[i][j] == <span class="number">0</span>)</span><br><span class="line">                    helper(rooms, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[][] rooms, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line">        Queue&lt;<span class="keyword">int</span>[]&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        list.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;x, y&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!list.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = list.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; size; k++)&#123;</span><br><span class="line">                <span class="keyword">int</span>[] cur = list.poll();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dir.length; i++)&#123;</span><br><span class="line">                    <span class="keyword">int</span> nx = cur[<span class="number">0</span>] + dir[i][<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">int</span> ny = cur[<span class="number">1</span>] + dir[i][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; rooms.length &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; rooms[<span class="number">0</span>].length &amp;&amp; rooms[nx][ny] &gt; len)&#123;</span><br><span class="line">                        rooms[nx][ny] = len;</span><br><span class="line">                        list.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;nx, ny&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>Bloomberg</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode289-gameOfLife</title>
    <url>/2019/10/06/Leetcode289-gameOfLife/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>According to the Wikipedia’s article: “The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.”</p>
<p>Given a board with m by n cells, each cell has an initial state live (1) or dead (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):</p>
<p>Any live cell with fewer than two live neighbors dies, as if caused by under-population.<br>Any live cell with two or three live neighbors lives on to the next generation.<br>Any live cell with more than three live neighbors dies, as if by over-population..<br>Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.<br>Write a function to compute the next state (after one update) of the board given its current state. The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">[</span><br><span class="line">  [0,1,0],</span><br><span class="line">  [0,0,1],</span><br><span class="line">  [1,1,1],</span><br><span class="line">  [0,0,0]</span><br><span class="line">]</span><br><span class="line">Output: </span><br><span class="line">[</span><br><span class="line">  [0,0,0],</span><br><span class="line">  [1,0,1],</span><br><span class="line">  [0,1,1],</span><br><span class="line">  [0,1,0]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>Follow up:</strong></p>
<p>Could you solve it in-place? Remember that the board needs to be updated at the same time: You cannot update some cells first and then use their updated values to update other cells.<br>In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches the border of the array. How would you address these problems?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;,&#123;-<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;-<span class="number">1</span>, <span class="number">1</span>&#125;,&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,&#123;<span class="number">1</span>, <span class="number">1</span>&#125;,&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">1</span>, -<span class="number">1</span>&#125;,&#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gameOfLife</span><span class="params">(<span class="keyword">int</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board == <span class="keyword">null</span> || board.length == <span class="number">0</span> || board[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> m = board.length;</span><br><span class="line">        <span class="keyword">int</span> n = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] newGeneration = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> live = countLive(board, i, j, m, n);</span><br><span class="line">                newGeneration[i][j] = board[i][j];</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (live &lt; <span class="number">2</span> || live &gt; <span class="number">3</span>)&#123;</span><br><span class="line">                        newGeneration[i][j] = <span class="number">0</span>;                       </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (board[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (live == <span class="number">3</span>) newGeneration[i][j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                board[i][j] = newGeneration[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countLive</span><span class="params">(<span class="keyword">int</span>[][]board, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ny = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] d: dir)&#123;</span><br><span class="line">            nx = x + d[<span class="number">0</span>];</span><br><span class="line">            ny = y + d[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; n)&#123;</span><br><span class="line">                <span class="keyword">if</span> (board[nx][ny] == <span class="number">1</span>) res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Follow 2<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">// - 00  dead (next) &lt;- dead (current)</span></span><br><span class="line"><span class="comment">// - 01  dead (next) &lt;- live (current)  </span></span><br><span class="line"><span class="comment">// - 10  live (next) &lt;- dead (current)  </span></span><br><span class="line"><span class="comment">// - 11  live (next) &lt;- live (current) </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gameOfLife</span><span class="params">(<span class="keyword">int</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board == <span class="keyword">null</span> || board.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> m = board.length, n = board[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> lives = liveNeighbors(board, m, n, i, j);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// In the beginning, every 2nd bit is 0;</span></span><br><span class="line">                <span class="comment">// So we only need to care about when will the 2nd bit become 1.</span></span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="number">1</span> &amp;&amp; lives &gt;= <span class="number">2</span> &amp;&amp; lives &lt;= <span class="number">3</span>) &#123;  </span><br><span class="line">                    board[i][j] = <span class="number">3</span>; <span class="comment">// Make the 2nd bit 1: 01 ---&gt; 11</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="number">0</span> &amp;&amp; lives == <span class="number">3</span>) &#123;</span><br><span class="line">                    board[i][j] = <span class="number">2</span>; <span class="comment">// Make the 2nd bit 1: 00 ---&gt; 10</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                board[i][j] &gt;&gt;= <span class="number">1</span>;  <span class="comment">// Get the 2nd state.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">liveNeighbors</span><span class="params">(<span class="keyword">int</span>[][] board, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lives = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = Math.max(i - <span class="number">1</span>, <span class="number">0</span>); x &lt;= Math.min(i + <span class="number">1</span>, m - <span class="number">1</span>); x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = Math.max(j - <span class="number">1</span>, <span class="number">0</span>); y &lt;= Math.min(j + <span class="number">1</span>, n - <span class="number">1</span>); y++) &#123;</span><br><span class="line">                lives += board[x][y] &amp; <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        lives -= board[i][j] &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> lives;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode299-bullsAndCows</title>
    <url>/2020/04/07/Leetcode299-bullsAndCows/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.</p>
<p>Write a function to return a hint according to the secret number and friend’s guess, use A to indicate the bulls and B to indicate the cows. </p>
<p>Please note that both secret number and friend’s guess may contain duplicate digits.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: secret &#x3D; &quot;1807&quot;, guess &#x3D; &quot;7810&quot;</span><br><span class="line"></span><br><span class="line">Output: &quot;1A3B&quot;</span><br><span class="line"></span><br><span class="line">Explanation: 1 bull and 3 cows. The bull is 8, the cows are 0, 1 and 7.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: secret &#x3D; &quot;1123&quot;, guess &#x3D; &quot;0111&quot;</span><br><span class="line"></span><br><span class="line">Output: &quot;1A1B&quot;</span><br><span class="line"></span><br><span class="line">Explanation: The 1st 1 in friend&#39;s guess is a bull, the 2nd or 3rd 1 is a cow.</span><br></pre></td></tr></table></figure><br><strong>Note:</strong> You may assume that the secret number and your friend’s guess only contain digits, and their lengths are always equal.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">(String secret, String guess)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> bull = <span class="number">0</span>, cows = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] sec = secret.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] gue = guess.toCharArray();</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] flag = <span class="keyword">new</span> <span class="keyword">int</span>[sec.length];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sec.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (sec[i] == gue[i]) &#123;</span><br><span class="line">                bull++;</span><br><span class="line">                flag[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!map.containsKey(sec[i]))</span><br><span class="line">                    map.put(sec[i], <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span> map.put(sec[i], map.get(sec[i])+<span class="number">1</span>);</span><br><span class="line">                flag[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sec.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (flag[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(gue[i]))&#123;</span><br><span class="line">                    cows++;</span><br><span class="line">                    map.put(gue[i], map.get(gue[i])-<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (map.get(gue[i]) == <span class="number">0</span>)</span><br><span class="line">                        map.remove(gue[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        String res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        res = bull + <span class="string">&quot;A&quot;</span> + cows + <span class="string">&quot;B&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Hash Table</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode295-findMedianFromDataStream</title>
    <url>/2019/10/06/Leetcode295-findMedianFromDataStream/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.</p>
<p>For example,<br>[2,3,4], the median is 3</p>
<p>[2,3], the median is (2 + 3) / 2 = 2.5</p>
<p>Design a data structure that supports the following two operations:</p>
<ul>
<li>void addNum(int num) - Add a integer number from the data stream to the data structure.</li>
<li>double findMedian() - Return the median of all elements so far.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addNum(1)</span><br><span class="line">addNum(2)</span><br><span class="line">findMedian() -&gt; 1.5</span><br><span class="line">addNum(3) </span><br><span class="line">findMedian() -&gt; 2</span><br></pre></td></tr></table></figure>
<p>Follow up:</p>
<ol>
<li>If all integer numbers from the stream are between 0 and 100, how would you optimize it?</li>
<li>If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MedianFinder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    PriorityQueue&lt;Integer&gt; min;</span><br><span class="line">    PriorityQueue&lt;Integer&gt; max;</span><br><span class="line">    <span class="comment">// List&lt;Integer&gt; nums;</span></span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MedianFinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// nums = new ArrayList&lt;&gt;();</span></span><br><span class="line">        min = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">        max = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a,b) -&gt; b-a);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        max.offer(num);</span><br><span class="line">        min.offer(max.poll());</span><br><span class="line">        <span class="keyword">if</span> (max.size() &lt; min.size())</span><br><span class="line">            max.offer(min.poll());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// nums.add(num);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (min.size() == max.size()) <span class="keyword">return</span> (max.peek() + min.peek())/<span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> max.peek();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Collections.sort(nums);</span></span><br><span class="line">        <span class="comment">// int len  = nums.size();</span></span><br><span class="line">        <span class="comment">// if (len % 2 == 0) return (nums.get(len/2)+nums.get(len/2-1))/2.0;</span></span><br><span class="line">        <span class="comment">// else return nums.get(len/2);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MedianFinder object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MedianFinder obj = new MedianFinder();</span></span><br><span class="line"><span class="comment"> * obj.addNum(num);</span></span><br><span class="line"><span class="comment"> * double param_2 = obj.findMedian();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>Heap</tag>
        <tag>Design</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode301-removeInvalidParentheses</title>
    <url>/2020/03/16/Leetcode301-removeInvalidParentheses/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.</p>
<p><strong>Note</strong>: The input string may contain letters other than the parentheses ( and ).</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;()())()&quot;</span><br><span class="line">Output: [&quot;()()()&quot;, &quot;(())()&quot;]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;(a)())()&quot;</span><br><span class="line">Output: [&quot;(a)()()&quot;, &quot;(a())()&quot;]</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;)(&quot;</span><br><span class="line">Output: [&quot;&quot;]</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Solution 1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">// //     Basic method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">removeInvalidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> Arrays.asList(<span class="string">""</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//         preprocessor, count the number of alternative parentheses</span></span><br><span class="line">        <span class="keyword">int</span> numL = <span class="number">0</span>, numR = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'('</span>)</span><br><span class="line">                numL++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (numL != <span class="number">0</span>)</span><br><span class="line">                    numL --;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    numR++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        helper(s, set, <span class="number">0</span>, <span class="string">""</span>, numL, numR, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(set);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(String s, HashSet&lt;String&gt; res, <span class="keyword">int</span> idx, String cur, <span class="keyword">int</span> numL, <span class="keyword">int</span> numR, <span class="keyword">int</span> open)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (numL &lt; <span class="number">0</span> || numR &lt; <span class="number">0</span> || open &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (idx == s.length())&#123;</span><br><span class="line">            <span class="keyword">if</span> (numL == <span class="number">0</span> &amp;&amp; numR == <span class="number">0</span> &amp;&amp; open == <span class="number">0</span>)</span><br><span class="line">                res.add(<span class="keyword">new</span> String(cur));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (s.charAt(idx) == <span class="string">'('</span>)&#123;</span><br><span class="line"><span class="comment">//             use '('</span></span><br><span class="line">            helper(s, res, idx + <span class="number">1</span>, cur + <span class="string">"("</span>, numL, numR, open + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//             unuse '('</span></span><br><span class="line">            helper(s, res, idx + <span class="number">1</span>, cur, numL - <span class="number">1</span>, numR, open);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(idx) == <span class="string">')'</span>)&#123;</span><br><span class="line"><span class="comment">//             use ')'</span></span><br><span class="line">            helper(s, res, idx + <span class="number">1</span>, cur + <span class="string">")"</span>, numL, numR, open - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//             unuse ')'</span></span><br><span class="line">            helper(s, res, idx + <span class="number">1</span>, cur, numL, numR - <span class="number">1</span>, open);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> helper(s, res, idx + <span class="number">1</span>, cur + s.charAt(idx), numL, numR, open);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Solution 2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">// Generate unique answer once and only once, do not rely on Set.</span></span><br><span class="line"><span class="comment">// Do not need preprocess.</span></span><br><span class="line"><span class="comment">// Runtime 3 ms.</span></span><br><span class="line"><span class="comment">// Explanation:</span></span><br><span class="line"><span class="comment">// We all know how to check a string of parentheses is valid using a stack. Or even simpler use a counter.</span></span><br><span class="line"><span class="comment">// The counter will increase when it is ‘(‘ and decrease when it is ‘)’. Whenever the counter is negative, we have more ‘)’ than ‘(‘ in the prefix.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// To make the prefix valid, we need to remove a ‘)’. The problem is: which one? The answer is any one in the prefix. However, if we remove any one, we will generate duplicate results, for example: s = ()), we can remove s[1] or s[2] but the result is the same (). Thus, we restrict ourself to remove the first ) in a series of concecutive )s.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// After the removal, the prefix is then valid. We then call the function recursively to solve the rest of the string. However, we need to keep another information: the last removal position. If we do not have this position, we will generate duplicate by removing two ‘)’ in two steps only with a different order.</span></span><br><span class="line"><span class="comment">// For this, we keep tracking the last removal position and only remove ‘)’ after that.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Now one may ask. What about ‘(‘? What if s = ‘(()(()’ in which we need remove ‘(‘?</span></span><br><span class="line"><span class="comment">// The answer is: do the same from right to left.</span></span><br><span class="line"><span class="comment">// However a cleverer idea is: reverse the string and reuse the code!</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">removeInvalidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        remove(s, ans, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'('</span>, <span class="string">')'</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String s, List&lt;String&gt; ans, <span class="keyword">int</span> last_i, <span class="keyword">int</span> last_j,  <span class="keyword">char</span>[] par)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> stack = <span class="number">0</span>, i = last_i; i &lt; s.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == par[<span class="number">0</span>]) stack++;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == par[<span class="number">1</span>]) stack--;</span><br><span class="line">            <span class="keyword">if</span> (stack &gt;= <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = last_j; j &lt;= i; ++j)</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(j) == par[<span class="number">1</span>] &amp;&amp; (j == last_j || s.charAt(j - <span class="number">1</span>) != par[<span class="number">1</span>]))</span><br><span class="line">                    remove(s.substring(<span class="number">0</span>, j) + s.substring(j + <span class="number">1</span>, s.length()), ans, i, j, par);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String reversed = <span class="keyword">new</span> StringBuilder(s).reverse().toString();</span><br><span class="line">        <span class="keyword">if</span> (par[<span class="number">0</span>] == <span class="string">'('</span>) <span class="comment">// finished left to right</span></span><br><span class="line">            remove(reversed, ans, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">')'</span>, <span class="string">'('</span>&#125;);</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">// finished right to left</span></span><br><span class="line">            ans.add(reversed);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode297-serializeAndDeserializeBinaryTree</title>
    <url>/2019/10/08/Leetcode297-serializeAndDeserializeBinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>
<p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You may serialize the following tree:</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   3</span><br><span class="line">     &#x2F; \</span><br><span class="line">    4   5</span><br><span class="line"></span><br><span class="line">as &quot;[1,2,3,null,null,4,5]&quot;</span><br></pre></td></tr></table></figure>
<p><strong>Clarification:</strong> The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>
<p><strong>Note:</strong> Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">serialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        serializeTree(root, res);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">serializeTree</span><span class="params">(TreeNode node, StringBuilder res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            res.append(<span class="string">"null"</span>).append(<span class="string">","</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(String.valueOf(node.val)).append(<span class="string">","</span>);</span><br><span class="line">        serializeTree(node.left, res);</span><br><span class="line">        serializeTree(node.right, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deserialize</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        Queue&lt;String&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        String[] tmp = data.split(<span class="string">","</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tmp.length - <span class="number">1</span>; i++) q.offer(tmp[i]);</span><br><span class="line">        <span class="keyword">return</span>  deserialize(q);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">deserialize</span><span class="params">(Queue&lt;String&gt; q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!q.isEmpty())&#123;</span><br><span class="line">            String f = q.poll();</span><br><span class="line">            <span class="keyword">if</span> (f.equals(<span class="string">"null"</span>)) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            TreeNode node = <span class="keyword">new</span> TreeNode(Integer.valueOf(f));</span><br><span class="line">            node.left = deserialize(q);</span><br><span class="line">            node.right = deserialize(q);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec codec = new Codec();</span></span><br><span class="line"><span class="comment">// codec.deserialize(codec.serialize(root));</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Tree</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode300-LongestIncreasingSubsequence</title>
    <url>/2020/02/20/Leetcode300-LongestIncreasingSubsequence/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an unsorted array of integers, find the length of longest increasing subsequence.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [10,9,2,5,3,7,101,18]</span><br><span class="line">Output: 4 </span><br><span class="line">Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>There may be more than one LIS combination, it is only necessary for you to return the length.</li>
<li>Your algorithm should run in $O(n^2)$ complexity.</li>
</ul>
<p><strong>Follow up:</strong> Could you improve it to $O(n log n)$ time complexity?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1:</strong> DP, $O(n^2)$</p>
<script type="math/tex; mode=display">init: dp[i] = 1; (0 <= i < n)</script><script type="math/tex; mode=display">dp[i] = max(dp[i], dp[j] + 1); (0 <= j < i, nums[j] < nums[i])</script><script type="math/tex; mode=display">res = max(dp[i]); (0 <= i < n)</script><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) dp[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[i])</span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2:</strong> Binary Search + Greedy</p>
<p>Binary Search + Greedy, build one increasing queue</p>
<p>If new num &gt; the last one in the queue, just add it.</p>
<p>If new num &lt;= the last one, find the first num in the queue which &lt;= the new num, replace it.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] incArray = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        incArray[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; incArray[last])&#123;</span><br><span class="line">                last++;</span><br><span class="line">                incArray[last] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = helper(incArray, <span class="number">0</span>, last, nums[i]);</span><br><span class="line">                incArray[temp] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> last + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &lt; target)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode307-rangeSumQuery-Mutable</title>
    <url>/2019/10/14/Leetcode307-rangeSumQuery-Mutable/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.</p>
<p>The update(i, val) function modifies nums by updating the element at index i to val.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given nums &#x3D; [1, 3, 5]</span><br><span class="line"></span><br><span class="line">sumRange(0, 2) -&gt; 9</span><br><span class="line">update(1, 2)</span><br><span class="line">sumRange(0, 2) -&gt; 8</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>The array is only modifiable by the update function.</li>
<li>You may assume the number of calls to update and sumRange function is distributed evenly.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] nums;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] BIT;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nums = nums;</span><br><span class="line">        <span class="keyword">this</span>.BIT = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            add(i, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> delt)</span></span>&#123;</span><br><span class="line">        k++;</span><br><span class="line">        <span class="keyword">while</span> (k &lt;= nums.length)&#123;</span><br><span class="line">            BIT[k] += delt;</span><br><span class="line">            k += k &amp; (-k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> diff = val - nums[i];</span><br><span class="line">        nums[i] = val;</span><br><span class="line">        add(i, diff);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        k++;</span><br><span class="line">        <span class="keyword">while</span> (k&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            temp += BIT[k];</span><br><span class="line">            k -= k &amp; (-k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSum(j) - getSum(i - <span class="number">1</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NumArray obj = new NumArray(nums);</span></span><br><span class="line"><span class="comment"> * obj.update(i,val);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.sumRange(i,j);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Binary Indexed Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode314-binaryTreeVerticalOrderTraversal</title>
    <url>/2019/10/13/Leetcode314-binaryTreeVerticalOrderTraversal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the vertical order traversal of its nodes’ values. (ie, from top to bottom, column by column).</p>
<p>If two nodes are in the same row and column, the order should be from <strong>left to right</strong>.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Examples 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,9,20,null,null,15,7]</span><br><span class="line"></span><br><span class="line">   3</span><br><span class="line">  &#x2F;\</span><br><span class="line"> &#x2F;  \</span><br><span class="line"> 9  20</span><br><span class="line">    &#x2F;\</span><br><span class="line">   &#x2F;  \</span><br><span class="line">  15   7 </span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [9],</span><br><span class="line">  [3,15],</span><br><span class="line">  [20],</span><br><span class="line">  [7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><strong>Examples 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,9,8,4,0,1,7]</span><br><span class="line"></span><br><span class="line">     3</span><br><span class="line">    &#x2F;\</span><br><span class="line">   &#x2F;  \</span><br><span class="line">   9   8</span><br><span class="line">  &#x2F;\  &#x2F;\</span><br><span class="line"> &#x2F;  \&#x2F;  \</span><br><span class="line"> 4  01   7 </span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [4],</span><br><span class="line">  [9],</span><br><span class="line">  [3,0,1],</span><br><span class="line">  [8],</span><br><span class="line">  [7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><strong>Examples 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,9,8,4,0,1,7,null,null,null,2,5] (0&#39;s right child is 2 and 1&#39;s left child is 5)</span><br><span class="line"></span><br><span class="line">     3</span><br><span class="line">    &#x2F;\</span><br><span class="line">   &#x2F;  \</span><br><span class="line">   9   8</span><br><span class="line">  &#x2F;\  &#x2F;\</span><br><span class="line"> &#x2F;  \&#x2F;  \</span><br><span class="line"> 4  01   7</span><br><span class="line">    &#x2F;\</span><br><span class="line">   &#x2F;  \</span><br><span class="line">   5   2</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [4],</span><br><span class="line">  [9,5],</span><br><span class="line">  [3,0,1],</span><br><span class="line">  [8,2],</span><br><span class="line">  [7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; verticalOrder(TreeNode root) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Map&lt;Integer, ArrayList&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    Queue&lt;Integer&gt; cols = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    q.add(root); </span><br><span class="line">    cols.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">        TreeNode node = q.poll();</span><br><span class="line">        <span class="keyword">int</span> col = cols.poll();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(col)) &#123;</span><br><span class="line">            map.put(col, <span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        map.get(col).add(node.val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            q.add(node.left); </span><br><span class="line">            cols.add(col - <span class="number">1</span>);</span><br><span class="line">            min = Math.min(min, col - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            q.add(node.right);</span><br><span class="line">            cols.add(col + <span class="number">1</span>);</span><br><span class="line">            max = Math.max(max, col + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = min; i &lt;= max; i++) &#123;</span><br><span class="line">        res.add(map.get(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode315-countofSmallerNumbersAfterSelf</title>
    <url>/2019/10/29/Leetcode315-countofSmallerNumbersAfterSelf/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [5,2,6,1]</span><br><span class="line">Output: [2,1,1,0] </span><br><span class="line">Explanation:</span><br><span class="line">To the right of 5 there are 2 smaller elements (2 and 1).</span><br><span class="line">To the right of 2 there is only 1 smaller element (1).</span><br><span class="line">To the right of 6 there is 1 smaller element (1).</span><br><span class="line">To the right of 1 there is 0 smaller element.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        Node left,right;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        <span class="keyword">int</span> count;</span><br><span class="line">        <span class="keyword">int</span> dup = <span class="number">1</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.count = count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">countSmaller</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Integer[] res = <span class="keyword">new</span> Integer[nums.length];</span><br><span class="line">        Node root = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            root = insert(nums[i], root, res, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(res);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">insert</span><span class="params">(<span class="keyword">int</span> num, Node node, Integer[] res, <span class="keyword">int</span> i, <span class="keyword">int</span> pre)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>)&#123;</span><br><span class="line">            node = <span class="keyword">new</span> Node(num, <span class="number">0</span>);</span><br><span class="line">            res[i] = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (node.val == num)&#123;</span><br><span class="line">            node.dup++;</span><br><span class="line">            res[i] = pre + node.count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (node.val &gt; num)&#123;</span><br><span class="line">            node.count++;</span><br><span class="line">            node.left = insert(num, node.left, res, i, pre);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> node.right = insert(num, node.right, res, i, pre + node.count + node.dup);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Every node will maintain a val sum recording the total of number on it’s left bottom side, dup counts the duplication. For example, [3, 2, 2, 6, 1], from back to beginning,we would have:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1(0, 1)</span><br><span class="line">     \</span><br><span class="line">     6(3, 1)</span><br><span class="line">     &#x2F;</span><br><span class="line">   2(0, 2)</span><br><span class="line">       \</span><br><span class="line">        3(0, 1)</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Binary Search Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode322-coinChange</title>
    <url>/2020/02/20/Leetcode322-coinChange/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: coins &#x3D; [1, 2, 5], amount &#x3D; 11</span><br><span class="line">Output: 3 </span><br><span class="line">Explanation: 11 &#x3D; 5 + 5 + 1</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: coins &#x3D; [2], amount &#x3D; 3</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<p>You may assume that you have an infinite number of each kind of coin.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1:</strong> DP, faster<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (coins == <span class="keyword">null</span> || coins.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (amount == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= amount; i++) dp[i] = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= amount; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> coin: coins)&#123;</span><br><span class="line">                <span class="keyword">if</span> (coin &lt;= i &amp;&amp; dp[i - coin] != Integer.MAX_VALUE)</span><br><span class="line">                    dp[i] = Math.min(dp[i], dp[i - coin] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> (dp[amount] == Integer.MAX_VALUE) ? -<span class="number">1</span> : dp[amount];       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Solution 2: Recursion<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (coins == <span class="keyword">null</span> || coins.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (amount == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(coins, amount, <span class="keyword">new</span> <span class="keyword">int</span>[amount]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> remain, <span class="keyword">int</span>[] count)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (remain == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (remain &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (count[remain - <span class="number">1</span>] != <span class="number">0</span>) <span class="keyword">return</span> count[remain - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> coin: coins)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = helper(coins, remain - coin, count);</span><br><span class="line">            <span class="keyword">if</span> (temp &gt;= <span class="number">0</span> &amp;&amp; temp &lt; min)</span><br><span class="line">                min = temp + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min == Integer.MAX_VALUE) count[remain - <span class="number">1</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> count[remain - <span class="number">1</span>] = min;</span><br><span class="line">        <span class="keyword">return</span> count[remain - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>DP</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode325-maximumSizeSubarraySumEqualsK</title>
    <url>/2019/11/25/Leetcode325-maximumSizeSubarraySumEqualsK/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn’t one, return 0 instead.</p>
<p><strong>Note:</strong><br>The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [1, -1, 5, -2, 3], k &#x3D; 3</span><br><span class="line">Output: 4 </span><br><span class="line">Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [-2, -1, 2, 1], k &#x3D; 1</span><br><span class="line">Output: 2 </span><br><span class="line">Explanation: The subarray [-1, 2] sums to 1 and is the longest.</span><br></pre></td></tr></table></figure></p>
<p><strong>Follow Up:</strong><br>Can you do it in O(n) time?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArrayLen</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            <span class="keyword">if</span> (sum == k) res = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (map.containsKey(sum - k))</span><br><span class="line">                res = Math.max(res, i - map.get(sum - k));</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(sum)) map.put(sum, i);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode328-oddEvenLinkedList</title>
    <url>/2020/03/02/Leetcode328-oddEvenLinkedList/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.</p>
<p>You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">Output: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL</span><br><span class="line">Output: 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ul>
<li>The relative order inside both the even and odd groups should remain as it was in the input.</li>
<li>The first node is considered odd, the second node even and so on …</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">oddEvenList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        ListNode odd = head;</span><br><span class="line">        ListNode even = head.next;</span><br><span class="line">        ListNode evenHead = even;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (even != <span class="keyword">null</span> &amp;&amp; even.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            odd.next = odd.next.next;</span><br><span class="line">            even.next = even.next.next;</span><br><span class="line">            odd = odd.next;</span><br><span class="line">            even = even.next;</span><br><span class="line">        &#125;</span><br><span class="line">        odd.next = evenHead;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode316-removeDuplicateLetters</title>
    <url>/2020/03/16/Leetcode316-removeDuplicateLetters/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string which contains only lowercase letters, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;bcabc&quot;</span><br><span class="line">Output: &quot;abc&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;cbacdcbc&quot;</span><br><span class="line">Output: &quot;acdb&quot;</span><br></pre></td></tr></table></figure><br><strong>Note:</strong> This question is the same as 1081: <a href="https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/" target="_blank" rel="noopener">https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/</a></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//  stack, O(n), faster</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeDuplicateLetters</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt;= <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        Stack&lt;Character&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();    </span><br><span class="line">        <span class="keyword">int</span>[] set = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];   <span class="comment">//record if stack has the character</span></span><br><span class="line">        <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];   <span class="comment">//record the number of characters remaining</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: s.toCharArray())&#123;</span><br><span class="line">            map[ch]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span> (set[ch] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                map[ch]--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!st.isEmpty() &amp;&amp; ch &lt; st.peek() &amp;&amp; map[st.peek()] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                set[st.pop()] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            st.push(ch);</span><br><span class="line">            set[ch] = <span class="number">1</span>;</span><br><span class="line">            map[ch]--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(!st.isEmpty())</span><br><span class="line">            res.append(st.pop());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode329-longestIncreasingPathInAMatrix</title>
    <url>/2020/03/02/Leetcode329-longestIncreasingPathInAMatrix/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer matrix, find the length of the longest increasing path.</p>
<p>From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; </span><br><span class="line">[</span><br><span class="line">  [9,9,4],</span><br><span class="line">  [6,6,8],</span><br><span class="line">  [2,1,1]</span><br><span class="line">] </span><br><span class="line">Output: 4 </span><br><span class="line">Explanation: The longest increasing path is [1, 2, 6, 9].</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; </span><br><span class="line">[</span><br><span class="line">  [3,4,5],</span><br><span class="line">  [3,2,6],</span><br><span class="line">  [2,2,1]</span><br><span class="line">] </span><br><span class="line">Output: 4 </span><br><span class="line">Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>DFS with memory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] dir = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestIncreasingPath</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] memory = <span class="keyword">new</span> <span class="keyword">int</span>[matrix.length][matrix[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; matrix[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (memory[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                    res = Math.max(res, helper(matrix, i, j, memory));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span>[][] memory)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; dir.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ny = y + dir[i][<span class="number">1</span>];            </span><br><span class="line">            <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; matrix.length &amp;&amp; ny &gt;=<span class="number">0</span> &amp;&amp; ny &lt; matrix[<span class="number">0</span>].length &amp;&amp; matrix[nx][ny] &gt; matrix[x][y])&#123;</span><br><span class="line">                <span class="keyword">if</span> (memory[nx][ny] == <span class="number">0</span>)</span><br><span class="line">                    memory[nx][ny] = helper(matrix, nx, ny, memory);</span><br><span class="line">                memory[x][y] = Math.max(memory[x][y], memory[nx][ny] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="keyword">return</span> Math.max(memory[x][y], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>DFS</tag>
        <tag>Bloomberg</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode341-flattenNestedListIterator</title>
    <url>/2019/10/06/Leetcode341-flattenNestedListIterator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a nested list of integers, implement an iterator to flatten it.</p>
<p>Each element is either an integer, or a list — whose elements may also be integers or other lists.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,1],2,[1,1]]</span><br><span class="line">Output: [1,1,2,1,1]</span><br><span class="line">Explanation: By calling next repeatedly until hasNext returns false, </span><br><span class="line">             the order of elements returned by next should be: [1,1,2,1,1].</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,[4,[6]]]</span><br><span class="line">Output: [1,4,6]</span><br><span class="line">Explanation: By calling next repeatedly until hasNext returns false, </span><br><span class="line">             the order of elements returned by next should be: [1,4,6].</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // This is the interface that allows for creating nested lists.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * public interface NestedInteger &#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // <span class="doctag">@return</span> true if this NestedInteger holds a single integer, rather than a nested list.</span></span><br><span class="line"><span class="comment"> *     public boolean isInteger();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // <span class="doctag">@return</span> the single integer that this NestedInteger holds, if it holds a single integer</span></span><br><span class="line"><span class="comment"> *     // Return null if this NestedInteger holds a nested list</span></span><br><span class="line"><span class="comment"> *     public Integer getInteger();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // <span class="doctag">@return</span> the nested list that this NestedInteger holds, if it holds a nested list</span></span><br><span class="line"><span class="comment"> *     // Return null if this NestedInteger holds a single integer</span></span><br><span class="line"><span class="comment"> *     public List&lt;NestedInteger&gt; getList();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NestedIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    LinkedList&lt;Integer&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NestedIterator</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        helper(nestedList);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(List&lt;NestedInteger&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (NestedInteger it: list)&#123;</span><br><span class="line">            <span class="keyword">if</span> (it.isInteger()) q.offer(it.getInteger());</span><br><span class="line">            <span class="keyword">else</span> helper(it.getList());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hasNext()) <span class="keyword">return</span> q.poll();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!q.isEmpty()) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your NestedIterator object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * NestedIterator i = new NestedIterator(nestedList);</span></span><br><span class="line"><span class="comment"> * while (i.hasNext()) v[f()] = i.next();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Queue</tag>
        <tag>Amazon</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode336-PalindromePairs</title>
    <url>/2019/10/11/Leetcode336-PalindromePairs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a list of unique words, find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;abcd&quot;,&quot;dcba&quot;,&quot;lls&quot;,&quot;s&quot;,&quot;sssll&quot;]</span><br><span class="line">Output: [[0,1],[1,0],[3,2],[2,4]] </span><br><span class="line">Explanation: The palindromes are [&quot;dcbaabcd&quot;,&quot;abcddcba&quot;,&quot;slls&quot;,&quot;llssssll&quot;]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;bat&quot;,&quot;tab&quot;,&quot;cat&quot;]</span><br><span class="line">Output: [[0,1],[1,0]] </span><br><span class="line">Explanation: The palindromes are [&quot;battab&quot;,&quot;tabbat&quot;]</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>$O(K*N^2)$<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; palindromePairs(String[] words) &#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (words == <span class="keyword">null</span> || words.length &lt; <span class="number">2</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length; i++) map.put(words[i], i);</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(<span class="string">""</span>))&#123;</span><br><span class="line">            <span class="keyword">for</span> (String word: map.keySet())&#123;</span><br><span class="line">                <span class="keyword">if</span> (isPalindrome(word) &amp;&amp; !word.equals(<span class="string">""</span>))&#123;</span><br><span class="line">                    res.add(Arrays.asList(map.get(<span class="string">""</span>), map.get(word)));</span><br><span class="line">                    res.add(Arrays.asList(map.get(word), map.get(<span class="string">""</span>)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String word: map.keySet())&#123;</span><br><span class="line">            String rev = <span class="keyword">new</span> StringBuffer(word).reverse().toString();</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(rev) &amp;&amp; map.get(rev)!=map.get(word))</span><br><span class="line">                res.add(Arrays.asList(map.get(word), map.get(rev)));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String word: words)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">                String p1 = word.substring(<span class="number">0</span>, i);</span><br><span class="line">                String p2 = word.substring(i);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (isPalindrome(p1))&#123;</span><br><span class="line">                    String rev = <span class="keyword">new</span> StringBuffer(p2).reverse().toString();</span><br><span class="line">                    <span class="keyword">if</span> (map.containsKey(rev) &amp;&amp; map.get(rev)!=map.get(word))&#123;</span><br><span class="line">                        res.add(Arrays.asList(map.get(rev), map.get(word)));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (isPalindrome(p2))&#123;</span><br><span class="line">                    String rev = <span class="keyword">new</span> StringBuffer(p1).reverse().toString();</span><br><span class="line">                    <span class="keyword">if</span> (map.containsKey(rev) &amp;&amp; map.get(rev) != map.get(word))&#123;</span><br><span class="line">                        res.add(Arrays.asList(map.get(word), map.get(rev)));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        String rev= <span class="keyword">new</span> StringBuffer(s).reverse().toString();</span><br><span class="line">        <span class="keyword">if</span> (s.equals(rev)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode344-reverseString</title>
    <url>/2019/10/14/Leetcode344-reverseString/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write a function that reverses a string. The input string is given as an array of characters char[].</p>
<p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p>
<p>You may assume all the characters consist of printable ascii characters.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">Output: [&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">Output: [&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = s.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">char</span> tmp = s[left];</span><br><span class="line">            s[left] = s[right];</span><br><span class="line">            s[right] = tmp;</span><br><span class="line">            </span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode332-reconstructItinerary</title>
    <url>/2020/03/02/Leetcode332-reconstructItinerary/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.</p>
<p><strong>Note:</strong></p>
<ol>
<li>If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary [“JFK”, “LGA”] has a smaller lexical order than [“JFK”, “LGB”].</li>
<li>All airports are represented by three capital letters (IATA code).</li>
<li>You may assume all tickets form at least one valid itinerary.</li>
</ol>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[&quot;MUC&quot;, &quot;LHR&quot;], [&quot;JFK&quot;, &quot;MUC&quot;], [&quot;SFO&quot;, &quot;SJC&quot;], [&quot;LHR&quot;, &quot;SFO&quot;]]</span><br><span class="line">Output: [&quot;JFK&quot;, &quot;MUC&quot;, &quot;LHR&quot;, &quot;SFO&quot;, &quot;SJC&quot;]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]</span><br><span class="line">Output: [&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]</span><br><span class="line">Explanation: Another possible reconstruction is [&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;ATL&quot;,&quot;SFO&quot;].</span><br><span class="line">             But it is larger in lexical order.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findItinerary</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, PriorityQueue&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; pair: tickets)&#123;</span><br><span class="line">            String depart = pair.get(<span class="number">0</span>);</span><br><span class="line">            String des = pair.get(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(depart))&#123;</span><br><span class="line">                PriorityQueue&lt;String&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">                pq.offer(des);</span><br><span class="line">                map.put(depart, pq);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                map.get(depart).offer(des);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        helper(map, res, <span class="string">"JFK"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(HashMap&lt;String, PriorityQueue&lt;String&gt;&gt; map, List&lt;String&gt; res, String cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (map.containsKey(cur) &amp;&amp; !map.get(cur).isEmpty())&#123;</span><br><span class="line">            helper(map, res, map.get(cur).poll());</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(<span class="number">0</span>, cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Bloomberg</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode348-designTicTacToe</title>
    <url>/2019/10/05/Leetcode348-designTicTacToe/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a Tic-tac-toe game that is played between two players on a n x n grid.</p>
<p>You may assume the following rules:</p>
<p>A move is guaranteed to be valid and is placed on an empty block.<br>Once a winning condition is reached, no more moves is allowed.<br>A player who succeeds in placing n of their marks in a horizontal, vertical, or diagonal row wins the game.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">Given n &#x3D; 3, assume that player 1 is &quot;X&quot; and player 2 is &quot;O&quot; in the board.</span><br><span class="line"></span><br><span class="line">TicTacToe toe &#x3D; new TicTacToe(3);</span><br><span class="line"></span><br><span class="line">toe.move(0, 0, 1); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| | |</span><br><span class="line">| | | |    &#x2F;&#x2F; Player 1 makes a move at (0, 0).</span><br><span class="line">| | | |</span><br><span class="line"></span><br><span class="line">toe.move(0, 2, 2); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| |O|</span><br><span class="line">| | | |    &#x2F;&#x2F; Player 2 makes a move at (0, 2).</span><br><span class="line">| | | |</span><br><span class="line"></span><br><span class="line">toe.move(2, 2, 1); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| |O|</span><br><span class="line">| | | |    &#x2F;&#x2F; Player 1 makes a move at (2, 2).</span><br><span class="line">| | |X|</span><br><span class="line"></span><br><span class="line">toe.move(1, 1, 2); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| |O|</span><br><span class="line">| |O| |    &#x2F;&#x2F; Player 2 makes a move at (1, 1).</span><br><span class="line">| | |X|</span><br><span class="line"></span><br><span class="line">toe.move(2, 0, 1); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| |O|</span><br><span class="line">| |O| |    &#x2F;&#x2F; Player 1 makes a move at (2, 0).</span><br><span class="line">|X| |X|</span><br><span class="line"></span><br><span class="line">toe.move(1, 0, 2); -&gt; Returns 0 (no one wins)</span><br><span class="line">|X| |O|</span><br><span class="line">|O|O| |    &#x2F;&#x2F; Player 2 makes a move at (1, 0).</span><br><span class="line">|X| |X|</span><br><span class="line"></span><br><span class="line">toe.move(2, 1, 1); -&gt; Returns 1 (player 1 wins)</span><br><span class="line">|X| |O|</span><br><span class="line">|O|O| |    &#x2F;&#x2F; Player 1 makes a move at (2, 1).</span><br><span class="line">|X|X|X|</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>$O(1)$ Solution<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TicTacToe</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] rows, cols;</span><br><span class="line">    <span class="keyword">int</span> d1, d2, n;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TicTacToe</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">      rows = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">      cols = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">      d1 = <span class="number">0</span>;</span><br><span class="line">      d2 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> player)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> val = (player == <span class="number">1</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">int</span> target = (player == <span class="number">1</span>) ? n : -n;</span><br><span class="line">        </span><br><span class="line">      <span class="keyword">if</span>(row == col) &#123; <span class="comment">// diagonal </span></span><br><span class="line">        d1 += val;</span><br><span class="line">        <span class="keyword">if</span>(d1 == target) <span class="keyword">return</span> player;</span><br><span class="line">      &#125;</span><br><span class="line">        </span><br><span class="line">      <span class="keyword">if</span>(row + col + <span class="number">1</span> == n) &#123; <span class="comment">// diagonal </span></span><br><span class="line">        d2 += val;</span><br><span class="line">        <span class="keyword">if</span>(d2 == target) <span class="keyword">return</span> player;</span><br><span class="line">      &#125;</span><br><span class="line">        </span><br><span class="line">      rows[row] += val;</span><br><span class="line">      cols[col] += val;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(rows[row] == target || cols[col] == target) <span class="keyword">return</span> player;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your TicTacToe object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * TicTacToe obj = new TicTacToe(n);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.move(row,col,player);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p>
<p>$O(N)$ Solution</p>
<pre><code class="lang-java">class TicTacToe {

    int[][] board;
    int bn;
    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        board = new int[n][n];
        for (int i = 0; i &lt; n; i++)
            for (int j = 0; j &lt; n; j++)
                board[i][j] = 0;
        bn = n;
    }

    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        board[row][col] = player;

        int flag = 0;
        for (int i = 0; i &lt; bn; i++){
            // System.out.println(board[row][i] + &quot; &quot; + player);
            if (board[row][i] != player){
                flag = 1;
                break;
            }
        }
        // System.out.println(flag);
        if (flag == 0) return player;

        flag = 0;
        for (int i = 0; i &lt; bn; i++){
            if (board[i][col] != player){
                flag = 1;
                break;
            }
        }
        if (flag == 0) return player;

        if (row - col == 0){
            flag = 0;
            int x = 0;
            int y = 0;
            for (int i = 0; i &lt; bn; i++){
                if (board[x][y] != player){
                    flag = 1;
                    break;
                }
                x++;
                y++;
            }
            if (flag == 0) return player;
        }
        if (row + col == bn-1){
            flag = 0;
            int x = 0;
            int y = bn-1;
            for (int i = 0; i &lt; bn; i++){
                if (board[x][y] != player){
                    flag = 1;
                    break;
                }
                x++;
                y--;
            }
            if (flag == 0) return player;
        }

        return 0;

    }
}
/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */
</code></pre>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Microsoft</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode347-topKFrequentElements</title>
    <url>/2019/09/18/Leetcode347-topKFrequentElements/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty array of integers, return the k most frequent elements.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [1,1,1,2,2,3], k &#x3D; 2</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [1], k &#x3D; 1</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure><br><strong>Note</strong>:</p>
<ul>
<li>You may assume k is always valid, 1 ≤ k ≤ number of unique elements.</li>
<li>Your algorithm’s time complexity must be better than O(n log n), where n is the array’s size.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Solution-1-Heap"><a href="#Solution-1-Heap" class="headerlink" title="Solution 1: Heap"></a>Solution 1: Heap</h3><p><strong>Time Complexity:</strong> <script type="math/tex">O(Nlogk)</script></p>
<p><strong>Space Complexity:</strong> <script type="math/tex">O(N)</script></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">topKFrequent</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(x))&#123;</span><br><span class="line">                map.put(x, map.get(x)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> map.put(x, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Note&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(k, <span class="keyword">new</span> Comparator&lt;Note&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Note a, Note b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a.freq-b.freq;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x: map.keySet())&#123;</span><br><span class="line">            pq.offer(<span class="keyword">new</span> Note(x, map.get(x)));</span><br><span class="line">            <span class="keyword">if</span> (pq.size() &gt; k)&#123;</span><br><span class="line">                pq.poll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty())&#123;</span><br><span class="line">            res.add(pq.poll().val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Note</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        <span class="keyword">int</span> freq;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Note</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> freq)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.freq = freq;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-2-Quick-Select"><a href="#Solution-2-Quick-Select" class="headerlink" title="Solution 2: Quick Select"></a>Solution 2: Quick Select</h3><p><strong>Time Complexity:</strong> <script type="math/tex">O(N)</script>, worest case <script type="math/tex">O(N)</script></p>
<p><strong>Space Complexity:</strong> <script type="math/tex">O(N)</script><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] topKFrequent(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums)</span><br><span class="line">            map.put(num, map.getOrDefault(num,<span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        nums = map.keySet().stream().mapToInt(i-&gt;i).toArray();</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> partitionIndex = partition(nums, start, end);</span><br><span class="line">            <span class="keyword">if</span>(partitionIndex &lt; k - <span class="number">1</span>) </span><br><span class="line">                start = partitionIndex + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(partitionIndex &gt; k - <span class="number">1</span>)</span><br><span class="line">                end = partitionIndex - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">       <span class="keyword">return</span> Arrays.copyOfRange(nums,<span class="number">0</span>,k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Randomized Quick Partition....</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> partitionIndex = start;</span><br><span class="line">        <span class="keyword">int</span> randomIndex = ThreadLocalRandom.current().nextInt(start, end);</span><br><span class="line">        swap(nums, start , randomIndex);</span><br><span class="line">        <span class="keyword">int</span> pivot = map.get(nums[end]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = map.get(nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(cur &gt;= pivot) </span><br><span class="line">                swap(nums, i, partitionIndex++);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        swap(nums, partitionIndex, end);</span><br><span class="line">        <span class="keyword">return</span> partitionIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Amazon</tag>
        <tag>Heap</tag>
        <tag>TikTok</tag>
        <tag>Quick Select</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode353-designSnakeGame</title>
    <url>/2019/10/05/Leetcode353-designSnakeGame/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a Snake game that is played on a device with screen size = width x height. Play the game online if you are not familiar with the game.</p>
<p>The snake is initially positioned at the top left corner (0,0) with length = 1 unit.</p>
<p>You are given a list of food’s positions in row-column order. When a snake eats the food, its length and the game’s score both increase by 1.</p>
<p>Each food appears one by one on the screen. For example, the second food will not appear until the first food was eaten by the snake.</p>
<p>When a food does appear on the screen, it is guaranteed that it will not appear on a block occupied by the snake.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given width &#x3D; 3, height &#x3D; 2, and food &#x3D; [[1,2],[0,1]].</span><br><span class="line"></span><br><span class="line">Snake snake &#x3D; new Snake(width, height, food);</span><br><span class="line"></span><br><span class="line">Initially the snake appears at position (0,0) and the food at (1,2).</span><br><span class="line"></span><br><span class="line">|S| | |</span><br><span class="line">| | |F|</span><br><span class="line"></span><br><span class="line">snake.move(&quot;R&quot;); -&gt; Returns 0</span><br><span class="line"></span><br><span class="line">| |S| |</span><br><span class="line">| | |F|</span><br><span class="line"></span><br><span class="line">snake.move(&quot;D&quot;); -&gt; Returns 0</span><br><span class="line"></span><br><span class="line">| | | |</span><br><span class="line">| |S|F|</span><br><span class="line"></span><br><span class="line">snake.move(&quot;R&quot;); -&gt; Returns 1 (Snake eats the first food and right after that, the second food appears at (0,1) )</span><br><span class="line"></span><br><span class="line">| |F| |</span><br><span class="line">| |S|S|</span><br><span class="line"></span><br><span class="line">snake.move(&quot;U&quot;); -&gt; Returns 1</span><br><span class="line"></span><br><span class="line">| |F|S|</span><br><span class="line">| | |S|</span><br><span class="line"></span><br><span class="line">snake.move(&quot;L&quot;); -&gt; Returns 2 (Snake eats the second food)</span><br><span class="line"></span><br><span class="line">| |S|S|</span><br><span class="line">| | |S|</span><br><span class="line"></span><br><span class="line">snake.move(&quot;U&quot;); -&gt; Returns -1 (Game over because snake collides with border)</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if use row*width + col = the number of coordinate</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnakeGame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here.</span></span><br><span class="line"><span class="comment">        <span class="doctag">@param</span> width - screen width</span></span><br><span class="line"><span class="comment">        <span class="doctag">@param</span> height - screen height </span></span><br><span class="line"><span class="comment">        <span class="doctag">@param</span> food - A list of food positions</span></span><br><span class="line"><span class="comment">        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */</span></span><br><span class="line">    <span class="keyword">int</span>[][] food;</span><br><span class="line">    LinkedList&lt;<span class="keyword">int</span>[]&gt; snack;</span><br><span class="line">    HashSet&lt;<span class="keyword">int</span>[]&gt; set;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">int</span> nf;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnakeGame</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span>[][] food)</span> </span>&#123;</span><br><span class="line">        snack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        snack.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">        </span><br><span class="line">        set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.food = food;</span><br><span class="line">        n = height;</span><br><span class="line">        m = width;</span><br><span class="line">        nf = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Moves the snake.</span></span><br><span class="line"><span class="comment">        <span class="doctag">@param</span> direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down </span></span><br><span class="line"><span class="comment">        <span class="doctag">@return</span> The game's score after the move. Return -1 if game over. </span></span><br><span class="line"><span class="comment">        Game over when snake crosses the screen boundary or bites its body. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">move</span><span class="params">(String direction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] head = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;snack.peek()[<span class="number">0</span>], snack.peek()[<span class="number">1</span>]&#125;;</span><br><span class="line">        <span class="keyword">int</span> x=head[<span class="number">0</span>],y=head[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">switch</span> (direction)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"U"</span>:</span><br><span class="line">                x--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"L"</span>:</span><br><span class="line">                y--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"R"</span>:</span><br><span class="line">                y++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">                x++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (x &gt;= n || x &lt; <span class="number">0</span> || y &gt;= m || y &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; snack.size()-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (x == snack.get(i)[<span class="number">0</span>] &amp;&amp; y == snack.get(i)[<span class="number">1</span>]) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        snack.addFirst(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;x,y&#125;);</span><br><span class="line">        <span class="keyword">if</span> (food.length &gt; nf &amp;&amp; x == food[nf][<span class="number">0</span>] &amp;&amp; y == food[nf][<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> ++nf;  </span><br><span class="line">        &#125;</span><br><span class="line">        snack.pollLast();        </span><br><span class="line">        <span class="keyword">return</span> nf;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your SnakeGame object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * SnakeGame obj = new SnakeGame(width, height, food);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.move(direction);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Queue</tag>
        <tag>Amazon</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode359-loggerRateLimiter</title>
    <url>/2020/03/16/Leetcode359-loggerRateLimiter/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a logger system that receive stream of messages along with its timestamps, each message should be printed if and only if it is not printed in the last 10 seconds.</p>
<p>Given a message and a timestamp (in seconds granularity), return true if the message should be printed in the given timestamp, otherwise returns false.</p>
<p>It is possible that several messages arrive roughly at the same time.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Logger logger &#x3D; new Logger();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; logging string &quot;foo&quot; at timestamp 1</span><br><span class="line">logger.shouldPrintMessage(1, &quot;foo&quot;); returns true; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; logging string &quot;bar&quot; at timestamp 2</span><br><span class="line">logger.shouldPrintMessage(2,&quot;bar&quot;); returns true;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; logging string &quot;foo&quot; at timestamp 3</span><br><span class="line">logger.shouldPrintMessage(3,&quot;foo&quot;); returns false;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; logging string &quot;bar&quot; at timestamp 8</span><br><span class="line">logger.shouldPrintMessage(8,&quot;bar&quot;); returns false;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; logging string &quot;foo&quot; at timestamp 10</span><br><span class="line">logger.shouldPrintMessage(10,&quot;foo&quot;); returns false;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; logging string &quot;foo&quot; at timestamp 11</span><br><span class="line">logger.shouldPrintMessage(11,&quot;foo&quot;); returns true;</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, Integer&gt; map;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Logger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns true if the message should be printed in the given timestamp, otherwise returns false.</span></span><br><span class="line"><span class="comment">        If this method returns false, the message will not be printed.</span></span><br><span class="line"><span class="comment">        The timestamp is in seconds granularity. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldPrintMessage</span><span class="params">(<span class="keyword">int</span> timestamp, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(message))&#123;</span><br><span class="line">            map.put(message, timestamp);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(message) + <span class="number">10</span> &gt; timestamp) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(message, timestamp);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Logger object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Logger obj = new Logger();</span></span><br><span class="line"><span class="comment"> * boolean param_1 = obj.shouldPrintMessage(timestamp,message);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Hash Table</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode364-nestedListWeightSumII</title>
    <url>/2020/02/10/Leetcode364-nestedListWeightSumII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a nested list of integers, return the sum of all integers in the list weighted by their depth.</p>
<p>Each element is either an integer, or a list — whose elements may also be integers or other lists.</p>
<p>Different from the previous question where weight is increasing from root to leaf, now the weight is defined from bottom up. i.e., the leaf level integers have weight 1, and the root level integers have the largest weight.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/27/nestedlistweightsumiiex1.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given the list [[1,1],2,[1,1]], return 8. (four 1&#39;s at depth 1, one 2 at depth 2)</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/03/27/nestedlistweightsumiiex2.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given the list [1,[4,[6]]], return 17. (one 1 at depth 3, one 4 at depth 2, and one 6 at depth 1; 13 + 42 + 6*1 &#x3D; 17)</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depthSumInverse</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> DFS(nestedList, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">DFS</span><span class="params">(List&lt;NestedInteger&gt; nestedList, <span class="keyword">int</span> intSum)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//关键点在于把上一层的integer sum传到下一层去，这样的话，接下来还有几层，每一层都会加上这个integer sum,也就等于乘以了它的层数</span></span><br><span class="line">    List&lt;NestedInteger&gt; nextLevel = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> listSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (NestedInteger list : nestedList) &#123;</span><br><span class="line">        <span class="keyword">if</span> (list.isInteger()) &#123;</span><br><span class="line">            intSum += list.getInteger();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nextLevel.addAll(list.getList());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    listSum = nextLevel.isEmpty() ? <span class="number">0</span> : DFS(nextLevel, intSum);</span><br><span class="line">    <span class="keyword">return</span> listSum + intSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Backtracking</tag>
        <tag>Linkedin</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode366-findLeavesOfBinaryTree</title>
    <url>/2019/10/14/Leetcode366-findLeavesOfBinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, collect a tree’s nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5]</span><br><span class="line">  </span><br><span class="line">          1</span><br><span class="line">         &#x2F; \</span><br><span class="line">        2   3</span><br><span class="line">       &#x2F; \     </span><br><span class="line">      4   5    </span><br><span class="line"></span><br><span class="line">Output: [[4,5,3],[2],[1]]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; findLeaves(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        traversal(root, res);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">traversal</span><span class="params">(TreeNode node, List&lt;List&lt;Integer&gt;&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> level = Math.max(traversal(node.left, res), traversal(node.right, res)) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (level &gt;= res.size()) res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        res.get(level).add(node.val);</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode388-longestAbsoluteFilePath</title>
    <url>/2019/10/14/Leetcode388-longestAbsoluteFilePath/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Suppose we abstract our file system by a string in the following manner:</p>
<p>The string “dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext” represents:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dir</span><br><span class="line">    subdir1</span><br><span class="line">    subdir2</span><br><span class="line">        file.ext</span><br></pre></td></tr></table></figure></p>
<p>The directory dir contains an empty sub-directory subdir1 and a sub-directory subdir2 containing a file file.ext.</p>
<p>The string “dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext” represents:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dir</span><br><span class="line">    subdir1</span><br><span class="line">        file1.ext</span><br><span class="line">        subsubdir1</span><br><span class="line">    subdir2</span><br><span class="line">        subsubdir2</span><br><span class="line">            file2.ext</span><br></pre></td></tr></table></figure><br>The directory dir contains two sub-directories subdir1 and subdir2. subdir1 contains a file file1.ext and an empty second-level sub-directory subsubdir1. subdir2 contains a second-level sub-directory subsubdir2 containing a file file2.ext.</p>
<p>We are interested in finding the longest (number of characters) absolute path to a file within our file system. For example, in the second example above, the longest absolute path is “dir/subdir2/subsubdir2/file2.ext”, and its length is 32 (not including the double quotes).</p>
<p>Given a string representing the file system in the above format, return the length of the longest absolute path to file in the abstracted file system. If there is no file in the system, return 0.</p>
<p><strong>Note:</strong></p>
<ul>
<li>The name of a file contains at least a . and an extension.</li>
<li>The name of a directory or sub-directory will not contain a ..</li>
<li>Time complexity required: O(n) where n is the size of the input string.</li>
</ul>
<p>Notice that a/aa/aaa/file1.txt is not the longest file path, if there is another path aaaaaaaaaaaaaaaaaaaaa/sth.png.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthLongestPath</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span> || input.length() == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        Stack&lt;Integer&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        st.push(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String cur: input.split(<span class="string">"\n"</span>))&#123;</span><br><span class="line">            <span class="keyword">int</span> level = cur.lastIndexOf(<span class="string">"\t"</span>) + <span class="number">1</span>; <span class="comment">// number of "\t"</span></span><br><span class="line">            <span class="keyword">while</span>(level + <span class="number">1</span> &lt; st.size()) st.pop(); <span class="comment">// find parent</span></span><br><span class="line">            <span class="keyword">int</span> len = st.peek() + cur.length() - level + <span class="number">1</span>; <span class="comment">// remove "/t", add"/"</span></span><br><span class="line">            st.push(len);</span><br><span class="line">            <span class="keyword">if</span> (cur.contains(<span class="string">"."</span>)) res = Math.max(res, len - <span class="number">1</span>);</span><br><span class="line">        &#125;         </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode384-shuffleanArray</title>
    <url>/2019/10/13/Leetcode384-shuffleanArray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Shuffle a set of numbers without duplicates.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Init an array with set 1, 2, and 3.</span><br><span class="line">int[] nums &#x3D; &#123;1,2,3&#125;;</span><br><span class="line">Solution solution &#x3D; new Solution(nums);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.</span><br><span class="line">solution.shuffle();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Resets the array back to its original configuration [1,2,3].</span><br><span class="line">solution.reset();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Returns the random shuffling of array [1,2,3].</span><br><span class="line">solution.shuffle();</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] nums;</span><br><span class="line">    <span class="keyword">private</span> Random random;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nums = nums;</span><br><span class="line">        random = <span class="keyword">new</span> Random();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Resets the array to its original configuration and return it. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] reset() &#123;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns a random shuffling of the array. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] shuffle() &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)</span><br><span class="line">            map.put(i, nums[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = random.nextInt(nums.length);</span><br><span class="line">            <span class="keyword">while</span> (!map.containsKey(tmp))&#123;</span><br><span class="line">                tmp = random.nextInt(nums.length);</span><br><span class="line">            &#125;</span><br><span class="line">            res[i] = nums[tmp];</span><br><span class="line">            map.remove(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Solution obj = new Solution(nums);</span></span><br><span class="line"><span class="comment"> * int[] param_1 = obj.reset();</span></span><br><span class="line"><span class="comment"> * int[] param_2 = obj.shuffle();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode380-insertDeleteGetRandomO1</title>
    <url>/2019/10/07/Leetcode380-insertDeleteGetRandomO1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a data structure that supports all following operations in average O(1) time.</p>
<p>insert(val): Inserts an item val to the set if not already present.<br>remove(val): Removes an item val from the set if present.<br>getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Init an empty set.</span><br><span class="line">RandomizedSet randomSet &#x3D; new RandomizedSet();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Inserts 1 to the set. Returns true as 1 was inserted successfully.</span><br><span class="line">randomSet.insert(1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Returns false as 2 does not exist in the set.</span><br><span class="line">randomSet.remove(2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Inserts 2 to the set, returns true. Set now contains [1,2].</span><br><span class="line">randomSet.insert(2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; getRandom should return either 1 or 2 randomly.</span><br><span class="line">randomSet.getRandom();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Removes 1 from the set, returns true. Set now contains [2].</span><br><span class="line">randomSet.remove(1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2 was already in the set, so return false.</span><br><span class="line">randomSet.insert(2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Since 2 is the only number in the set, getRandom always return 2.</span><br><span class="line">randomSet.getRandom();</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomizedSet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map;</span><br><span class="line">    List&lt;Integer&gt; nums;</span><br><span class="line">    Random random;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RandomizedSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        random = <span class="keyword">new</span> Random();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(val))&#123;</span><br><span class="line">            nums.add(val);</span><br><span class="line">            map.put(val,nums.size()-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes a value from the set. Returns true if the set contained the specified element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(val)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> index = map.get(val);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (index &lt; nums.size()-<span class="number">1</span>)&#123;</span><br><span class="line">                nums.set(index, nums.get(nums.size()-<span class="number">1</span>));</span><br><span class="line">                map.put(nums.get(nums.size()-<span class="number">1</span>), index);</span><br><span class="line">            &#125;</span><br><span class="line">            nums.remove(nums.size()-<span class="number">1</span>);</span><br><span class="line">            map.remove(val);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get a random element from the set. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nums.get(random.nextInt(nums.size()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your RandomizedSet object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * RandomizedSet obj = new RandomizedSet();</span></span><br><span class="line"><span class="comment"> * boolean param_1 = obj.insert(val);</span></span><br><span class="line"><span class="comment"> * boolean param_2 = obj.remove(val);</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.getRandom();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode363-maxSumOfRectangleNoLargerThanK</title>
    <url>/2020/04/07/Leetcode363-maxSumOfRectangleNoLargerThanK/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty 2D matrix matrix and an integer k, find the max sum of a rectangle in the matrix such that its sum is no larger than k.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: matrix &#x3D; [[1,0,1],[0,-2,3]], k &#x3D; 2</span><br><span class="line">Output: 2 </span><br><span class="line">Explanation: Because the sum of rectangle [[0, 1], [-2, 3]] is 2,</span><br><span class="line">             and 2 is the max number no larger than k (k &#x3D; 2).</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>The rectangle inside the matrix must have an area &gt; 0.</li>
<li>What if the number of rows is much larger than the number of columns?</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: Brute force</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// O((nm)^2)     </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSumSubmatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rows = matrix.length, cols = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] areas = <span class="keyword">new</span> <span class="keyword">int</span>[rows][cols];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; rows; r++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; cols; c++) &#123;</span><br><span class="line">                <span class="keyword">int</span> area = matrix[r][c];</span><br><span class="line">                <span class="keyword">if</span> (r-<span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">                    area += areas[r-<span class="number">1</span>][c];</span><br><span class="line">                <span class="keyword">if</span> (c-<span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">                    area += areas[r][c-<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (r-<span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; c-<span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">                    area -= areas[r-<span class="number">1</span>][c-<span class="number">1</span>];</span><br><span class="line">                areas[r][c] = area;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r1 = <span class="number">0</span>; r1 &lt; rows; r1++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c1 = <span class="number">0</span>; c1 &lt; cols; c1++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> r2 = r1; r2 &lt; rows; r2++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> c2 = c1; c2 &lt; cols; c2++) &#123;</span><br><span class="line">                        <span class="keyword">int</span> area = areas[r2][c2];</span><br><span class="line">                        <span class="keyword">if</span> (r1-<span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">                            area -= areas[r1-<span class="number">1</span>][c2];</span><br><span class="line">                        <span class="keyword">if</span> (c1-<span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">                            area -= areas[r2][c1-<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span> (r1-<span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; c1 -<span class="number">1</span> &gt;= <span class="number">0</span>)</span><br><span class="line">                            area += areas[r1-<span class="number">1</span>][c1-<span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span> (area &lt;= k)</span><br><span class="line">                            max = Math.max(max, area);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>Solution 2: 2D Kadane’s algorithm + 1D maxSum problem with sum limit k</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//     O(n^2 * m * logm)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSumSubmatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//2D Kadane's algorithm + 1D maxSum problem with sum limit k</span></span><br><span class="line">        <span class="comment">//2D subarray sum solution</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//boundary check</span></span><br><span class="line">        <span class="keyword">if</span>(matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> m = matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> result = Integer.MIN_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//outer loop should use smaller axis</span></span><br><span class="line">        <span class="comment">//now we assume we have more rows than cols, therefore outer loop will be based on cols </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> left = <span class="number">0</span>; left &lt; n; left++)&#123;</span><br><span class="line">            <span class="comment">//array that accumulate sums for each row from left to right </span></span><br><span class="line">            <span class="keyword">int</span>[] sums = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> right = left; right &lt; n; right++)&#123;</span><br><span class="line">                <span class="comment">//update sums[] to include values in curr right col</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">                    sums[i] += matrix[i][right];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//we use TreeSet to help us find the rectangle with maxSum &lt;= k with O(logN) time</span></span><br><span class="line">                TreeSet&lt;Integer&gt; set = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line">                <span class="comment">//add 0 to cover the single row case</span></span><br><span class="line">                set.add(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">int</span> currSum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> sum : sums)&#123;</span><br><span class="line">                    currSum += sum;</span><br><span class="line">                    <span class="comment">//we use sum subtraction (curSum - sum) to get the subarray with sum &lt;= k</span></span><br><span class="line">                    <span class="comment">//therefore we need to look for the smallest sum &gt;= currSum - k</span></span><br><span class="line">                    Integer num = set.ceiling(currSum - k);</span><br><span class="line">                    <span class="keyword">if</span>(num != <span class="keyword">null</span>) result = Math.max( result, currSum - num );</span><br><span class="line">                    set.add(currSum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode392-isSubsequence</title>
    <url>/2020/03/02/Leetcode392-isSubsequence/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string s and a string t, check if s is subsequence of t.</p>
<p>You may assume that there is only lower case English letters in both s and t. t is potentially a very long (length ~= 500,000) string, and s is a short string (&lt;=100).</p>
<p>A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, “ace” is a subsequence of “abcde” while “aec” is not).</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; &quot;abc&quot;, t &#x3D; &quot;ahbgdc&quot;</span><br><span class="line"></span><br><span class="line">Return true.</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; &quot;axc&quot;, t &#x3D; &quot;ahbgdc&quot;</span><br><span class="line">Return false.</span><br></pre></td></tr></table></figure><br><strong>Follow up:</strong><br>If there are lots of incoming S, say S1, S2, … , Sk where k &gt;= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//     faster basic solution</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">int</span> index = t.indexOf(c);</span><br><span class="line">            <span class="keyword">if</span>(index &lt; <span class="number">0</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            t = t.substring(index+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 2</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">// two pointers, basic solution</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> indexS = <span class="number">0</span>, indexT = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (indexT &lt; t.length()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t.charAt(indexT) == s.charAt(indexS)) &#123;</span><br><span class="line">                indexS++;</span><br><span class="line">                <span class="keyword">if</span> (indexS == s.length()) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            indexT++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 3</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">// binary search + index recording, for follow up</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubsequence</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt;[] index = <span class="keyword">new</span> List[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (index[t.charAt(i)] == <span class="keyword">null</span>)</span><br><span class="line">                index[t.charAt(i)] = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            index[t.charAt(i)].add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> pre = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (index[s.charAt(i)] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">int</span> cur = helper(index[s.charAt(i)], pre);</span><br><span class="line">            <span class="keyword">if</span> (cur == -<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(List&lt;Integer&gt; list, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = list.size() - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (list.get(mid) &lt;= target)</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list.get(left) &gt; target) <span class="keyword">return</span> list.get(left);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Binary Search</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode399-evaluateDivision</title>
    <url>/2020/03/02/Leetcode399-evaluateDivision/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return -1.0.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given a &#x2F; b &#x3D; 2.0, b &#x2F; c &#x3D; 3.0.</span><br><span class="line">queries are: a &#x2F; c &#x3D; ?, b &#x2F; a &#x3D; ?, a &#x2F; e &#x3D; ?, a &#x2F; a &#x3D; ?, x &#x2F; x &#x3D; ? .</span><br><span class="line">return [6.0, 0.5, -1.0, 1.0, -1.0 ].</span><br><span class="line"></span><br><span class="line">The input is: vector&lt;pair&lt;string, string&gt;&gt; equations, vector&lt;double&gt;&amp; values, vector&lt;pair&lt;string, string&gt;&gt; queries , where equations.size() &#x3D;&#x3D; values.size(), and the values are positive. This represents the equations. Return vector&lt;double&gt;.</span><br><span class="line"></span><br><span class="line">According to the example above:</span><br><span class="line"></span><br><span class="line">equations &#x3D; [ [&quot;a&quot;, &quot;b&quot;], [&quot;b&quot;, &quot;c&quot;] ],</span><br><span class="line">values &#x3D; [2.0, 3.0],</span><br><span class="line">queries &#x3D; [ [&quot;a&quot;, &quot;c&quot;], [&quot;b&quot;, &quot;a&quot;], [&quot;a&quot;, &quot;e&quot;], [&quot;a&quot;, &quot;a&quot;], [&quot;x&quot;, &quot;x&quot;] ].</span><br></pre></td></tr></table></figure>
<p>The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Image a/b = k as a link between node a and b, the weight from a to b is k, the reverse link is 1/k. Query is to find a path between two nodes.</p>
<p>What can be improved: Used union find path compression.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span>[] calcEquation(List&lt;List&lt;String&gt;&gt; equations, <span class="keyword">double</span>[] values, List&lt;List&lt;String&gt;&gt; queries) &#123;</span><br><span class="line">        Map&lt;String, Map&lt;String, Double&gt;&gt; graph = buildGraph(equations, values);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">double</span>[] res = <span class="keyword">new</span> <span class="keyword">double</span>[queries.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.length; i++)&#123;</span><br><span class="line">            res[i] = calculate(graph, queries.get(i).get(<span class="number">0</span>), queries.get(i).get(<span class="number">1</span>), <span class="keyword">new</span> HashSet&lt;String&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//     Calculate the value between s and t</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(Map&lt;String, Map&lt;String, Double&gt;&gt; graph, String s, String t, HashSet&lt;String&gt; visited)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!graph.containsKey(s))</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1.0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (graph.get(s).containsKey(t))</span><br><span class="line">            <span class="keyword">return</span> graph.get(s).get(t);</span><br><span class="line">        </span><br><span class="line">        visited.add(s);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Double&gt; neighbor: graph.get(s).entrySet())&#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited.contains(neighbor.getKey()))&#123;</span><br><span class="line">                <span class="keyword">double</span> temp = calculate(graph, neighbor.getKey(), t, visited);</span><br><span class="line">                <span class="keyword">if</span> (temp != -<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> neighbor.getValue() * temp;    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//     Build a graph</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Map&lt;String, Double&gt;&gt; buildGraph(List&lt;List&lt;String&gt;&gt; equations, <span class="keyword">double</span>[] values)&#123;</span><br><span class="line">        Map&lt;String, Map&lt;String, Double&gt;&gt; graph = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line">            String a = equations.get(i).get(<span class="number">0</span>);</span><br><span class="line">            String b = equations.get(i).get(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (!graph.containsKey(a))</span><br><span class="line">                graph.put(a, <span class="keyword">new</span> HashMap&lt;String, Double&gt;());</span><br><span class="line">            graph.get(a).put(b, values[i]);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!graph.containsKey(b))</span><br><span class="line">                graph.put(b, <span class="keyword">new</span> HashMap&lt;String, Double&gt;());</span><br><span class="line">            graph.get(b).put(a, <span class="number">1</span> / values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> graph;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Bloomberg</tag>
        <tag>Graph</tag>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode390-eliminationGame</title>
    <url>/2020/03/01/Leetcode390-eliminationGame/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is a list of sorted integers from 1 to n. Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.</p>
<p>Repeat the previous step again, but this time from right to left, remove the right most number and every other number from the remaining numbers.</p>
<p>We keep repeating the steps again, alternating left to right and right to left, until a single number remains.</p>
<p>Find the last number that remains starting with a list of length n.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">n &#x3D; 9,</span><br><span class="line">1 2 3 4 5 6 7 8 9</span><br><span class="line">2 4 6 8</span><br><span class="line">2 6</span><br><span class="line">6</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">6</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>My idea is to update and record head in each turn. when the total number becomes 1, head is the only number left.</p>
<p>When will head be updated?</p>
<p>if we move from left<br>if we move from right and the total remaining number % 2 == 1<br>like 2 4 6 8 10, we move from 10, we will take out 10, 6 and 2, head is deleted and move to 4<br>like 2 4 6 8 10 12, we move from 12, we will take out 12, 8, 4, head is still remaining 2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastRemaining</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> head = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> remaining = n;</span><br><span class="line">        <span class="keyword">boolean</span> left = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(remaining &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (left || remaining % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">                head += step;</span><br><span class="line">            step *= <span class="number">2</span>;</span><br><span class="line">            remaining /= <span class="number">2</span>;</span><br><span class="line">            left = !left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Two pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode387-firstUniqueCharacterInAString</title>
    <url>/2020/02/24/Leetcode387-firstUniqueCharacterInAString/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string, find the first non-repeating character in it and return it’s index. If it doesn’t exist, return -1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; &quot;leetcode&quot;</span><br><span class="line">return 0.</span><br><span class="line"></span><br><span class="line">s &#x3D; &quot;loveleetcode&quot;,</span><br><span class="line">return 2.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstUniqChar</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(s.charAt(i)) == <span class="number">1</span>) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Method 2: More faster<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstUniqChar</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] countRepeats = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">            countRepeats[s.charAt(i)]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(countRepeats[s.charAt(i)] == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode404-sumOfLeftLeaves</title>
    <url>/2020/03/10/Leetcode404-sumOfLeftLeaves/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Find the sum of all left leaves in a given binary tree.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  9  20</span><br><span class="line">    &#x2F;  \</span><br><span class="line">   15   7</span><br><span class="line"></span><br><span class="line">There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (root.left.left == <span class="keyword">null</span> &amp;&amp; root.left.right == <span class="keyword">null</span>) res += root.left.val;</span><br><span class="line">            <span class="keyword">else</span> res += sumOfLeftLeaves(root.left);</span><br><span class="line">        &#125;</span><br><span class="line">        res += sumOfLeftLeaves(root.right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode394-decodeString</title>
    <url>/2020/03/01/Leetcode394-decodeString/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an encoded string, return its decoded string.</p>
<p>The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.</p>
<p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p>
<p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won’t be input like 3a or 2[4].</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; &quot;3[a]2[bc]&quot;, return &quot;aaabcbc&quot;.</span><br><span class="line">s &#x3D; &quot;3[a2[c]]&quot;, return &quot;accaccacc&quot;.</span><br><span class="line">s &#x3D; &quot;2[abc]3[cd]ef&quot;, return &quot;abcabccdcdcdef&quot;.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: Stack</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Used Stack. </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> s;</span><br><span class="line">        </span><br><span class="line">        String res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Stack&lt;Integer&gt; count = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;String&gt; resSt = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(idx &lt; s.length())&#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(s.charAt(idx)))&#123;</span><br><span class="line">                <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(Character.isDigit(s.charAt(idx)))&#123;</span><br><span class="line">                    c = c * <span class="number">10</span> + s.charAt(idx) - <span class="number">48</span>;</span><br><span class="line">                    idx++;</span><br><span class="line">                &#125;</span><br><span class="line">                count.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(idx) == <span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                resSt.push(res);</span><br><span class="line">                res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                idx++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(idx) == <span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">                StringBuilder temp = <span class="keyword">new</span> StringBuilder(resSt.pop());</span><br><span class="line">                <span class="keyword">int</span> times = count.pop();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; times; i++)</span><br><span class="line">                    temp.append(res);</span><br><span class="line">                res = temp.toString();</span><br><span class="line">                idx++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> res += s.charAt(idx++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 2: Recursion with queue</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//     Used recursion with Queue</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decodeString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> s;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;Character&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: s.toCharArray())&#123;</span><br><span class="line">            q.offer(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">helper</span><span class="params">(Queue&lt;Character&gt; queue)</span></span>&#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">char</span> ch = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(ch))&#123;</span><br><span class="line">                num = num * <span class="number">10</span> + ch - <span class="number">48</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                String temp = helper(queue);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">                    res.append(temp);</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                res.append(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Bloomberg</tag>
        <tag>Recursion</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode409-longestPalindrome</title>
    <url>/2019/10/16/Leetcode409-longestPalindrome/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>
<p>This is case sensitive, for example “Aa” is not considered a palindrome here.</p>
<p><strong>Note:</strong><br>Assume the length of given string will not exceed 1,010.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">&quot;abccccdd&quot;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">7</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">One longest palindrome that can be built is &quot;dccaccd&quot;, whose length is 7.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        HashSet&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(ch))&#123;</span><br><span class="line">                set.remove(ch);</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> set.add(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!set.isEmpty()) <span class="keyword">return</span> <span class="number">2</span>*res + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode398-randomPickIndex</title>
    <url>/2019/10/12/Leetcode398-randomPickIndex/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.</p>
<p><strong>Note:</strong><br>The array size can be very large. Solution that uses too much extra space will not pass the judge.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int[] nums &#x3D; new int[] &#123;1,2,3,3,3&#125;;</span><br><span class="line">Solution solution &#x3D; new Solution(nums);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.</span><br><span class="line">solution.pick(3);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; pick(1) should return 0. Since in the array only nums[0] is equal to 1.</span><br><span class="line">solution.pick(1);</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    HashMap&lt;Integer, List&lt;Integer&gt;&gt; map;</span><br><span class="line">    Random random;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        random = <span class="keyword">new</span> Random();</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(nums[i]))</span><br><span class="line">                map.put(nums[i], <span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">            map.get(nums[i]).add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pick</span><span class="params">(<span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = map.get(target).size();</span><br><span class="line">        <span class="keyword">return</span> map.get(target).get(random.nextInt(size));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Solution obj = new Solution(nums);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.pick(target);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Reservoir Sampling</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode413-arithmeticSlices</title>
    <url>/2020/03/02/Leetcode413-arithmeticSlices/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A sequence of number is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.</p>
<p>For example, these are arithmetic sequence:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1, 3, 5, 7, 9</span><br><span class="line">7, 7, 7, 7</span><br><span class="line">3, -1, -5, -9</span><br></pre></td></tr></table></figure><br>The following sequence is not arithmetic.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1, 1, 2, 5, 7</span><br></pre></td></tr></table></figure><br>A zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 &lt;= P &lt; Q &lt; N.</p>
<p>A slice (P, Q) of array A is called arithmetic if the sequence:<br>A[P], A[p + 1], …, A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 &lt; Q.</p>
<p>The function should return the number of arithmetic slices in the array A.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A &#x3D; [1, 2, 3, 4]</span><br><span class="line"></span><br><span class="line">return: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: Best solution</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; A.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] - A[i - <span class="number">1</span>] == A[i - <span class="number">1</span>] - A[i - <span class="number">2</span>])&#123;</span><br><span class="line">                cur++;</span><br><span class="line">                sum += cur;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                cur = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 2: Basic DP, O(N) space</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//     Basic DP Solution, O(N) time O(N) space</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (A.length &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; A.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] - A[i - <span class="number">1</span>] == A[i -<span class="number">1</span> ] - A[i - <span class="number">2</span>])</span><br><span class="line">                dp[i] = dp[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> dp[i] = <span class="number">0</span>;</span><br><span class="line">            sum += dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Math</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode403-Frog Jump</title>
    <url>/2019/10/13/Leetcode403-frogJump/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.</p>
<p>Given a list of stones’ positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone. Initially, the frog is on the first stone and assume the first jump must be 1 unit.</p>
<p>If the frog’s last jump was k units, then its next jump must be either k - 1, k, or k + 1 units. Note that the frog can only jump in the forward direction.</p>
<p><strong>Note</strong>:</p>
<ul>
<li>The number of stones is ≥ 2 and is &lt; 1,100.</li>
<li>Each stone’s position will be a non-negative integer &lt; 231.</li>
<li>The first stone’s position is always 0.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[0,1,3,5,6,8,12,17]</span><br><span class="line"></span><br><span class="line">There are a total of 8 stones.</span><br><span class="line">The first stone at the 0th unit, second stone at the 1st unit,</span><br><span class="line">third stone at the 3rd unit, and so on...</span><br><span class="line">The last stone at the 17th unit.</span><br><span class="line"></span><br><span class="line">Return true. The frog can jump to the last stone by jumping </span><br><span class="line">1 unit to the 2nd stone, then 2 units to the 3rd stone, then </span><br><span class="line">2 units to the 4th stone, then 3 units to the 6th stone, </span><br><span class="line">4 units to the 7th stone, and 5 units to the 8th stone.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[0,1,2,3,4,8,9,11]</span><br><span class="line"></span><br><span class="line">Return false. There is no way to jump to the last stone as </span><br><span class="line">the gap between the 5th and 6th stone is too large.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canCross</span><span class="params">(<span class="keyword">int</span>[] stones)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, HashSet&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> stone: stones)&#123;</span><br><span class="line">            map.put(stone, <span class="keyword">new</span> HashSet&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        map.get(<span class="number">0</span>).add(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> stone: stones)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> step: map.get(stone))&#123;</span><br><span class="line">                <span class="keyword">int</span> reach = stone + step;</span><br><span class="line">                <span class="keyword">if</span> (reach == stones[stones.length-<span class="number">1</span>]) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(reach))&#123;</span><br><span class="line">                    map.get(reach).add(step);</span><br><span class="line">                    <span class="keyword">if</span> (step &gt; <span class="number">1</span>) map.get(reach).add(step-<span class="number">1</span>);</span><br><span class="line">                    map.get(reach).add(step+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>DP</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode416-partitionEqualSubsetSum</title>
    <url>/2020/02/20/Leetcode416-partitionEqualSubsetSum/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.</p>
<p><strong>Note</strong>:</p>
<ol>
<li>Each of the array element will not exceed 100.</li>
<li>The array size will not exceed 200.</li>
</ol>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1, 5, 11, 5]</span><br><span class="line"></span><br><span class="line">Output: true</span><br><span class="line"></span><br><span class="line">Explanation: The array can be partitioned as [1, 5, 5] and [11].</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1, 2, 3, 5]</span><br><span class="line"></span><br><span class="line">Output: false</span><br><span class="line"></span><br><span class="line">Explanation: The array cannot be partitioned into equal sum subsets.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1:</strong> DFS, but a little cheat, cannot be standard method<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">if</span> (nums[nums.length - <span class="number">1</span>] &gt; (sum / <span class="number">2</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(nums, sum / <span class="number">2</span>, <span class="number">0</span>, visited, nums.length - <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, <span class="keyword">int</span> sum, <span class="keyword">boolean</span>[] visited, <span class="keyword">int</span> start, <span class="keyword">int</span> round)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (round == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (sum == target &amp;&amp; helper(nums, target, <span class="number">0</span>, visited, nums.length - <span class="number">1</span>, round-<span class="number">1</span>)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i] &amp;&amp; sum + nums[i] &lt;= target)&#123;</span><br><span class="line">                visited[i] = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (helper(nums, target, sum + nums[i], visited, start - <span class="number">1</span>, round))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                visited[i] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 2:</strong> DP</p>
<p>Actually, this is a 0/1 knapsack problem, for each number, we can pick it or not. Let us assume dp[i][j] means whether the specific sum j can be gotten from the first i numbers. If we can pick such a series of numbers from 0-i whose sum is j, dp[i][j] is true, otherwise it is false.</p>
<p>Base case: dp[0][0] is true; (zero number consists of sum 0 is true)</p>
<p>Transition function: For each number, if we don’t pick it, dp[i][j] = dp[i-1][j], which means if the first i-1 elements has made it to j, dp[i][j] would also make it to j (we can just ignore nums[i]). If we pick nums[i]. dp[i][j] = dp[i-1][j-nums[i]], which represents that j is composed of the current value nums[i] and the remaining composed of other previous numbers. Thus, the transition function is dp[i][j] = dp[i-1][j] || dp[i-1][j-nums[i]]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums) sum += num;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        sum /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length + <span class="number">1</span>][sum + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length + <span class="number">1</span>; i++) dp[i][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sum + <span class="number">1</span>; i++) dp[<span class="number">0</span>][i] = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length + <span class="number">1</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; sum + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                    dp[i][j] = dp[i][j] || dp[i-<span class="number">1</span>][j-nums[i-<span class="number">1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.length][sum];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 3</strong>: DP, space optimized<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums) sum += num;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        sum /= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[sum + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = sum; j &gt;= num; j--)&#123;</span><br><span class="line">                dp[j] = dp[j] || dp[j-num];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[sum];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode410-splitArrayLargestSum</title>
    <url>/2019/10/29/Leetcode410-splitArrayLargestSum/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.</p>
<p><strong>Note:</strong><br>If n is the length of array, assume the following constraints are satisfied:</p>
<ul>
<li>1 ≤ n ≤ 1000</li>
<li>1 ≤ m ≤ min(50, n)</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">nums &#x3D; [7,2,5,10,8]</span><br><span class="line">m &#x3D; 2</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">18</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">There are four ways to split nums into two subarrays.</span><br><span class="line">The best way is to split it into [7,2,5] and [10,8],</span><br><span class="line">where the largest sum among the two subarrays is only 18.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>Given a result, it is easy to test whether it is valid or not.</li>
<li>The max of the result is the sum of the input nums.</li>
<li>The min of the result is the max num of the input nums.<br>Given the 3 conditions above we can do a binary search. (need to deal with overflow)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">splitArray</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">            max = Math.max(max, num);</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> low = max;</span><br><span class="line">        <span class="keyword">long</span> high = sum;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">            <span class="keyword">long</span> mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (valid(nums, m, mid))&#123;</span><br><span class="line">                high = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)high;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> m, <span class="keyword">long</span> max)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">            cur += num;</span><br><span class="line">            <span class="keyword">if</span> (cur &gt; max)&#123;</span><br><span class="line">                cur = num;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span> (count &gt; m) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Binary Search</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode422-validWordSquare</title>
    <url>/2020/03/02/Leetcode422-validWordSquare/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a sequence of words, check whether it forms a valid word square.</p>
<p>A sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 ≤ k &lt; max(numRows, numColumns).</p>
<p><strong>Note:</strong></p>
<ul>
<li>The number of words given is at least 1 and does not exceed 500.</li>
<li>Word length will be at least 1 and does not exceed 500.</li>
<li>Each word contains only lowercase English alphabet a-z.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  &quot;abcd&quot;,</span><br><span class="line">  &quot;bnrt&quot;,</span><br><span class="line">  &quot;crmy&quot;,</span><br><span class="line">  &quot;dtye&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The first row and first column both read &quot;abcd&quot;.</span><br><span class="line">The second row and second column both read &quot;bnrt&quot;.</span><br><span class="line">The third row and third column both read &quot;crmy&quot;.</span><br><span class="line">The fourth row and fourth column both read &quot;dtye&quot;.</span><br><span class="line"></span><br><span class="line">Therefore, it is a valid word square.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  &quot;abcd&quot;,</span><br><span class="line">  &quot;bnrt&quot;,</span><br><span class="line">  &quot;crm&quot;,</span><br><span class="line">  &quot;dt&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">true</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The first row and first column both read &quot;abcd&quot;.</span><br><span class="line">The second row and second column both read &quot;bnrt&quot;.</span><br><span class="line">The third row and third column both read &quot;crm&quot;.</span><br><span class="line">The fourth row and fourth column both read &quot;dt&quot;.</span><br><span class="line"></span><br><span class="line">Therefore, it is a valid word square.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  &quot;ball&quot;,</span><br><span class="line">  &quot;area&quot;,</span><br><span class="line">  &quot;read&quot;,</span><br><span class="line">  &quot;lady&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The third row reads &quot;read&quot; while the third column reads &quot;lead&quot;.</span><br><span class="line"></span><br><span class="line">Therefore, it is **NOT** a valid word square.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validWordSquare</span><span class="params">(List&lt;String&gt; words)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (words.size() == <span class="number">0</span> || words == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> n = words.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            String tmp = words.get(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tmp.length(); j++) &#123;</span><br><span class="line">                <span class="comment">// too long</span></span><br><span class="line">                <span class="keyword">if</span> (j &gt;= n)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">// too short</span></span><br><span class="line">                <span class="keyword">if</span> (words.get(j).length() &lt;= i)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">// letter not equal</span></span><br><span class="line">                <span class="keyword">if</span> (tmp.charAt(j) != words.get(j).charAt(i))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode431-encodeNaryTreetoBinaryTree</title>
    <url>/2019/10/22/Leetcode431-encodeNaryTreetoBinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design an algorithm to encode an N-ary tree into a binary tree and decode the binary tree to get the original N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. Similarly, a binary tree is a rooted tree in which each node has no more than 2 children. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that an N-ary tree can be encoded to a binary tree and this binary tree can be decoded to the original N-nary tree structure.</p>
<p>For example, you may encode the following 3-ary tree to a binary tree in this way:</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/12/narytreebinarytreeexample.png" alt=""></p>
<p>Note that the above is just an example which might or might not work. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p>
<p><strong>Note:</strong></p>
<ol>
<li>N is in the range of [1, 1000]</li>
<li>Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Basic idea: next level -&gt; left, same level -&gt; right;<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public List&lt;Node&gt; children;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val,List&lt;Node&gt; _children) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        children = _children;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encodes an n-ary tree to a binary tree.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">encode</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        TreeNode res = <span class="keyword">new</span> TreeNode(root.val);</span><br><span class="line">        <span class="keyword">if</span> (root.children.size() &gt; <span class="number">0</span>)</span><br><span class="line">            res.left = encode(root.children.get(<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">        TreeNode cur = res.left;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; root.children.size(); i++)&#123;</span><br><span class="line">            cur.right = encode(root.children.get(i));</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your binary tree to an n-ary tree.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">decode</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        Node res  = <span class="keyword">new</span> Node(root.val, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        TreeNode cur = root.left;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            res.children.add(decode(cur));</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec codec = new Codec();</span></span><br><span class="line"><span class="comment">// codec.decode(codec.encode(root));</span></span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode437-pathSumIII</title>
    <url>/2020/03/28/Leetcode437-pathSumIII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a binary tree in which each node contains an integer value.</p>
<p>Find the number of paths that sum to a given value.</p>
<p>The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).</p>
<p>The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root &#x3D; [10,5,-3,3,2,null,11,3,-2,null,1], sum &#x3D; 8</span><br><span class="line"></span><br><span class="line">      10</span><br><span class="line">     &#x2F;  \</span><br><span class="line">    5   -3</span><br><span class="line">   &#x2F; \    \</span><br><span class="line">  3   2   11</span><br><span class="line"> &#x2F; \   \</span><br><span class="line">3  -2   1</span><br><span class="line"></span><br><span class="line">Return 3. The paths that sum to 8 are:</span><br><span class="line"></span><br><span class="line">1.  5 -&gt; 3</span><br><span class="line">2.  5 -&gt; 2 -&gt; 1</span><br><span class="line">3. -3 -&gt; 11</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; presum = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        presum.put(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        helper(presum, root, <span class="number">0</span>, sum);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(HashMap&lt;Integer, Integer&gt; presum, TreeNode node, <span class="keyword">int</span> cur, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        cur = cur + node.val;</span><br><span class="line">        <span class="keyword">if</span> (presum.getOrDefault(cur - target, <span class="number">0</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            res += presum.get(cur - target);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        presum.put(cur, presum.getOrDefault(cur, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        helper(presum, node.left, cur, target);</span><br><span class="line">        helper(presum, node.right, cur, target);</span><br><span class="line">        presum.put(cur, presum.get(cur) - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode417-Pacific Atlantic Water Flow</title>
    <url>/2020/03/02/Leetcode417-pacificAtlanticWaterFlow/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an m x n matrix of non-negative integers representing the height of each unit cell in a continent, the “Pacific ocean” touches the left and top edges of the matrix and the “Atlantic ocean” touches the right and bottom edges.</p>
<p>Water can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.</p>
<p>Find the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.</p>
<p><strong>Note:</strong></p>
<ol>
<li>The order of returned grid coordinates does not matter.</li>
<li>Both m and n are less than 150.</li>
</ol>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given the following 5x5 matrix:</span><br><span class="line"></span><br><span class="line">  Pacific ~   ~   ~   ~   ~ </span><br><span class="line">       ~  1   2   2   3  (5) *</span><br><span class="line">       ~  3   2   3  (4) (4) *</span><br><span class="line">       ~  2   4  (5)  3   1  *</span><br><span class="line">       ~ (6) (7)  1   4   5  *</span><br><span class="line">       ~ (5)  1   1   2   4  *</span><br><span class="line">          *   *   *   *   * Atlantic</span><br><span class="line"></span><br><span class="line">Return:</span><br><span class="line"></span><br><span class="line">[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Used two arrays to record if each cell can reach pacific or atlantic.</span></span><br><span class="line"><span class="comment">// Start from four sides to do DFS.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pacificAtlantic(<span class="keyword">int</span>[][] matrix) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">boolean</span>[][] pacific = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">        <span class="keyword">boolean</span>[][] altantic = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            helper(matrix, pacific, i, <span class="number">0</span>);</span><br><span class="line">            helper(matrix, altantic, i, n - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            helper(matrix, pacific, <span class="number">0</span>, i);</span><br><span class="line">            helper(matrix, altantic, m - <span class="number">1</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (pacific[i][j] &amp;&amp; altantic[i][j])</span><br><span class="line">                    res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(Arrays.asList(i, j)));</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] dir = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;-<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">0</span>, -<span class="number">1</span>&#125;,&#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">boolean</span>[][] reachable, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        reachable[x][y] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] d: dir)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + d[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ny = y + d[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx &gt;=<span class="number">0</span> &amp;&amp; nx &lt; matrix.length &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; matrix[<span class="number">0</span>].length &amp;&amp; !reachable[nx][ny] &amp;&amp; matrix[nx][ny] &gt;= matrix[x][y])</span><br><span class="line">                helper(matrix, reachable, nx, ny);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>BFS</tag>
        <tag>Bloomberg</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode451-sortCharacterByFrequency</title>
    <url>/2020/03/02/Leetcode451-sortCharacterByFrequency/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string, sort it in decreasing order based on the frequency of characters.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">&quot;tree&quot;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">&quot;eert&quot;</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">&#39;e&#39; appears twice while &#39;r&#39; and &#39;t&#39; both appear once.</span><br><span class="line">So &#39;e&#39; must appear before both &#39;r&#39; and &#39;t&#39;. Therefore &quot;eetr&quot; is also a valid answer.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">&quot;cccaaa&quot;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">&quot;cccaaa&quot;</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Both &#39;c&#39; and &#39;a&#39; appear three times, so &quot;aaaccc&quot; is also a valid answer.</span><br><span class="line">Note that &quot;cacaca&quot; is incorrect, as the same characters must be together.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">&quot;Aabb&quot;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">&quot;bbAa&quot;</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">&quot;bbaA&quot; is also a valid answer, but &quot;Aabb&quot; is incorrect.</span><br><span class="line">Note that &#39;A&#39; and &#39;a&#39; are treated as two different characters.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Note: In Problems which need to use Hash Table to store single letters/digits, using int[] map = new int[128] instead of HashMap could speed up lots of time.</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">frequencySort</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt;= <span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line">        PriorityQueue&lt;Character&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Character&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Character a, Character b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> map[b] - map[a];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: s.toCharArray())&#123;</span><br><span class="line">            map[ch]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">128</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (map[i] &gt; <span class="number">0</span>)</span><br><span class="line">                pq.offer((<span class="keyword">char</span>)i);</span><br><span class="line"></span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">char</span> tmp = pq.poll();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map[tmp]; i++) res.append(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Bloomberg</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode430-flattenaMultilevelDoublyLinkedList</title>
    <url>/2019/10/29/Leetcode430-flattenaMultilevelDoublyLinkedList/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.</p>
<p>Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line"> 1---2---3---4---5---6--NULL</span><br><span class="line">         |</span><br><span class="line">         7---8---9---10--NULL</span><br><span class="line">             |</span><br><span class="line">             11--12--NULL</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">1-2-3-7-8-11-12-9-10-4-5-6-NULL</span><br></pre></td></tr></table></figure>
<p>Explanation for the above example:</p>
<p>Given the following multilevel doubly linked list:</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlist.png" alt=""></p>
<p>We should return the following flattened doubly linked list:</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlistflattened.png" alt=""></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Method 1: Iteration<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node prev;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment">    public Node child;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val,Node _prev,Node _next,Node _child) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        prev = _prev;</span></span><br><span class="line"><span class="comment">        next = _next;</span></span><br><span class="line"><span class="comment">        child = _child;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">flatten</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        Node p = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>( p != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p.child == <span class="keyword">null</span>)&#123;</span><br><span class="line">                p = p.next;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                Node childTail = p.child;</span><br><span class="line">                <span class="keyword">while</span>(childTail.next != <span class="keyword">null</span>) childTail = childTail.next;</span><br><span class="line">                childTail.next = p.next;</span><br><span class="line">                <span class="keyword">if</span> (p.next != <span class="keyword">null</span>) p.next.prev = childTail;</span><br><span class="line">                </span><br><span class="line">                p.next = p.child;</span><br><span class="line">                p.child.prev = p;</span><br><span class="line">                p.child = <span class="keyword">null</span>;</span><br><span class="line">                </span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Mathod 2: Recursion<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node prev;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment">    public Node child;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val,Node _prev,Node _next,Node _child) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        prev = _prev;</span></span><br><span class="line"><span class="comment">        next = _next;</span></span><br><span class="line"><span class="comment">        child = _child;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">flatten</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;      </span><br><span class="line">        helper(head);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">helper</span><span class="params">(Node cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="keyword">null</span>) <span class="keyword">return</span> cur;</span><br><span class="line">        <span class="keyword">if</span> (cur.child == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.next == <span class="keyword">null</span>) <span class="keyword">return</span> cur;</span><br><span class="line">            <span class="keyword">return</span> helper(cur.next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Node child = cur.child;</span><br><span class="line">            cur.child = <span class="keyword">null</span>;</span><br><span class="line">            Node next = cur.next;</span><br><span class="line">            Node childTail = helper(child);</span><br><span class="line">            cur.next = child;</span><br><span class="line">            child.prev = cur;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>)&#123;</span><br><span class="line">                childTail.next = next;</span><br><span class="line">                next.prev = childTail;</span><br><span class="line">                <span class="keyword">return</span> helper(next);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> childTail;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Linked List</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode445-addTwoNumbersII</title>
    <url>/2019/10/21/Leetcode445-addTwoNumbersII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>
<p><strong>Follow up:</strong><br>What if you cannot modify the input lists? In other words, reversing the lists is not allowed.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output: 7 -&gt; 8 -&gt; 0 -&gt; 7</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Can use Stack instead of List to store these two numbers<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span> &amp;&amp; l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="keyword">null</span>) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span> (l2 == <span class="keyword">null</span>) <span class="keyword">return</span> l1;</span><br><span class="line">        </span><br><span class="line">        List&lt;Integer&gt; num1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; num2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            num1.add(l1.val);</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            num2.add(l2.val);</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = num1.size()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = num2.size()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = num1.get(i) + num2.get(j) + d;</span><br><span class="line">            d = tmp /<span class="number">10</span>;</span><br><span class="line">            res.add(tmp%<span class="number">10</span>);</span><br><span class="line">            i--;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &gt;= <span class="number">0</span>; k--)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = num1.get(k) + d; </span><br><span class="line">                res.add(tmp%<span class="number">10</span>);</span><br><span class="line">                d = tmp/<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &gt;= <span class="number">0</span>; k--)&#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = num2.get(k) + d; </span><br><span class="line">                res.add(tmp%<span class="number">10</span>);</span><br><span class="line">                d = tmp/<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d &gt; <span class="number">0</span>) res.add(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = res.size()-<span class="number">1</span>; k &gt;= <span class="number">0</span>; k--)&#123;</span><br><span class="line">            cur.next = <span class="keyword">new</span> ListNode(res.get(k));</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode438-findAllAnagramsInAString</title>
    <url>/2019/10/13/Leetcode438-findAllAnagramsInAString/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s.</p>
<p>Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.</p>
<p>The order of output does not matter.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s: &quot;cbaebabacd&quot; p: &quot;abc&quot;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[0, 6]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The substring with start index &#x3D; 0 is &quot;cba&quot;, which is an anagram of &quot;abc&quot;.</span><br><span class="line">The substring with start index &#x3D; 6 is &quot;bac&quot;, which is an anagram of &quot;abc&quot;.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s: &quot;abab&quot; p: &quot;ab&quot;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[0, 1, 2]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The substring with start index &#x3D; 0 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.</span><br><span class="line">The substring with start index &#x3D; 1 is &quot;ba&quot;, which is an anagram of &quot;ab&quot;.</span><br><span class="line">The substring with start index &#x3D; 2 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findAnagrams</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || p == <span class="keyword">null</span> || p.length() == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span>[] hash = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : p.toCharArray()) &#123;</span><br><span class="line">            hash[c]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, count = p.length();</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span>(right &lt; s.length())&#123;</span><br><span class="line">            <span class="keyword">if</span> (hash[s.charAt(right)] &gt;= <span class="number">1</span>) count --;</span><br><span class="line">            hash[s.charAt(right)] --;</span><br><span class="line">            right ++;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) res.add(left);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (right - left == p.length())&#123;</span><br><span class="line">                <span class="keyword">if</span> (hash[s.charAt(left)] &gt;= <span class="number">0</span>) count++;</span><br><span class="line">                hash[s.charAt(left)]++;</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Amazon</tag>
        <tag>Two Pointers</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode465-optimalAccountBalancing</title>
    <url>/2020/04/07/Leetcode465-optimalAccountBalancing/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A group of friends went on holiday and sometimes lent each other money. For example, Alice paid for Bill’s lunch for $10. Then later Chris gave Alice $5 for a taxi ride. We can model each transaction as a tuple (x, y, z) which means person x gave person y $z. Assuming Alice, Bill, and Chris are person 0, 1, and 2 respectively (0, 1, 2 are the person’s ID), the transactions can be represented as [[0, 1, 10], [2, 0, 5]].</p>
<p>Given a list of transactions between a group of people, return the minimum number of transactions required to settle the debt.</p>
<p><strong>Note:</strong></p>
<ol>
<li>A transaction will be given as a tuple (x, y, z). Note that x ≠ y and z &gt; 0.</li>
<li>Person’s IDs may not be linear, e.g. we could have the persons 0, 1, 2 or we could also have the persons 0, 2, 6.</li>
</ol>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[[0,1,10], [2,0,5]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Person #0 gave person #1 $10.</span><br><span class="line">Person #2 gave person #0 $5.</span><br><span class="line"></span><br><span class="line">Two transactions are needed. One way to settle the debt is person #1 pays person #0 and #2 $5 each.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[[0,1,10], [1,0,1], [1,2,5], [2,0,5]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Person #0 gave person #1 $10.</span><br><span class="line">Person #1 gave person #0 $1.</span><br><span class="line">Person #1 gave person #2 $5.</span><br><span class="line">Person #2 gave person #0 $5.</span><br><span class="line"></span><br><span class="line">Therefore, person #1 only need to give person #0 $4, and all debt is settled.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>With all the given transactions, in the end, each person with ID = id will have an overall balance bal[id]. Note that the id value or any person coincidentally with 0 balance is irrelevant to debt settling count, so we can simply use an array debt[] to store all non-zero balances, where</p>
<ul>
<li>debt[i] &gt; 0 means a person needs to pay $ debt[i] to other person(s);</li>
<li>debt[i] &lt; 0 means a person needs to collect $ debt[i] back from other person(s).</li>
</ul>
<p>Starting from first debt debt[0], we look for all other debts debt[i] (i&gt;0) which have opposite sign to debt[0]. Then each such debt[i] can make one transaction debt[i] += debt[0] to clear the person with debt debt[0]. From now on, the person with debt debt[0] is dropped out of the problem and we recursively drop persons one by one until everyone’s debt is cleared meanwhile updating the minimum number of transactions during DFS.</p>
<p>Worest Time: O(n!), factorial of n<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minTransfers</span><span class="params">(<span class="keyword">int</span>[][] transactions)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] trans: transactions)&#123;</span><br><span class="line">            map.put(trans[<span class="number">0</span>], map.getOrDefault(trans[<span class="number">0</span>], <span class="number">0</span>) - trans[<span class="number">2</span>]);</span><br><span class="line">            map.put(trans[<span class="number">1</span>], map.getOrDefault(trans[<span class="number">1</span>], <span class="number">0</span>) + trans[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      sort can improve speed</span></span><br><span class="line">        List&lt;Integer&gt; debt = <span class="keyword">new</span> ArrayList&lt;&gt;(map.values());</span><br><span class="line">        Collections.sort(debt);</span><br><span class="line"><span class="comment">//      -----------------------</span></span><br><span class="line">        <span class="keyword">return</span> helper(<span class="number">0</span>, debt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> cur, List&lt;Integer&gt; debt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(cur &lt; debt.size() &amp;&amp; debt.get(cur) == <span class="number">0</span>)</span><br><span class="line">            cur++;</span><br><span class="line">        <span class="keyword">if</span> (cur == debt.size())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cur + <span class="number">1</span>; i &lt; debt.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (debt.get(cur) * debt.get(i) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                debt.set(i, debt.get(i) + debt.get(cur));</span><br><span class="line">                res = Math.min(res, <span class="number">1</span> + helper(cur + <span class="number">1</span>, debt));</span><br><span class="line">                debt.set(i, debt.get(i) - debt.get(cur));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>DFS</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode443-stringCompression</title>
    <url>/2019/10/22/Leetcode443-stringCompression/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of characters, compress it in-place.</p>
<p>The length after compression must always be smaller than or equal to the original array.</p>
<p>Every element of the array should be a character (not int) of length 1.</p>
<p>After you are done modifying the input array in-place, return the new length of the array.</p>
<p>Follow up:<br>Could you solve it using only O(1) extra space?</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">Return 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">&quot;aa&quot; is replaced by &quot;a2&quot;. &quot;bb&quot; is replaced by &quot;b2&quot;. &quot;ccc&quot; is replaced by &quot;c3&quot;.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[&quot;a&quot;]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">Return 1, and the first 1 characters of the input array should be: [&quot;a&quot;]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Nothing is replaced.</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">Return 4, and the first 4 characters of the input array should be: [&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;].</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Since the character &quot;a&quot; does not repeat, it is not compressed. &quot;bbbbbbbbbbbb&quot; is replaced by &quot;b12&quot;.</span><br><span class="line">Notice each digit has it&#39;s own entry in the array.</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>All characters have an ASCII value in [35, 126].</li>
<li>1 &lt;= len(chars) &lt;= 1000.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compress</span><span class="params">(<span class="keyword">char</span>[] chars)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> resIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; chars.length)&#123;</span><br><span class="line">            <span class="keyword">char</span> cur = chars[index];</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(index &lt; chars.length &amp;&amp; cur == chars[index])&#123;</span><br><span class="line">                index++;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            chars[resIndex] = cur;</span><br><span class="line">            resIndex++;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">char</span> ch: String.valueOf(count).toCharArray())&#123;</span><br><span class="line">                    chars[resIndex] = ch;</span><br><span class="line">                    resIndex++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resIndex;</span><br><span class="line"><span class="comment">//         if (chars.length == 0) return 0;</span></span><br><span class="line"><span class="comment">//         char cur = chars[0];</span></span><br><span class="line"><span class="comment">//         int num = 1;</span></span><br><span class="line"><span class="comment">//         List&lt;Character&gt; res = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//         for (int i = 1; i &lt; chars.length; i++)&#123;</span></span><br><span class="line"><span class="comment">//             if (chars[i] == cur)&#123;</span></span><br><span class="line"><span class="comment">//                 num++;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             else &#123;</span></span><br><span class="line"><span class="comment">//                 res.add(cur);</span></span><br><span class="line"><span class="comment">//                 if (num &gt; 1) &#123;</span></span><br><span class="line"><span class="comment">//                     List&lt;Character&gt; tmp = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//                     while(num &gt; 0)&#123;</span></span><br><span class="line"><span class="comment">//                         char ch = (char)(num % 10 + 48);</span></span><br><span class="line"><span class="comment">//                         tmp.add(ch);</span></span><br><span class="line"><span class="comment">//                         num = num/10;</span></span><br><span class="line"><span class="comment">//                     &#125;</span></span><br><span class="line"><span class="comment">//                     for (int j = tmp.size()-1; j&gt;=0; j--) res.add(tmp.get(j));</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//                 cur = chars[i];</span></span><br><span class="line"><span class="comment">//                 num = 1;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         res.add(cur);</span></span><br><span class="line"><span class="comment">//         if (num &gt; 1)&#123;</span></span><br><span class="line"><span class="comment">//             List&lt;Character&gt; tmp = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//             while(num &gt; 0)&#123;</span></span><br><span class="line"><span class="comment">//                 char ch = (char)(num % 10 + 48);</span></span><br><span class="line"><span class="comment">//                 tmp.add(ch);</span></span><br><span class="line"><span class="comment">//                 num = num/10;    </span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             for (int j = tmp.size() -1; j&gt;=0; j--) res.add(tmp.get(j));</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         for (int i = 0; i &lt; res.size(); i++) chars[i] = res.get(i);</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         return res.size();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Microsoft</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode460-LFUCache</title>
    <url>/2019/10/07/Leetcode460-LFUCache/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design and implement a data structure for Least Frequently Used (LFU) cache. It should support the following operations: get and put.</p>
<p>get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br>put(key, value) - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting a new item. For the purpose of this problem, when there is a tie (i.e., two or more keys that have the same frequency), the least recently used key would be evicted.</p>
<p>Note that the number of times an item is used is the number of calls to the get and put functions for that item since it was inserted. This number is set to zero when the item is removed.</p>
<p><strong>Follow up:</strong><br>Could you do both operations in O(1) time complexity?</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LFUCache cache &#x3D; new LFUCache( 2 &#x2F;* capacity *&#x2F; );</span><br><span class="line"></span><br><span class="line">cache.put(1, 1);</span><br><span class="line">cache.put(2, 2);</span><br><span class="line">cache.get(1);       &#x2F;&#x2F; returns 1</span><br><span class="line">cache.put(3, 3);    &#x2F;&#x2F; evicts key 2</span><br><span class="line">cache.get(2);       &#x2F;&#x2F; returns -1 (not found)</span><br><span class="line">cache.get(3);       &#x2F;&#x2F; returns 3.</span><br><span class="line">cache.put(4, 4);    &#x2F;&#x2F; evicts key 1.</span><br><span class="line">cache.get(1);       &#x2F;&#x2F; returns -1 (not found)</span><br><span class="line">cache.get(3);       &#x2F;&#x2F; returns 3</span><br><span class="line">cache.get(4);       &#x2F;&#x2F; returns 4</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    HashMap&lt;Integer, Integer&gt; vals;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; counts;</span><br><span class="line">    HashMap&lt;Integer, LinkedHashSet&lt;Integer&gt;&gt; time;</span><br><span class="line">    <span class="keyword">int</span> min;</span><br><span class="line">    <span class="keyword">int</span> cap;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LFUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        min = -<span class="number">1</span>;</span><br><span class="line">        cap = capacity;</span><br><span class="line">        vals = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        counts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        time = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        time.put(<span class="number">1</span>, <span class="keyword">new</span> LinkedHashSet&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!vals.containsKey(key)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> count = counts.get(key);</span><br><span class="line">        counts.put(key, count+<span class="number">1</span>);</span><br><span class="line">        time.get(count).remove(key);</span><br><span class="line">        <span class="keyword">if</span> (min == count &amp;&amp; time.get(min).size() == <span class="number">0</span>) min ++;</span><br><span class="line">        <span class="keyword">if</span> (!time.containsKey(count+<span class="number">1</span>)) time.put(count + <span class="number">1</span>, <span class="keyword">new</span> LinkedHashSet&lt;Integer&gt;());</span><br><span class="line">        time.get(count + <span class="number">1</span>).add(key);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> vals.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cap &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (vals.containsKey(key))&#123;</span><br><span class="line">            vals.put(key, value);</span><br><span class="line">            get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (vals.size() &gt;= cap)&#123;</span><br><span class="line">                <span class="keyword">int</span> evict = time.get(min).iterator().next();</span><br><span class="line">                time.get(min).remove(evict);</span><br><span class="line">                vals.remove(evict);</span><br><span class="line">                counts.remove(evict);</span><br><span class="line">            &#125;</span><br><span class="line">            vals.put(key, value);</span><br><span class="line">            min = <span class="number">1</span>;</span><br><span class="line">            counts.put(key, min);</span><br><span class="line">            time.get(<span class="number">1</span>).add(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your LFUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * LFUCache obj = new LFUCache(capacity);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.get(key);</span></span><br><span class="line"><span class="comment"> * obj.put(key,value);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode470-implementRand10UsingRand7</title>
    <url>/2019/10/22/Leetcode470-implementRand10UsingRand7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a function rand7 which generates a uniform random integer in the range 1 to 7, write a function rand10 which generates a uniform random integer in the range 1 to 10.</p>
<p>Do NOT use system’s Math.random().</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 1</span><br><span class="line">Output: [7]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 2</span><br><span class="line">Output: [8,4]</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: [8,1,10]</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>rand7 is predefined.</li>
<li>Each testcase has one argument: n, the number of times that rand10 is called.</li>
</ol>
<p><strong>Follow up:</strong></p>
<ol>
<li>What is the expected value for the number of calls to rand7() function?</li>
<li>Could you minimize the number of calls to rand7()?</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The rand7() API is already defined in the parent class SolBase.</span></span><br><span class="line"><span class="comment"> * public int rand7();</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a random integer in the range 1 to 7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> <span class="keyword">extends</span> <span class="title">SolBase</span> </span>&#123;</span><br><span class="line"><span class="comment">//      rand7() -&gt; rand49() -&gt; rand40() -&gt; rand10()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rand10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">while</span> (result &gt;= <span class="number">40</span>) &#123;result = <span class="number">7</span> * (rand7() - <span class="number">1</span>) + (rand7() - <span class="number">1</span>);&#125;</span><br><span class="line">        <span class="keyword">return</span> result % <span class="number">10</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implement rand11() using rand3():</span></span><br><span class="line"><span class="comment">// Idea: rand3() -&gt; rand27() -&gt; rand22 -&gt; rand11</span></span><br><span class="line"><span class="comment">// public int rand11() &#123;</span></span><br><span class="line"><span class="comment">//     int result = 22;</span></span><br><span class="line"><span class="comment">//     while (result &gt;= 22) &#123;result = 3 * 3 * (rand3() - 1) + 3 * (rand3() - 1) + (rand3() - 1);&#125;</span></span><br><span class="line"><span class="comment">//     return result % 11 + 1;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Random</tag>
        <tag>Rejection Sampling</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode464-canIWin</title>
    <url>/2020/02/22/Leetcode464-canIWin/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>In the “100 game,” two players take turns adding, to a running total, any integer from 1..10. The player who first causes the running total to reach or exceed 100 wins.</p>
<p>What if we change the game so that players cannot re-use integers?</p>
<p>For example, two players might take turns drawing from a common pool of numbers of 1..15 without replacement until they reach a total &gt;= 100.</p>
<p>Given an integer maxChoosableInteger and another integer desiredTotal, determine if the first player to move can force a win, assuming both players play optimally.</p>
<p>You can always assume that maxChoosableInteger will not be larger than 20 and desiredTotal will not be larger than 300.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">maxChoosableInteger &#x3D; 10</span><br><span class="line">desiredTotal &#x3D; 11</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">false</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">No matter which integer the first player choose, the first player will lose.</span><br><span class="line">The first player can choose an integer from 1 up to 10.</span><br><span class="line">If the first player choose 1, the second player can only choose integers from 2 up to 10.</span><br><span class="line">The second player will win by choosing 10 and get a total &#x3D; 11, which is &gt;&#x3D; desiredTotal.</span><br><span class="line">Same with other integers chosen by the first player, the second player will always win.</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canIWin</span><span class="params">(<span class="keyword">int</span> maxChoosableInteger, <span class="keyword">int</span> desiredTotal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (desiredTotal &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 1 + 2 + ... + maxChoosableInteger &lt; desiredTotal means can't reach to desiredTotal</span></span><br><span class="line">        <span class="keyword">if</span> (maxChoosableInteger * (maxChoosableInteger + <span class="number">1</span>) / <span class="number">2</span> &lt; desiredTotal) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span> &lt;&lt; maxChoosableInteger];</span><br><span class="line">        <span class="keyword">return</span> dfs(dp, <span class="number">0</span>, maxChoosableInteger, desiredTotal);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] dp, <span class="keyword">int</span> chs, <span class="keyword">int</span> max, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// targer &lt;= 0 means the prior one wins</span></span><br><span class="line">        <span class="keyword">if</span> (target &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (dp[chs] != <span class="number">0</span>) <span class="keyword">return</span> dp[chs] == <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">boolean</span> win = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">            <span class="comment">// i + 1 not use</span></span><br><span class="line">            <span class="keyword">if</span> ((chs &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// thers is a trick: short circuit, when win is true, the next dfs won't be invoke</span></span><br><span class="line">                win = win || !dfs(dp, chs ^ (<span class="number">1</span> &lt;&lt; i), max, target - i - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[chs] = win ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> win;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode472-concatenatedWords</title>
    <url>/2019/10/04/Leetcode472-concatenatedWords/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a list of words (without duplicates), please write a program that returns all concatenated words in the given list of words.<br>A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;cat&quot;,&quot;cats&quot;,&quot;catsdogcats&quot;,&quot;dog&quot;,&quot;dogcatsdog&quot;,&quot;hippopotamuses&quot;,&quot;rat&quot;,&quot;ratcatdogcat&quot;]</span><br><span class="line"></span><br><span class="line">Output: [&quot;catsdogcats&quot;,&quot;dogcatsdog&quot;,&quot;ratcatdogcat&quot;]</span><br><span class="line"></span><br><span class="line">Explanation: &quot;catsdogcats&quot; can be concatenated by &quot;cats&quot;, &quot;dog&quot; and &quot;cats&quot;; </span><br><span class="line"> &quot;dogcatsdog&quot; can be concatenated by &quot;dog&quot;, &quot;cats&quot; and &quot;dog&quot;; </span><br><span class="line">&quot;ratcatdogcat&quot; can be concatenated by &quot;rat&quot;, &quot;cat&quot;, &quot;dog&quot; and &quot;cat&quot;.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>The number of elements of the given array will not exceed 10,000</li>
<li>The length sum of elements in the given array will not exceed 600,000.</li>
<li>All the input string will only include lower case letters.</li>
<li>The returned elements order does not matter.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findAllConcatenatedWordsInADict</span><span class="params">(String[] words)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (words == <span class="keyword">null</span> || words.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="keyword">for</span> (String word: words) set.add(word);</span><br><span class="line">        <span class="keyword">for</span> (String word: words)&#123;</span><br><span class="line">            <span class="keyword">if</span> (dfs(set, word)) res.add(word);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(Set&lt;String&gt; set, String cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cur.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(cur.substring(<span class="number">0</span>, i)))&#123;</span><br><span class="line">                String rest = cur.substring(i);</span><br><span class="line">                <span class="keyword">if</span> (set.contains(rest) || dfs(set, rest)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time Complex: $O(N*K^2)$</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Trie Tree</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findAllConcatenatedWordsInADict</span><span class="params">(String[] words)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">if</span> (words == <span class="keyword">null</span> || words.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        TrieNode root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123; <span class="comment">// construct Trie tree</span></span><br><span class="line">            <span class="keyword">if</span> (word.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            addWord(word, root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123; <span class="comment">// test word is a concatenated word or not</span></span><br><span class="line">            <span class="keyword">if</span> (word.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (testWord(word.toCharArray(), <span class="number">0</span>, root, <span class="number">0</span>)) &#123;</span><br><span class="line">                res.add(word);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testWord</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> index, TrieNode root, <span class="keyword">int</span> count)</span> </span>&#123; <span class="comment">// count means how many words during the search path</span></span><br><span class="line">        TrieNode cur = root;</span><br><span class="line">        <span class="keyword">int</span> n = chars.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.sons[chars[i] - <span class="string">'a'</span>] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cur.sons[chars[i] - <span class="string">'a'</span>].isEnd) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == n - <span class="number">1</span>) &#123; <span class="comment">// no next word, so test count to get result.</span></span><br><span class="line">                    <span class="keyword">return</span> count &gt;= <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (testWord(chars, i + <span class="number">1</span>, root, count + <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.sons[chars[i] - <span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWord</span><span class="params">(String str, TrieNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        TrieNode cur = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : chars) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.sons[c - <span class="string">'a'</span>] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                cur.sons[c - <span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.sons[c - <span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        cur.isEnd = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">    TrieNode[] sons;</span><br><span class="line">    <span class="keyword">boolean</span> isEnd;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sons = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time Complex: $O(N*K)$</p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Amazon</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode503-nextGreaterElementII</title>
    <url>/2019/10/14/Leetcode503-nextGreaterElementII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn’t exist, output -1 for this number.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,1]</span><br><span class="line">Output: [2,-1,2]</span><br><span class="line">Explanation: The first 1&#39;s next greater number is 2; </span><br><span class="line">The number 2 can&#39;t find next greater number; </span><br><span class="line">The second 1&#39;s next greater number needs to search circularly, which is also 2.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> The length of given array won’t exceed 10000.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] nextGreaterElements(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        </span><br><span class="line">        Stack&lt;Integer&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) st.push(i);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            res[i] = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(!st.isEmpty() &amp;&amp; nums[i] &gt;= nums[st.peek()]) st.pop();</span><br><span class="line">            <span class="keyword">if</span> (!st.isEmpty()) res[i] = nums[st.peek()];</span><br><span class="line">            st.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode473-matchsticksToSquare</title>
    <url>/2020/02/12/Leetcode473-matchsticksToSquare/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Remember the story of Little Match Girl? By now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.</p>
<p>Your input will be several matchsticks the girl has, represented with their stick length. Your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,1,2,2,2]</span><br><span class="line">Output: true</span><br><span class="line"></span><br><span class="line">Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,3,3,3,4]</span><br><span class="line">Output: false</span><br><span class="line"></span><br><span class="line">Explanation: You cannot find a way to form a square with all the matchsticks.</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ol>
<li>The length sum of the given matchsticks is in the range of 0 to 10^9.</li>
<li>The length of the given matchstick array will not exceed 15.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1:</strong> DFS, but a little bit slow<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">makesquare</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">4</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> stick: nums)&#123;</span><br><span class="line">            sum += stick;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">4</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(nums, sum / <span class="number">4</span>, <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>], nums.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, <span class="keyword">int</span>[] sticks, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (sticks[<span class="number">0</span>] == target &amp;&amp; sticks[<span class="number">1</span>] == target &amp;&amp; sticks[<span class="number">2</span>] == target)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (sticks[i] + nums[index] &gt; target) <span class="keyword">continue</span>;</span><br><span class="line">            sticks[i] += nums[index];</span><br><span class="line">            <span class="keyword">if</span> (helper(nums, target, sticks, index - <span class="number">1</span>)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            sticks[i] -= nums[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 2:</strong> Still DFS, but faster<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></span><br><span class="line">    public boolean makesquare(int[] nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">4</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> stick: nums)&#123;</span><br><span class="line">            sum += stick;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">4</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">        <span class="keyword">return</span> helper(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, sum / <span class="number">4</span>, visited, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> sum, <span class="keyword">int</span> start, <span class="keyword">int</span> target, <span class="keyword">boolean</span>[] visited, <span class="keyword">int</span> round)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (round == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (sum == target &amp;&amp; helper(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>, target, visited, round - <span class="number">1</span>)) </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i] &amp;&amp; sum + nums[i] &lt;= target)&#123;</span><br><span class="line">                visited[i] = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (helper(nums, sum + nums[i], i -<span class="number">1</span>, target, visited, round))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                visited[i] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode474-onesAndZeroes</title>
    <url>/2020/02/22/Leetcode474-onesAndZeroes/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Share<br>In the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue.</p>
<p>For now, suppose you are a dominator of m 0s and n 1s respectively. On the other hand, there is an array with strings consisting of only 0s and 1s.</p>
<p>Now your task is to find the maximum number of strings that you can form with given m 0s and n 1s. Each 0 and 1 can be used at most once.</p>
<p>Note:</p>
<ol>
<li>The given numbers of 0s and 1s will both not exceed 100</li>
<li>The size of given string array won’t exceed 600.</li>
</ol>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: Array &#x3D; &#123;&quot;10&quot;, &quot;0001&quot;, &quot;111001&quot;, &quot;1&quot;, &quot;0&quot;&#125;, m &#x3D; 5, n &#x3D; 3</span><br><span class="line">Output: 4</span><br><span class="line"></span><br><span class="line">Explanation: This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are “10,”0001”,”1”,”0”</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: Array &#x3D; &#123;&quot;10&quot;, &quot;0&quot;, &quot;1&quot;&#125;, m &#x3D; 1, n &#x3D; 1</span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation: You could form &quot;10&quot;, but then you&#39;d have nothing left. Better form &quot;0&quot; and &quot;1&quot;.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>0-1 Backpack, dp[k][i][j] ——-&gt; dp[i][j]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxForm</span><span class="params">(String[] strs, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (String str: strs)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] count = helper(str);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &gt;= count[<span class="number">0</span>]; i--)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &gt;= count[<span class="number">1</span>]; j--)&#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j], dp[i - count[<span class="number">0</span>]][j - count[<span class="number">1</span>]] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] helper(String str)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: str.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">'0'</span>) res[<span class="number">0</span>]++;</span><br><span class="line">            <span class="keyword">else</span> res[<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode507-perfectNumber</title>
    <url>/2019/10/13/Leetcode507-perfectNumber/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We define the Perfect Number is a positive integer that is equal to the sum of all its positive divisors except itself.</p>
<p>Now, given an integer n, write a function that returns true when it is a perfect number and false when it is not.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 28</span><br><span class="line">Output: True</span><br><span class="line">Explanation: 28 &#x3D; 1 + 2 + 4 + 7 + 14</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> The input number n will not exceed 100,000,000. (1e8)</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPerfectNumber</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;= Math.sqrt(num);i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (num % i == <span class="number">0</span>)</span><br><span class="line">                sum += i + num/i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (sum == num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode505-theMazeII</title>
    <url>/2019/10/08/Leetcode505-theMazeII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is a ball in a maze with empty spaces and walls. The ball can go through empty spaces by rolling up, down, left or right, but it won’t stop rolling until hitting a wall. When the ball stops, it could choose the next direction.</p>
<p>Given the ball’s start position, the destination and the maze, find the shortest distance for the ball to stop at the destination. The distance is defined by the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included). If the ball cannot stop at the destination, return -1.</p>
<p>The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The start and destination coordinates are represented by row and column indexes.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input 1: a maze represented by a 2D array</span><br><span class="line"></span><br><span class="line">0 0 1 0 0</span><br><span class="line">0 0 0 0 0</span><br><span class="line">0 0 0 1 0</span><br><span class="line">1 1 0 1 1</span><br><span class="line">0 0 0 0 0</span><br><span class="line"></span><br><span class="line">Input 2: start coordinate (rowStart, colStart) &#x3D; (0, 4)</span><br><span class="line">Input 3: destination coordinate (rowDest, colDest) &#x3D; (4, 4)</span><br><span class="line"></span><br><span class="line">Output: 12</span><br><span class="line"></span><br><span class="line">Explanation: One shortest way is : left -&gt; down -&gt; left -&gt; down -&gt; right -&gt; down -&gt; right.</span><br><span class="line">             The total distance is 1 + 1 + 3 + 1 + 2 + 2 + 2 &#x3D; 12.</span><br></pre></td></tr></table></figure><br><img src="https://assets.leetcode.com/uploads/2018/10/12/maze_1_example_1.png" alt=""></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input 1: a maze represented by a 2D array</span><br><span class="line"></span><br><span class="line">0 0 1 0 0</span><br><span class="line">0 0 0 0 0</span><br><span class="line">0 0 0 1 0</span><br><span class="line">1 1 0 1 1</span><br><span class="line">0 0 0 0 0</span><br><span class="line"></span><br><span class="line">Input 2: start coordinate (rowStart, colStart) &#x3D; (0, 4)</span><br><span class="line">Input 3: destination coordinate (rowDest, colDest) &#x3D; (3, 2)</span><br><span class="line"></span><br><span class="line">Output: -1</span><br><span class="line"></span><br><span class="line">Explanation: There is no way for the ball to stop at the destination.</span><br></pre></td></tr></table></figure><br><img src="https://assets.leetcode.com/uploads/2018/10/13/maze_1_example_2.png" alt=""></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] dir = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;-<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,&#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">shortestDistance</span><span class="params">(<span class="keyword">int</span>[][] maze, <span class="keyword">int</span>[] start, <span class="keyword">int</span>[] destination)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (maze == <span class="keyword">null</span> || maze.length == <span class="number">0</span> || maze[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (start == <span class="keyword">null</span> || start.length == <span class="number">0</span> || destination == <span class="keyword">null</span> || destination.length == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = maze.length, n = maze[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] dist = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        dist[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">        dfs(start, destination, maze, m, n, dist);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dist[destination[<span class="number">0</span>]][destination[<span class="number">1</span>]]-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] s, <span class="keyword">int</span>[] t, <span class="keyword">int</span>[][] maze, <span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span>[][] dist)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">1</span>] == t[<span class="number">1</span>] &amp;&amp; s[<span class="number">0</span>] == t[<span class="number">0</span>]) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;s[<span class="number">0</span>], s[<span class="number">1</span>]&#125;;</span><br><span class="line">            <span class="keyword">int</span> len = dist[s[<span class="number">0</span>]][s[<span class="number">1</span>]];</span><br><span class="line">            <span class="keyword">while</span>(next[<span class="number">0</span>] &gt;= <span class="number">0</span> &amp;&amp; next[<span class="number">0</span>] &lt; m &amp;&amp; next[<span class="number">1</span>] &gt;= <span class="number">0</span> &amp;&amp; next[<span class="number">1</span>] &lt; n &amp;&amp; maze[next[<span class="number">0</span>]][next[<span class="number">1</span>]] == <span class="number">0</span>)&#123;</span><br><span class="line">                next[<span class="number">0</span>] = next[<span class="number">0</span>] + dir[i][<span class="number">0</span>];</span><br><span class="line">                next[<span class="number">1</span>] = next[<span class="number">1</span>] + dir[i][<span class="number">1</span>];</span><br><span class="line">                len++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[<span class="number">0</span>] = next[<span class="number">0</span>] - dir[i][<span class="number">0</span>];</span><br><span class="line">            next[<span class="number">1</span>] = next[<span class="number">1</span>] - dir[i][<span class="number">1</span>];</span><br><span class="line">            len--;</span><br><span class="line">            <span class="keyword">if</span> (dist[next[<span class="number">0</span>]][next[<span class="number">1</span>]] &gt; <span class="number">0</span> &amp;&amp; dist[next[<span class="number">0</span>]][next[<span class="number">1</span>]] &lt;= len) <span class="keyword">continue</span>;</span><br><span class="line">            dist[next[<span class="number">0</span>]][next[<span class="number">1</span>]] = len;</span><br><span class="line">            dfs(next, t, maze, m, n, dist);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode453-minimumMovestoEqualArrayElements</title>
    <url>/2019/10/14/Leetcode453-minimumMovestoEqualArrayElements/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty integer array of size n, find the minimum number of moves required to make all array elements equal, where a move is incrementing n - 1 elements by 1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">[1,2,3]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Only three moves are needed (remember each move increments two elements):</span><br><span class="line"></span><br><span class="line">[1,2,3]  &#x3D;&gt;  [2,3,3]  &#x3D;&gt;  [3,4,3]  &#x3D;&gt;  [4,4,4]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minMoves</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;        </span><br><span class="line"><span class="comment">//         sum + m(n-1) = x * n</span></span><br><span class="line"><span class="comment">//         x = minVal + m</span></span><br><span class="line"><span class="comment">//         =&gt; m = sum - n * minVal</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> minVal = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">            sum += num;</span><br><span class="line">            minVal = Math.min(minVal, num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum - nums.length * minVal;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode516-longestPalindromicSubsequence</title>
    <url>/2020/02/22/Leetcode516-longestPalindromicSubsequence/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string s, find the longest palindromic subsequence’s length in s. You may assume that the maximum length of s is 1000.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong></p>
<p>Input:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;bbbab&quot;</span><br></pre></td></tr></table></figure></p>
<p>Output:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><br>One possible longest palindromic subsequence is “bbbb”.</p>
<p><strong>Example 2:</strong></p>
<p>Input:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;cbbd&quot;</span><br></pre></td></tr></table></figure><br>Output:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure></p>
<p>One possible longest palindromic subsequence is “bb”.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()][s.length()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)</span><br><span class="line">            dp[i][i] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; s.length(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i) == s.charAt(j))</span><br><span class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span> dp[i][j] = Math.max(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][s.length() - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode525-contiguousArray</title>
    <url>/2020/03/16/Leetcode525-contiguousArray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [0,1]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [0,1,0]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong> The length of the given binary array will not exceed 50,000.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//The idea is to change 0 in the original array to -1. Thus, if we find SUM[i, j] == 0 then we know there are even number of -1 and 1 between index i and j. Also put the sum to index mapping to a HashMap to make search faster</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMaxLength</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        map.put(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            sum += nums[i] == <span class="number">0</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(sum))&#123;</span><br><span class="line">                res = Math.max(res, i - map.get(sum));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> map.put(sum, i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode532-k-diffPairsInAnArray</title>
    <url>/2019/09/26/Leetcode532-k-diffPairsInAnArray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers and an integer k, you need to find the number of unique k-diff pairs in the array. Here a k-diff pair is defined as an integer pair (i, j), where i and j are both numbers in the array and their absolute difference is k.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3, 1, 4, 1, 5], k &#x3D; 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).</span><br><span class="line">Although we have two 1s in the input, we should only return the number of unique pairs.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:[1, 2, 3, 4, 5], k &#x3D; 1</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1, 3, 1, 5, 4], k &#x3D; 0</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: There is one 0-diff pair in the array, (1, 1).</span><br></pre></td></tr></table></figure><br><strong>Note:</strong><br>The pairs (i, j) and (j, i) count as the same pair.<br>The length of the array won’t exceed 10,000.<br>All the integers in the given input belong to the range: [-1e7, 1e7].</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPairs</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span> || k &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> it: nums)&#123;</span><br><span class="line">            map.put(it, map.getOrDefault(it, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> it: map.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (map.get(it) &gt; <span class="number">1</span>) res++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(it + k)) res ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode543-diameterOfBinaryTree</title>
    <url>/2020/03/02/Leetcode543-diameterOfBinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Given a binary tree<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   3</span><br><span class="line"> &#x2F; \     </span><br><span class="line">4   5    </span><br></pre></td></tr></table></figure><br>Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].</p>
<p><strong>Note:</strong> The length of path between two nodes is represented by the number of edges between them.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        helper(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = helper(root.left) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = helper(root.right) + <span class="number">1</span>;</span><br><span class="line">        res = Math.max(res, left + right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(left, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode528-randomPickwithWeight</title>
    <url>/2019/11/04/Leetcode528-randomPickwithWeight/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array w of positive integers, where w[i] describes the weight of index i, write a function pickIndex which randomly picks an index in proportion to its weight.</p>
<p>Note:</p>
<ol>
<li>1 &lt;= w.length &lt;= 10000</li>
<li>1 &lt;= w[i] &lt;= 10^5</li>
<li>pickIndex will be called at most 10000 times.</li>
</ol>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">[&quot;Solution&quot;,&quot;pickIndex&quot;]</span><br><span class="line">[[[1]],[]]</span><br><span class="line">Output: [null,0]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">[&quot;Solution&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;]</span><br><span class="line">[[[1,3]],[],[],[],[],[]]</span><br><span class="line">Output: [null,0,1,1,1,0]</span><br></pre></td></tr></table></figure><br><strong>Explanation of Input Syntax:</strong></p>
<p>The input is two lists: the subroutines called and their arguments. Solution’s constructor has one argument, the array w. pickIndex has no arguments. Arguments are always wrapped with a list, even if there aren’t any.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[] wsum;</span><br><span class="line">    Random random;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Solution</span><span class="params">(<span class="keyword">int</span>[] w)</span> </span>&#123;</span><br><span class="line">        random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; w.length; i++)&#123;</span><br><span class="line">            w[i] += w[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        wsum = w;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pickIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = random.nextInt(wsum[wsum.length - <span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = wsum.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (wsum[mid] == t) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (wsum[mid] &lt; t) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Solution obj = new Solution(w);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.pickIndex();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p><strong>Explain:</strong><br>Use accumulated freq array to get idx.<br>w[] = {2,5,3,4} =&gt; wsum[] = {2,7,10,14}<br>then get random val random.nextInt(14)+1, idx is in range [1,14]<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">idx in [1,2] return 0</span><br><span class="line">idx in [3,7] return 1</span><br><span class="line">idx in [8,10] return 2</span><br><span class="line">idx in [11,14] return 3</span><br></pre></td></tr></table></figure><br>then become LeetCode 35. Search Insert Position</p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Binary Search</tag>
        <tag>Random</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode547-friendCircles</title>
    <url>/2019/09/26/Leetcode547-friendCircles/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are N students in a class. Some of them are friends, while some are not. Their friendship is transitive in nature. For example, if A is a direct friend of B, and B is a direct friend of C, then A is an indirect friend of C. And we defined a friend circle is a group of students who are direct or indirect friends.</p>
<p>Given a N*N matrix M representing the friend relationship between students in the class. If M[i][j] = 1, then the ith and jth students are direct friends with each other, otherwise not. And you have to output the total number of friend circles among all the students.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">[[1,1,0],</span><br><span class="line"> [1,1,0],</span><br><span class="line"> [0,0,1]]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation:The 0th and 1st students are direct friends, so they are in a friend circle. </span><br><span class="line">The 2nd student himself is in a friend circle. So return 2.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">[[1,1,0],</span><br><span class="line"> [1,1,1],</span><br><span class="line"> [0,1,1]]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation:The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends, </span><br><span class="line">so the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.</span><br></pre></td></tr></table></figure><br><strong>Note:</strong><br>N is in range [1,200].<br>M[i][i] = 1 for all students.<br>If M[i][j] = 1, then M[j][i] = 1.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCircleNum</span><span class="params">(<span class="keyword">int</span>[][] M)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (M == <span class="keyword">null</span> || M.length == <span class="number">0</span> || M[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] friends = <span class="keyword">new</span> <span class="keyword">int</span>[M.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.length; i++) friends[i] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.length; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M.length; j++)</span><br><span class="line">                <span class="keyword">if</span> (i != j &amp;&amp; M[i][j] == <span class="number">1</span>) union(friends, i, j);</span><br><span class="line">            </span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M.length; i++)</span><br><span class="line">            set.add(find(friends, i));</span><br><span class="line">        <span class="keyword">return</span> set.size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] friends, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (friends[i] != i)</span><br><span class="line">            friends[i] = find(friends, friends[i]);</span><br><span class="line">        <span class="keyword">return</span> friends[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span>[] friends, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> si = find(friends, i);</span><br><span class="line">        <span class="keyword">int</span> sj = find(friends, j);</span><br><span class="line">        <span class="keyword">if</span> (si != sj) friends[si] = sj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode557-reverseWordsInAStringIII</title>
    <url>/2019/10/21/Leetcode557-reverseWordsInAStringIII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;Let&#39;s take LeetCode contest&quot;</span><br><span class="line">Output: &quot;s&#39;teL ekat edoCteeL tsetnoc&quot;</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> In the string, each word is separated by single space and there will not be any extra space in the string.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &lt; <span class="number">2</span>) <span class="keyword">return</span> s;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] seq = s.toCharArray();</span><br><span class="line">        <span class="keyword">while</span> (id &lt; s.length())&#123;</span><br><span class="line">            <span class="keyword">if</span> (seq[id] == <span class="string">' '</span>)&#123;</span><br><span class="line">                j = id -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">                    <span class="keyword">char</span> tmp = seq[i];</span><br><span class="line">                    seq[i] = seq[j];</span><br><span class="line">                    seq[j] = tmp;</span><br><span class="line">                    i ++;</span><br><span class="line">                    j --;</span><br><span class="line">                &#125;</span><br><span class="line">                i = id + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            id ++;</span><br><span class="line">        &#125;</span><br><span class="line">        j = id -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">char</span> tmp = seq[i];</span><br><span class="line">            seq[i] = seq[j];</span><br><span class="line">            seq[j] = tmp;</span><br><span class="line">            i ++;</span><br><span class="line">            j --;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        String res = <span class="keyword">new</span> String(seq);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Bloomberg</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode545-boundryOfBinaryTree</title>
    <url>/2019/10/04/Leetcode545-boundryOfBinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the values of its boundary in anti-clockwise direction starting from root. Boundary includes left boundary, leaves, and right boundary in order without duplicate nodes.  (The values of the nodes may still be duplicates.)</p>
<p>Left boundary is defined as the path from root to the left-most node. Right boundary is defined as the path from root to the right-most node. If the root doesn’t have left subtree or right subtree, then the root itself is left boundary or right boundary. Note this definition only applies to the input binary tree, and not applies to any subtrees.</p>
<p>The left-most node is defined as a leaf node you could reach when you always firstly travel to the left subtree if exists. If not, travel to the right subtree. Repeat until you reach a leaf node.</p>
<p>The right-most node is also defined by the same way with left and right exchanged.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">  1</span><br><span class="line">   \</span><br><span class="line">    2</span><br><span class="line">   &#x2F; \</span><br><span class="line">  3   4</span><br><span class="line"></span><br><span class="line">Ouput:</span><br><span class="line">[1, 3, 4, 2]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The root doesn&#39;t have left subtree, so the root itself is left boundary.</span><br><span class="line">The leaves are node 3 and 4.</span><br><span class="line">The right boundary are node 1,2,4. Note the anti-clockwise direction means you should output reversed right boundary.</span><br><span class="line">So order them in anti-clockwise without duplicates and we have [1,3,4,2].</span><br></pre></td></tr></table></figure><br><strong>Example 2</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">    ____1_____</span><br><span class="line">   &#x2F;          \</span><br><span class="line">  2            3</span><br><span class="line"> &#x2F; \          &#x2F; </span><br><span class="line">4   5        6   </span><br><span class="line">   &#x2F; \      &#x2F; \</span><br><span class="line">  7   8    9  10  </span><br><span class="line">       </span><br><span class="line">Ouput:</span><br><span class="line">[1,2,4,7,8,9,10,6,3]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The left boundary are node 1,2,4. (4 is the left-most node according to definition)</span><br><span class="line">The leaves are node 4,7,8,9,10.</span><br><span class="line">The right boundary are node 1,3,6,10. (10 is the right-most node).</span><br><span class="line">So order them in anti-clockwise without duplicate nodes we have [1,2,4,7,8,9,10,6,3].</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">boundaryOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        res.add(root.val);</span><br><span class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>) leftBoundry(root.left, res);</span><br><span class="line">        <span class="keyword">if</span> (root.left!= <span class="keyword">null</span> || root.right!=<span class="keyword">null</span>) travel(root, res);</span><br><span class="line">        <span class="keyword">if</span> (root.right != <span class="keyword">null</span>) rightBoundry(root.right, res);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leftBoundry</span><span class="params">(TreeNode node, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        res.add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) leftBoundry(node.left, res);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) leftBoundry(node.right, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rightBoundry</span><span class="params">(TreeNode node, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) rightBoundry(node.right, res);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) rightBoundry(node.left, res);</span><br><span class="line">        res.add(node.val);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">travel</span><span class="params">(TreeNode node, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>) res.add(node.val);</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) travel(node.left, res);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) travel(node.right, res);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode582-killProcess</title>
    <url>/2020/03/02/Leetcode582-killProcess/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given n processes, each process has a unique PID (process id) and its PPID (parent process id).</p>
<p>Each process only has one parent process, but may have one or more children processes. This is just like a tree structure. Only one process has PPID that is 0, which means this process has no parent process. All the PIDs will be distinct positive integers.</p>
<p>We use two list of integers to represent a list of processes, where the first list contains PID for each process and the second list contains the corresponding PPID.</p>
<p>Now given the two lists, and a PID representing a process you want to kill, return a list of PIDs of processes that will be killed in the end. You should assume that when a process is killed, all its children processes will be killed. No order is required for the final answer.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">pid &#x3D;  [1, 3, 10, 5]</span><br><span class="line">ppid &#x3D; [3, 0, 5, 3]</span><br><span class="line">kill &#x3D; 5</span><br><span class="line">Output: [5,10]</span><br><span class="line">Explanation: </span><br><span class="line">           3</span><br><span class="line">         &#x2F;   \</span><br><span class="line">        1     5</span><br><span class="line">             &#x2F;</span><br><span class="line">            10</span><br><span class="line">Kill 5 will also kill 10.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong><br>The given kill id is guaranteed to be one of the given PIDs.<br>n &gt;= 1.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">killProcess</span><span class="params">(List&lt;Integer&gt; pid, List&lt;Integer&gt; ppid, <span class="keyword">int</span> kill)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (pid == <span class="keyword">null</span> || pid.size() == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ppid.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> parent = ppid.get(i);</span><br><span class="line">            <span class="keyword">int</span> child = pid.get(i);</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(parent))&#123;</span><br><span class="line">                map.put(parent, <span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(parent).add(child);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.offer(kill);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = q.poll();</span><br><span class="line">            res.add(cur);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(cur))</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> child: map.get(cur))</span><br><span class="line">                    q.offer(child);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Queue</tag>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode572-subtreeOfAnotherTree</title>
    <url>/2019/09/22/Leetcode572-subtreeOfAnotherTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node’s descendants. The tree s could also be considered as a subtree of itself</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given tree s:</span><br><span class="line"></span><br><span class="line">     3</span><br><span class="line">    &#x2F; \</span><br><span class="line">   4   5</span><br><span class="line">  &#x2F; \</span><br><span class="line"> 1   2</span><br><span class="line">Given tree t:</span><br><span class="line">   4 </span><br><span class="line">  &#x2F; \</span><br><span class="line"> 1   2</span><br><span class="line">Return true, because t has the same structure and node values with a subtree of s.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given tree s:</span><br><span class="line"></span><br><span class="line">     3</span><br><span class="line">    &#x2F; \</span><br><span class="line">   4   5</span><br><span class="line">  &#x2F; \</span><br><span class="line"> 1   2</span><br><span class="line">    &#x2F;</span><br><span class="line">   0</span><br><span class="line">Given tree t:</span><br><span class="line">   4</span><br><span class="line">  &#x2F; \</span><br><span class="line"> 1   2</span><br><span class="line">Return false.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubtree</span><span class="params">(TreeNode s, TreeNode t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (isSame(s, t)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> isSubtree(s.left, t) || isSubtree(s.right, t);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSame</span><span class="params">(TreeNode s, TreeNode t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> &amp;&amp; t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || t == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (s.val != t.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> isSame(s.left, t.left) &amp;&amp; isSame(s.right, t.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode560-subarraySumEqualsK</title>
    <url>/2019/10/22/Leetcode560-subarraySumEqualsK/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:nums &#x3D; [1,1,1], k &#x3D; 2</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>The length of the array is in range [1, 20,000].</li>
<li>The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subarraySum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>, result = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; preSum = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        preSum.put(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            <span class="keyword">if</span> (preSum.containsKey(sum - k)) &#123;</span><br><span class="line">                result += preSum.get(sum - k);</span><br><span class="line">            &#125;</span><br><span class="line">            preSum.put(sum, preSum.getOrDefault(sum, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Microsoft</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode554-brickWall</title>
    <url>/2020/03/16/Leetcode554-brickWall/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same height but different width. You want to draw a vertical line from the top to the bottom and cross the least bricks.</p>
<p>The brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row from left to right.</p>
<p>If your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line to cross the least bricks and return the number of crossed bricks.</p>
<p><strong>You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.</strong></p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,2,2,1],</span><br><span class="line">        [3,1,2],</span><br><span class="line">        [1,3,2],</span><br><span class="line">        [2,4],</span><br><span class="line">        [3,1,2],</span><br><span class="line">        [1,3,1,1]]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br></pre></td></tr></table></figure>
<p><img src="https://assets.leetcode.com/uploads/2018/10/12/brick_wall.png" alt=""></p>
<p><strong>Note:</strong></p>
<ol>
<li>The width sum of bricks in different rows are the same and won’t exceed INT_MAX.</li>
<li>The number of bricks in each row is in range [1,10,000]. The height of wall is in range [1,10,000]. Total number of bricks of the wall won’t exceed 20,000.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">leastBricks</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; wall)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; row: wall)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row.size() - <span class="number">1</span>; i++)&#123;</span><br><span class="line">                cur += row.get(i);</span><br><span class="line">                map.put(cur, map.getOrDefault(cur, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> it: map.keySet())&#123;</span><br><span class="line">            temp = Math.max(temp, map.get(it));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// System.out.println(map);</span></span><br><span class="line">        <span class="keyword">return</span> wall.size() - temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode588-designInMemoryFileSystem</title>
    <url>/2019/10/05/Leetcode588-designInMemoryFileSystem/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design an in-memory file system to simulate the following functions:</p>
<p>ls: Given a path in string format. If it is a file path, return a list that only contains this file’s name. If it is a directory path, return the list of file and directory names in this directory. Your output (file and directory names together) should in lexicographic order.</p>
<p>mkdir: Given a directory path that does not exist, you should make a new directory according to the path. If the middle directories in the path don’t exist either, you should create them as well. This function has void return type.</p>
<p>addContentToFile: Given a file path and file content in string format. If the file doesn’t exist, you need to create that file containing given content. If the file already exists, you need to append given content to original content. This function has void return type.</p>
<p>readContentFromFile: Given a file path, return its content in string format.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">[&quot;FileSystem&quot;,&quot;ls&quot;,&quot;mkdir&quot;,&quot;addContentToFile&quot;,&quot;ls&quot;,&quot;readContentFromFile&quot;]</span><br><span class="line">[[],[&quot;&#x2F;&quot;],[&quot;&#x2F;a&#x2F;b&#x2F;c&quot;],[&quot;&#x2F;a&#x2F;b&#x2F;c&#x2F;d&quot;,&quot;hello&quot;],[&quot;&#x2F;&quot;],[&quot;&#x2F;a&#x2F;b&#x2F;c&#x2F;d&quot;]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[null,[],null,null,[&quot;a&quot;],&quot;hello&quot;]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">![](https:&#x2F;&#x2F;assets.leetcode.com&#x2F;uploads&#x2F;2018&#x2F;10&#x2F;12&#x2F;filesystem.png)</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileSystem</span> </span>&#123;</span><br><span class="line">    HashMap&lt;String, PriorityQueue&lt;String&gt;&gt; dir;</span><br><span class="line">    HashMap&lt;String, String&gt; file;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSystem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dir = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        dir.put(<span class="string">"/"</span>, <span class="keyword">new</span> PriorityQueue&lt;String&gt;());</span><br><span class="line">        </span><br><span class="line">        file = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">ls</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file.containsKey(path))&#123;</span><br><span class="line">            String[] tmp = path.split(<span class="string">"/"</span>);</span><br><span class="line">            List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            res.add(tmp[tmp.length-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dir.containsKey(path)) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            List&lt;String&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            PriorityQueue&lt;String&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(dir.get(path));</span><br><span class="line">            <span class="keyword">while</span> (!pq.isEmpty())&#123;</span><br><span class="line">                tmp.add(pq.poll());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mkdir</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!dir.containsKey(path))&#123;</span><br><span class="line">            dir.put(path, <span class="keyword">new</span> PriorityQueue&lt;String&gt;());</span><br><span class="line">            String[] tmp = path.split(<span class="string">"/"</span>);</span><br><span class="line">            String include = <span class="string">"/"</span> + tmp[tmp.length-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = tmp.length-<span class="number">2</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">                String pre = path.substring(<span class="number">0</span>, path.length()-include.length());</span><br><span class="line">                <span class="keyword">if</span> (dir.containsKey(pre))&#123;</span><br><span class="line">                    PriorityQueue&lt;String&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(dir.get(pre));</span><br><span class="line">                    pq.offer(tmp[i+<span class="number">1</span>]);</span><br><span class="line">                    dir.put(pre, pq);</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// dir.put(pre, new PriorityQueue&lt;String&gt;());</span></span><br><span class="line">                    PriorityQueue&lt;String&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">                    pq.offer(tmp[i+<span class="number">1</span>]);</span><br><span class="line">                    dir.put(pre, pq);</span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">1</span>)&#123;</span><br><span class="line">                        PriorityQueue&lt;String&gt; f = dir.get(<span class="string">"/"</span>);</span><br><span class="line">                        f.offer(tmp[<span class="number">1</span>]);</span><br><span class="line">                        dir.put(<span class="string">"/"</span>, f);</span><br><span class="line">                        flag = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                include = <span class="string">"/"</span> + tmp[i] + include;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">0</span>)&#123;</span><br><span class="line">                PriorityQueue&lt;String&gt; f = dir.get(<span class="string">"/"</span>);</span><br><span class="line">                f.offer(tmp[<span class="number">1</span>]);</span><br><span class="line">                dir.put(<span class="string">"/"</span>, f);      </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addContentToFile</span><span class="params">(String filePath, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file.containsKey(filePath)) file.put(filePath, file.get(filePath)+content);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            file.put(filePath, content);</span><br><span class="line">            String[] tmp = filePath.split(<span class="string">"/"</span>);</span><br><span class="line">            String d = filePath.substring(<span class="number">0</span>, filePath.length() - tmp[tmp.length-<span class="number">1</span>].length()-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (d.equals(<span class="string">""</span>)) d = <span class="string">"/"</span>;</span><br><span class="line">            <span class="keyword">if</span> (dir.containsKey(d))&#123;</span><br><span class="line">                PriorityQueue&lt;String&gt; pq = dir.get(d);</span><br><span class="line">                pq.offer(tmp[tmp.length-<span class="number">1</span>]);</span><br><span class="line">                dir.put(d, pq);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readContentFromFile</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file.containsKey(filePath)) <span class="keyword">return</span> file.get(filePath);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your FileSystem object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * FileSystem obj = new FileSystem();</span></span><br><span class="line"><span class="comment"> * List&lt;String&gt; param_1 = obj.ls(path);</span></span><br><span class="line"><span class="comment"> * obj.mkdir(path);</span></span><br><span class="line"><span class="comment"> * obj.addContentToFile(filePath,content);</span></span><br><span class="line"><span class="comment"> * String param_4 = obj.readContentFromFile(filePath);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode611-validTriangleNumber</title>
    <url>/2020/03/02/Leetcode611-validTriangleNumber/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,2,3,4]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">Valid combinations are: </span><br><span class="line">2,3,4 (using the first 2)</span><br><span class="line">2,3,4 (using the second 2)</span><br><span class="line">2,2,3</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>The length of the given array won’t exceed 1000.</li>
<li>The integers in the given array are in the range of [0, 1000].</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">triangleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> right = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] + nums[right] &gt; nums[i])&#123;</span><br><span class="line">                    res += right - left;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode647-palindromicSubstrings</title>
    <url>/2019/09/25/Leetcode647-palindromicSubstrings/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string, your task is to count how many palindromic substrings in this string.</p>
<p>The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;abc&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Three palindromic strings: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;.</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;aaa&quot;</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: Six palindromic strings: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;.</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>The input string length won’t exceed 1000.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">extendPalind</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left) == s.charAt(right))&#123;</span><br><span class="line">            count ++;</span><br><span class="line">            left --;</span><br><span class="line">            right ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countSubstrings</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            res += extendPalind(s, i, i);</span><br><span class="line">            res += extendPalind(s, i, i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Palindromic</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode658-findKCloestElements</title>
    <url>/2020/03/02/Leetcode658-findKCloestElements/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a sorted array, two integers k and x, find the k closest elements to x in the array. The result should also be sorted in ascending order. If there is a tie, the smaller elements are always preferred.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5], k&#x3D;4, x&#x3D;3</span><br><span class="line">Output: [1,2,3,4]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5], k&#x3D;4, x&#x3D;-1</span><br><span class="line">Output: [1,2,3,4]</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: Two Pointers, O(N)</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Two pointers, O(N)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findClosestElements</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = arr.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (right - left &gt;= k)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(arr[left] - x) &gt; Math.abs(arr[right] - x))</span><br><span class="line">                left++;</span><br><span class="line">            <span class="keyword">else</span> right--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++)</span><br><span class="line">            res.add(arr[i]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 2: Basic Binary Search, O(logN)</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//     Basic binary search method.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findClosestElements</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//find the cloest element, r is the index of one of the cloest elements</span></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = arr.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[mid] == x) &#123;r = mid; <span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &gt; x) r = mid-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ensure the range</span></span><br><span class="line">        l = r;</span><br><span class="line">        r++;</span><br><span class="line">        <span class="keyword">while</span>(k&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>( r &gt;= arr.length || (l &gt;= <span class="number">0</span> &amp;&amp; x-arr[l] &lt;= arr[r] - x) ) &#123;</span><br><span class="line">                l--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;        </span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        List&lt;Integer&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l+<span class="number">1</span>; i &lt; r; i++) &#123;</span><br><span class="line">            list.add(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 3: Excellent binary search, O(logN)</strong></p>
<p>used mid as left bound of k size closeset</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;    </span><br><span class="line">    <span class="comment">// O(logN), used mid as left bound of k size closeset, excellent binary search method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findClosestElements</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> k, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = A.length - k;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (x - A[mid] &gt; A[mid + k] - x)</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                right = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt; left + k; i++)</span><br><span class="line">            res.add(A[i]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode636-exclusiveTimeofFunctions</title>
    <url>/2019/10/13/Leetcode636-exclusiveTimeofFunctions/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>On a single threaded CPU, we execute some functions.  Each function has a unique id between 0 and N-1.</p>
<p>We store logs in timestamp order that describe when a function is entered or exited.</p>
<p>Each log is a string with this format: “{function_id}:{“start” | “end”}:{timestamp}”.  For example, “0:start:3” means the function with id 0 started at the beginning of timestamp 3.  “1:end:2” means the function with id 1 ended at the end of timestamp 2.</p>
<p>A function’s exclusive time is the number of units of time spent in this function.  Note that this does not include any recursive calls to child functions.</p>
<p>The CPU is single threaded which means that only one function is being executed at a given time unit.</p>
<p>Return the exclusive time of each function, sorted by their function id.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><img src="https://assets.leetcode.com/uploads/2019/04/05/diag1b.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">n &#x3D; 2</span><br><span class="line">logs &#x3D; [&quot;0:start:0&quot;,&quot;1:start:2&quot;,&quot;1:end:5&quot;,&quot;0:end:6&quot;]</span><br><span class="line">Output: [3, 4]</span><br><span class="line">Explanation:</span><br><span class="line">Function 0 starts at the beginning of time 0, then it executes 2 units of time and reaches the end of time 1.</span><br><span class="line">Now function 1 starts at the beginning of time 2, executes 4 units of time and ends at time 5.</span><br><span class="line">Function 0 is running again at the beginning of time 6, and also ends at the end of time 6, thus executing for 1 unit of time. </span><br><span class="line">So function 0 spends 2 + 1 &#x3D; 3 units of total time executing, and function 1 spends 4 units of total time executing.</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>1 &lt;= n &lt;= 100</li>
<li>Two functions won’t start or end at the same time.</li>
<li>Functions will always log when they exit.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] exclusiveTime(<span class="keyword">int</span> n, List&lt;String&gt; logs) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">if</span> (logs == <span class="keyword">null</span> || logs.size() == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        Stack&lt;Integer&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> preTime = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String log: logs)&#123;</span><br><span class="line">            String[] tmp = log.split(<span class="string">":"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!st.isEmpty()) res[st.peek()] += Integer.parseInt(tmp[<span class="number">2</span>]) - preTime;</span><br><span class="line">            preTime = Integer.parseInt(tmp[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">if</span> (tmp[<span class="number">1</span>].equals(<span class="string">"start"</span>)) st.push(Integer.parseInt(tmp[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                res[st.pop()]++;</span><br><span class="line">                preTime ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode652-findDuplicateSubtrees</title>
    <url>/2020/03/02/Leetcode652-findDuplicateSubtrees/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return all duplicate subtrees. For each kind of duplicate subtrees, you only need to return the root node of any one of them.</p>
<p>Two trees are duplicate if they have the same structure with same node values.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    1</span><br><span class="line">   &#x2F; \</span><br><span class="line">  2   3</span><br><span class="line"> &#x2F;   &#x2F; \</span><br><span class="line">4   2   4</span><br><span class="line">   &#x2F;</span><br><span class="line">  4</span><br></pre></td></tr></table></figure>
<p>The following are two duplicate subtrees:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  2</span><br><span class="line"> &#x2F;</span><br><span class="line">4</span><br></pre></td></tr></table></figure><br>and<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure></p>
<p>Therefore, you need to return above trees’ root in the form of a list.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TreeNode&gt; <span class="title">findDuplicateSubtrees</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        List&lt;TreeNode&gt; res = <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;();</span><br><span class="line">        helper(root, map, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">helper</span><span class="params">(TreeNode node, HashMap&lt;String, Integer&gt; map, List&lt;TreeNode&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="string">"#"</span>;</span><br><span class="line">        String cur = node.val + <span class="string">"-"</span> + helper(node.left, map, res) + <span class="string">"-"</span> + helper(node.right, map, res);</span><br><span class="line">        <span class="keyword">if</span> (map.getOrDefault(cur, <span class="number">0</span>) == <span class="number">1</span>) res.add(node);</span><br><span class="line">        map.put(cur, map.getOrDefault(cur, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode659-splitArrayIntoConsecutiveSubsequences</title>
    <url>/2020/04/07/Leetcode659-splitArrayIntoConsecutiveSubsequences/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array nums sorted in ascending order, return true if and only if you can split it into 1 or more subsequences such that each subsequence consists of consecutive integers and has length at least 3.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,3,4,5]</span><br><span class="line">Output: True</span><br><span class="line">Explanation:</span><br><span class="line">You can split them into two consecutive subsequences : </span><br><span class="line">1, 2, 3</span><br><span class="line">3, 4, 5</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,3,4,4,5,5]</span><br><span class="line">Output: True</span><br><span class="line">Explanation:</span><br><span class="line">You can split them into two consecutive subsequences : </span><br><span class="line">1, 2, 3, 4, 5</span><br><span class="line">3, 4, 5</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,4,5]</span><br><span class="line">Output: False</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= nums.length &lt;= 10000</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>I used a greedy algorithm.</p>
<p>leftis a hashmap, left[i] counts the number of i that I haven’t placed yet.</p>
<p>endis a hashmap, end[i] counts the number of consecutive subsequences that ends at number i</p>
<p>Then I tried to split the nums one by one.</p>
<p>If I could neither add a number to the end of a existing consecutive subsequence nor find two following number in the left, I returned False</p>
<p>Time: O(N)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPossible</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; left = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; end = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">            left.put(num, left.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            end.put(num, <span class="number">0</span>);            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums)&#123;</span><br><span class="line">            <span class="keyword">if</span> (left.get(num) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            left.put(num, left.get(num) - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (end.getOrDefault(num - <span class="number">1</span>, <span class="number">0</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                end.put(num - <span class="number">1</span>, end.get(num - <span class="number">1</span>) - <span class="number">1</span>);</span><br><span class="line">                end.put(num, end.get(num) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (left.getOrDefault(num + <span class="number">1</span>, <span class="number">0</span>) &gt; <span class="number">0</span> &amp;&amp; left.getOrDefault(num + <span class="number">2</span>, <span class="number">0</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                left.put(num + <span class="number">1</span>, left.get(num + <span class="number">1</span>) - <span class="number">1</span>);</span><br><span class="line">                left.put(num + <span class="number">2</span>, left.get(num + <span class="number">2</span>) - <span class="number">1</span>);</span><br><span class="line">                end.put(num + <span class="number">2</span>, end.get(num + <span class="number">2</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Greedy</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode662-maximumWidthofBinaryTree</title>
    <url>/2020/03/02/Leetcode662-maximumWidthofBinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.</p>
<p>The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line"></span><br><span class="line">           1</span><br><span class="line">         &#x2F;   \</span><br><span class="line">        3     2</span><br><span class="line">       &#x2F; \     \  </span><br><span class="line">      5   3     9 </span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line"></span><br><span class="line">          1</span><br><span class="line">         &#x2F;  </span><br><span class="line">        3    </span><br><span class="line">       &#x2F; \       </span><br><span class="line">      5   3     </span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The maximum width existing in the third level with the length 2 (5,3).</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line"></span><br><span class="line">          1</span><br><span class="line">         &#x2F; \</span><br><span class="line">        3   2 </span><br><span class="line">       &#x2F;        </span><br><span class="line">      5      </span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The maximum width existing in the second level with the length 2 (3,2).</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line"></span><br><span class="line">          1</span><br><span class="line">         &#x2F; \</span><br><span class="line">        3   2</span><br><span class="line">       &#x2F;     \  </span><br><span class="line">      5       9 </span><br><span class="line">     &#x2F;         \</span><br><span class="line">    6           7</span><br><span class="line">Output: 8</span><br><span class="line">Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: Best solution</strong></p>
<p>Used list to record the start index of current level. The index of root is 1. The left child and right can be represented as 2 <em> i and 2 </em> i + 1. So the width of one level is the index of right most node - left most node + 1.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">widthOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; startOfLevel = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        helper(root, <span class="number">0</span>, <span class="number">1</span>, startOfLevel);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(TreeNode root, <span class="keyword">int</span> level, <span class="keyword">int</span> index, List&lt;Integer&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (level == list.size()) list.add(index);</span><br><span class="line">        max = Math.max(max, index + <span class="number">1</span> - list.get(level));</span><br><span class="line">        helper(root.left, level + <span class="number">1</span>, index * <span class="number">2</span>, list);</span><br><span class="line">        helper(root.right, level + <span class="number">1</span>, index * <span class="number">2</span> + <span class="number">1</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution: Not good enough solution</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">widthOfBinaryTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        List&lt;TreeNode&gt; level = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        level.add(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(level.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> size = level.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                TreeNode tmp = level.remove(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (tmp != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    level.add(tmp.left);</span><br><span class="line">                    level.add(tmp.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    level.add(<span class="keyword">null</span>);</span><br><span class="line">                    level.add(<span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(level.size() &gt; <span class="number">0</span> &amp;&amp; level.get(<span class="number">0</span>) == <span class="keyword">null</span>) level.remove(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">while</span>(level.size() &gt; <span class="number">0</span> &amp;&amp; level.get(level.size() - <span class="number">1</span>) == <span class="keyword">null</span>) level.remove(level.size() - <span class="number">1</span>);</span><br><span class="line">            res = Math.max(res, level.size());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode642-designSearchhAutocompleteSystem</title>
    <url>/2019/10/05/Leetcode642-designSearchhAutocompleteSystem/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character ‘#’). For each character they type except ‘#’, you need to return the top 3 historical hot sentences that have prefix the same as the part of sentence already typed. Here are the specific rules:</p>
<p>The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.<br>The returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same degree of hot, you need to use ASCII-code order (smaller one appears first).<br>If less than 3 hot sentences exist, then just return as many as you can.<br>When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.<br>Your job is to implement the following functions:</p>
<p>The constructor function:</p>
<p>AutocompleteSystem(String[] sentences, int[] times): This is the constructor. The input is historical data. Sentences is a string array consists of previously typed sentences. Times is the corresponding times a sentence has been typed. Your system should record these historical data.</p>
<p>Now, the user wants to input a new sentence. The following function will provide the next character the user types:</p>
<p>List<String> input(char c): The input c is the next character typed by the user. The character will only be lower-case letters (‘a’ to ‘z’), blank space (‘ ‘) or a special character (‘#’). Also, the previously typed sentence should be recorded in your system. The output will be the top 3 historical hot sentences that have prefix the same as the part of sentence already typed.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">Operation: AutocompleteSystem([&quot;i love you&quot;, &quot;island&quot;,&quot;ironman&quot;, &quot;i love leetcode&quot;], [5,3,2,2])</span><br><span class="line">The system have already tracked down the following sentences and their corresponding times:</span><br><span class="line">&quot;i love you&quot; : 5 times</span><br><span class="line">&quot;island&quot; : 3 times</span><br><span class="line">&quot;ironman&quot; : 2 times</span><br><span class="line">&quot;i love leetcode&quot; : 2 times</span><br><span class="line">Now, the user begins another search:</span><br><span class="line"></span><br><span class="line">Operation: input(&#39;i&#39;)</span><br><span class="line">Output: [&quot;i love you&quot;, &quot;island&quot;,&quot;i love leetcode&quot;]</span><br><span class="line">Explanation:</span><br><span class="line">There are four sentences that have prefix &quot;i&quot;. Among them, &quot;ironman&quot; and &quot;i love leetcode&quot; have same hot degree. Since &#39; &#39; has ASCII code 32 and &#39;r&#39; has ASCII code 114, &quot;i love leetcode&quot; should be in front of &quot;ironman&quot;. Also we only need to output top 3 hot sentences, so &quot;ironman&quot; will be ignored.</span><br><span class="line"></span><br><span class="line">Operation: input(&#39; &#39;)</span><br><span class="line">Output: [&quot;i love you&quot;,&quot;i love leetcode&quot;]</span><br><span class="line">Explanation:</span><br><span class="line">There are only two sentences that have prefix &quot;i &quot;.</span><br><span class="line"></span><br><span class="line">Operation: input(&#39;a&#39;)</span><br><span class="line">Output: []</span><br><span class="line">Explanation:</span><br><span class="line">There are no sentences that have prefix &quot;i a&quot;.</span><br><span class="line"></span><br><span class="line">Operation: input(&#39;#&#39;)</span><br><span class="line">Output: []</span><br><span class="line">Explanation:</span><br><span class="line">The user finished the input, the sentence &quot;i a&quot; should be saved as a historical sentence in system. And the following input will be counted as a new search.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<p>The input sentence will always start with a letter and end with ‘#’, and only one blank space will exist between two words.<br>The number of complete sentences that to be searched won’t exceed 100. The length of each sentence including those in the historical data won’t exceed 100.<br>Please use double-quote instead of single-quote when you write test cases even for a character input.<br>Please remember to RESET your class variables declared in class AutocompleteSystem, as static/class variables are persisted across multiple test cases. Please see here for more details.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: Basic Solution, HashMap</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutocompleteSystem</span> </span>&#123;</span><br><span class="line">    String[] sentences;</span><br><span class="line">    <span class="keyword">int</span>[] times;</span><br><span class="line">    String search;</span><br><span class="line">    HashMap&lt;String, Integer&gt; history;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AutocompleteSystem</span><span class="params">(String[] sentences, <span class="keyword">int</span>[] times)</span> </span>&#123;</span><br><span class="line">        history = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sentences.length; i++)&#123;</span><br><span class="line">            history.put(sentences[i], times[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        search = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">input</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'#'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (history.containsKey(search)) history.put(search, history.get(search)+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> history.put(search, <span class="number">1</span>);</span><br><span class="line">            search = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        &#125; </span><br><span class="line">        search += c;</span><br><span class="line">        <span class="keyword">int</span> len = search.length();</span><br><span class="line">        TreeMap&lt;Integer, PriorityQueue&lt;String&gt;&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;((a,b) -&gt; b-a);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String s: history.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span> (s.length() &gt;= len)&#123;</span><br><span class="line">                String tmp = s.substring(<span class="number">0</span>, len);</span><br><span class="line">                <span class="keyword">if</span> (tmp.equals(search))&#123;</span><br><span class="line">                    <span class="keyword">if</span> (map.containsKey(history.get(s)))&#123;</span><br><span class="line">                        PriorityQueue&lt;String&gt; pq = map.get(history.get(s));</span><br><span class="line">                        pq.offer(s);</span><br><span class="line">                        map.put(history.get(s), pq);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        PriorityQueue&lt;String&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">                        pq.offer(s);</span><br><span class="line">                        map.put(history.get(s),pq);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> it: map.keySet())&#123;</span><br><span class="line">            PriorityQueue&lt;String&gt; pq = map.get(it);</span><br><span class="line">            <span class="keyword">while</span> (!pq.isEmpty())&#123;</span><br><span class="line">                res.add(pq.poll());</span><br><span class="line">                <span class="keyword">if</span> (res.size() == <span class="number">3</span>) <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your AutocompleteSystem object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);</span></span><br><span class="line"><span class="comment"> * List&lt;String&gt; param_1 = obj.input(c);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><br><strong>Solution 2: Trie Tree</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutocompleteSystem</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, TrieNode&gt; children;</span><br><span class="line">        Map&lt;String, Integer&gt; counts;</span><br><span class="line">        <span class="keyword">boolean</span> isWord;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            children = <span class="keyword">new</span> HashMap&lt;Character, TrieNode&gt;();</span><br><span class="line">            counts = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">            isWord = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pair</span> </span>&#123;</span><br><span class="line">        String s;</span><br><span class="line">        <span class="keyword">int</span> c;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Pair</span><span class="params">(String s, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.s = s; <span class="keyword">this</span>.c = c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    TrieNode root;</span><br><span class="line">    String prefix;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AutocompleteSystem</span><span class="params">(String[] sentences, <span class="keyword">int</span>[] times)</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">        prefix = <span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sentences.length; i++) &#123;</span><br><span class="line">            add(sentences[i], times[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String s, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        TrieNode curr = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            TrieNode next = curr.children.get(c);</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                next = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                curr.children.put(c, next);</span><br><span class="line">            &#125;</span><br><span class="line">            curr = next;</span><br><span class="line">            curr.counts.put(s, curr.counts.getOrDefault(s, <span class="number">0</span>) + count);</span><br><span class="line">        &#125;</span><br><span class="line">        curr.isWord = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">input</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'#'</span>) &#123;</span><br><span class="line">            add(prefix, <span class="number">1</span>);</span><br><span class="line">            prefix = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        prefix = prefix + c;</span><br><span class="line">        TrieNode curr = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> cc : prefix.toCharArray()) &#123;</span><br><span class="line">            TrieNode next = curr.children.get(cc);</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        PriorityQueue&lt;Pair&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; (a.c == b.c ? a.s.compareTo(b.s) : b.c - a.c));</span><br><span class="line">        <span class="keyword">for</span> (String s : curr.counts.keySet()) &#123;</span><br><span class="line">            pq.add(<span class="keyword">new</span> Pair(s, curr.counts.get(s)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span> &amp;&amp; !pq.isEmpty(); i++) &#123;</span><br><span class="line">            res.add(pq.poll().s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Amazon</tag>
        <tag>Design</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode669-trimABinarySearchTree</title>
    <url>/2020/02/24/Leetcode669-trimABinarySearchTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary search tree and the lowest and highest boundaries as L and R, trim the tree so that all its elements lies in [L, R] (R &gt;= L). You might need to change the root of the tree, so the result should return the new root of the trimmed binary search tree.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br>···<br>Input:<br>    1<br>   / \<br>  0   2</p>
<p>  L = 1<br>  R = 2</p>
<p>Output:<br>    1<br>      \<br>       2<br>···<br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">    3</span><br><span class="line">   &#x2F; \</span><br><span class="line">  0   4</span><br><span class="line">   \</span><br><span class="line">    2</span><br><span class="line">   &#x2F;</span><br><span class="line">  1</span><br><span class="line"></span><br><span class="line">  L &#x3D; 1</span><br><span class="line">  R &#x3D; 3</span><br><span class="line"></span><br><span class="line">Output: </span><br><span class="line">      3</span><br><span class="line">     &#x2F; </span><br><span class="line">   2   </span><br><span class="line">  &#x2F;</span><br><span class="line"> 1</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">trimBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (root.val &lt; L) <span class="keyword">return</span> trimBST(root.right, L, R);</span><br><span class="line">        <span class="keyword">if</span> (root.val &gt; R) <span class="keyword">return</span> trimBST(root.left, L, R);</span><br><span class="line">        root.left = trimBST(root.left, L, R);</span><br><span class="line">        root.right = trimBST(root.right, L, R);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode673-numberOfLongestIncreasingSubsequence</title>
    <url>/2020/02/20/Leetcode673-numberOfLongestIncreasingSubsequence/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an unsorted array of integers, find the number of longest increasing subsequence.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,5,4,7]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,2,2,2,2]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences&#39; length is 1, so output 5.</span><br></pre></td></tr></table></figure><br><strong>Note:</strong> Length of the given array will be not exceed 2000 and the answer is guaranteed to be fit in 32-bit signed int.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Add one array to record the number of each dp[i]<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findNumberOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            count[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxLen = dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[i])&#123;</span><br><span class="line">                    <span class="keyword">if</span> (dp[i] == dp[j] + <span class="number">1</span>) count[i] += count[j];</span><br><span class="line">                    <span class="keyword">if</span> (dp[i] &lt; dp[j] + <span class="number">1</span>)&#123;</span><br><span class="line">                        dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">                        count[i] = count[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            maxLen = Math.max(maxLen, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dp.length; i++)</span><br><span class="line">            <span class="keyword">if</span> (dp[i] == maxLen) res += count[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode675-cutOffTreesForGolfEvent</title>
    <url>/2019/10/05/Leetcode675-cutOffTreesForGolfEvent/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are asked to cut off trees in a forest for a golf event. The forest is represented as a non-negative 2D map, in this map:</p>
<p>0 represents the obstacle can’t be reached.<br>1 represents the ground can be walked through.<br>The place with number bigger than 1 represents a tree can be walked through, and this positive number represents the tree’s height.</p>
<p>You are asked to cut off all the trees in this forest in the order of tree’s height - always cut off the tree with lowest height first. And after cutting, the original place has the tree will become a grass (value 1).</p>
<p>You will start from the point (0, 0) and you should output the minimum steps you need to walk to cut off all the trees. If you can’t cut off all the trees, output -1 in that situation.</p>
<p>You are guaranteed that no two trees have the same height and there is at least one tree needs to be cut off.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">[</span><br><span class="line"> [1,2,3],</span><br><span class="line"> [0,0,4],</span><br><span class="line"> [7,6,5]</span><br><span class="line">]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">[</span><br><span class="line"> [1,2,3],</span><br><span class="line"> [0,0,0],</span><br><span class="line"> [7,6,5]</span><br><span class="line">]</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">[</span><br><span class="line"> [2,3,4],</span><br><span class="line"> [0,0,5],</span><br><span class="line"> [8,7,6]</span><br><span class="line">]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: You started from the point (0,0) and you can cut off the tree in (0,0) directly without walking.</span><br></pre></td></tr></table></figure><br><strong>Hint:</strong> size of the given matrix will not exceed 50x50.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cutOffTree</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; forest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (forest == <span class="keyword">null</span> || forest.size() == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a,b)-&gt;(a[<span class="number">2</span>] - b[<span class="number">2</span>]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; forest.size(); i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; forest.get(i).size(); j++)</span><br><span class="line">                <span class="keyword">if</span> (forest.get(i).get(j) &gt; <span class="number">1</span>)</span><br><span class="line">                    pq.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j, forest.get(i).get(j)&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] start = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span>[] cur = pq.poll();</span><br><span class="line">            <span class="keyword">int</span> step = bfs(forest, start, cur);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (step &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>; </span><br><span class="line">            res += step;</span><br><span class="line">            </span><br><span class="line">            start[<span class="number">0</span>] = cur[<span class="number">0</span>];</span><br><span class="line">            start[<span class="number">1</span>] = cur[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">bfs</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; forest, <span class="keyword">int</span>[] start, <span class="keyword">int</span>[] tree)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[][] visited = <span class="keyword">new</span> <span class="keyword">int</span>[forest.size()][forest.get(<span class="number">0</span>).size()];</span><br><span class="line">        visited[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;<span class="keyword">int</span>[]&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.offer(start);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[][] dir = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; size;k++)&#123;</span><br><span class="line">                <span class="keyword">int</span>[] cur = q.poll();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (cur[<span class="number">0</span>] == tree[<span class="number">0</span>] &amp;&amp; cur[<span class="number">1</span>] == tree[<span class="number">1</span>]) <span class="keyword">return</span> step;              </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">                    <span class="keyword">int</span> x = cur[<span class="number">0</span>] + dir[i][<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">int</span> y = cur[<span class="number">1</span>] + dir[i][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; forest.size() &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; forest.get(<span class="number">0</span>).size() &amp;&amp; forest.get(x).get(y) != <span class="number">0</span> &amp;&amp; visited[x][y] != <span class="number">1</span>) &#123;</span><br><span class="line">                        q.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;x, y&#125;);</span><br><span class="line">                        visited[x][y] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode692-topKFrequentWords</title>
    <url>/2019/10/08/Leetcode692-topKFrequentWords/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty list of words, return the k most frequent elements.</p>
<p>Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;i&quot;, &quot;love&quot;, &quot;leetcode&quot;, &quot;i&quot;, &quot;love&quot;, &quot;coding&quot;], k &#x3D; 2</span><br><span class="line">Output: [&quot;i&quot;, &quot;love&quot;]</span><br><span class="line">Explanation: &quot;i&quot; and &quot;love&quot; are the two most frequent words.</span><br><span class="line">    Note that &quot;i&quot; comes before &quot;love&quot; due to a lower alphabetical order.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;the&quot;, &quot;day&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;the&quot;, &quot;the&quot;, &quot;the&quot;, &quot;sunny&quot;, &quot;is&quot;, &quot;is&quot;], k &#x3D; 4</span><br><span class="line">Output: [&quot;the&quot;, &quot;is&quot;, &quot;sunny&quot;, &quot;day&quot;]</span><br><span class="line">Explanation: &quot;the&quot;, &quot;is&quot;, &quot;sunny&quot; and &quot;day&quot; are the four most frequent words,</span><br><span class="line">    with the number of occurrence being 4, 3, 2 and 1 respectively.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>O(NlogK)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">topKFrequent</span><span class="params">(String[] words, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (words == <span class="keyword">null</span> || words.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String word: words)&#123;</span><br><span class="line">            map.put(word, map.getOrDefault(word, <span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        PriorityQueue&lt;String&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;String&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String a, String b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (map.get(a) == map.get(b)) <span class="keyword">return</span> b.compareTo(a);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> map.get(a)-map.get(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (String word: map.keySet())&#123;</span><br><span class="line">            pq.offer(word);</span><br><span class="line">            <span class="keyword">if</span> (pq.size() &gt; k) pq.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        LinkedList&lt;String&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();       </span><br><span class="line">        <span class="keyword">while</span>(!pq.isEmpty()) res.addFirst(pq.poll());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Amazon</tag>
        <tag>Bloomberg</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode690-employeeImportance</title>
    <url>/2020/02/12/Leetcode690-employeeImportance/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a data structure of employee information, which includes the employee’s unique id, his importance value and his direct subordinates’ id.</p>
<p>For example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. They have importance value 15, 10 and 5, respectively. Then employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2, 10, [3]], and employee 3 has [3, 5, []]. Note that although employee 3 is also a subordinate of employee 1, the relationship is not direct.</p>
<p>Now given the employee information of a company, and an employee id, you need to return the total importance value of this employee and all his subordinates.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1</span><br><span class="line">Output: 11</span><br><span class="line">Explanation:</span><br><span class="line">Employee 1 has importance value 5, and he has two direct subordinates: employee 2 and employee 3. They both have importance value 3. So the total importance value of employee 1 is 5 + 3 + 3 &#x3D; 11.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>One employee has at most one direct leader and may have several subordinates.</li>
<li>The maximum number of employees won’t exceed 2000.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Employee info</span></span><br><span class="line"><span class="comment">class Employee &#123;</span></span><br><span class="line"><span class="comment">    // It's the unique id of each node;</span></span><br><span class="line"><span class="comment">    // unique id of this employee</span></span><br><span class="line"><span class="comment">    public int id;</span></span><br><span class="line"><span class="comment">    // the importance value of this employee</span></span><br><span class="line"><span class="comment">    public int importance;</span></span><br><span class="line"><span class="comment">    // the id of direct subordinates</span></span><br><span class="line"><span class="comment">    public List&lt;Integer&gt; subordinates;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImportance</span><span class="params">(List&lt;Employee&gt; employees, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (employees == <span class="keyword">null</span> || employees.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        HashMap&lt;Integer, Employee&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Employee employee: employees)&#123;</span><br><span class="line">            map.put(employee.id, employee);</span><br><span class="line">        &#125;</span><br><span class="line">        queue.offer(id);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = queue.poll();</span><br><span class="line">            res += map.get(cur).importance;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> next: map.get(cur).subordinates)&#123;</span><br><span class="line">                queue.offer(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode695-maxAreaOFIsland</title>
    <url>/2020/03/02/Leetcode695-maxAreaOFIsland/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty 2D array grid of 0’s and 1’s, an island is a group of 1’s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.</p>
<p>Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[0,0,1,0,0,0,0,1,0,0,0,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,1,1,1,0,0,0],</span><br><span class="line"> [0,1,1,0,1,0,0,0,0,0,0,0,0],</span><br><span class="line"> [0,1,0,0,1,1,0,0,1,0,1,0,0],</span><br><span class="line"> [0,1,0,0,1,1,0,0,1,1,1,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,0,0,0,1,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,1,1,1,0,0,0],</span><br><span class="line"> [0,0,0,0,0,0,0,1,1,0,0,0,0]]</span><br><span class="line">Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[0,0,0,0,0,0,0,0]]</span><br><span class="line">Given the above grid, return 0.</span><br><span class="line">Note: The length of each dimension in the given grid does not exceed 50.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxAreaOfIsland</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span> || grid[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>)</span><br><span class="line">                    res = Math.max(res, helper(grid, i, j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; grid.length &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; grid[<span class="number">0</span>].length &amp;&amp; grid[x][y] == <span class="number">1</span>)&#123;</span><br><span class="line">            grid[x][y] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> + helper(grid, x + <span class="number">1</span>, y) + helper(grid, x - <span class="number">1</span>, y) + helper(grid, x, y + <span class="number">1</span>) + helper(grid, x, y - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode697-degreeofArray</title>
    <url>/2019/10/14/Leetcode697-degreeofArray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.</p>
<p>Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1, 2, 2, 3, 1]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: </span><br><span class="line">The input array has a degree of 2 because both elements 1 and 2 appear twice.</span><br><span class="line">Of the subarrays that have the same degree:</span><br><span class="line">[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]</span><br><span class="line">The shortest length is 2. So return 2.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,2,3,1,4,2]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong><br>nums.length will be between 1 and 50,000.<br>nums[i] will be an integer between 0 and 49,999.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findShortestSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; freq = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; index = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> maxFreq = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            freq.put(nums[i], freq.getOrDefault(nums[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            maxFreq = Math.max(freq.get(nums[i]), maxFreq);</span><br><span class="line">            index.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (freq.containsKey(nums[i]) &amp;&amp; freq.get(nums[i]) == maxFreq)&#123;</span><br><span class="line">                res = Math.min(res, index.get(nums[i]) - i + <span class="number">1</span>);</span><br><span class="line">                freq.remove(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode694-numberOfDistinctIslands</title>
    <url>/2020/03/28/Leetcode694-numberOfDistinctIslands/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty 2D array grid of 0’s and 1’s, an island is a group of 1’s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.</p>
<p>Count the number of distinct islands. An island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11000</span><br><span class="line">11000</span><br><span class="line">00011</span><br><span class="line">00011</span><br></pre></td></tr></table></figure><br>Given the above grid map, return 1.</p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11011</span><br><span class="line">10000</span><br><span class="line">00001</span><br><span class="line">11011</span><br></pre></td></tr></table></figure><br>Given the above grid map, return 3.</p>
<p>Notice that:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11</span><br><span class="line">1</span><br></pre></td></tr></table></figure><br>and<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1</span><br><span class="line">11</span><br></pre></td></tr></table></figure><br>are considered different island shapes, because we do not consider reflection / rotation.</p>
<p><strong>Note:</strong> The length of each dimension in the given grid does not exceed 50.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numDistinctIslands</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid == <span class="keyword">null</span> || grid.length == <span class="number">0</span> || grid[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    StringBuilder cur= <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    helper(grid, i, j, cur, <span class="string">"o"</span>);</span><br><span class="line">                    set.add(cur.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set.size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] direction = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;-<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,&#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">private</span> String[] symbols = <span class="keyword">new</span> String[]&#123;<span class="string">"d"</span>, <span class="string">"u"</span>, <span class="string">"r"</span>, <span class="string">"l"</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span> x, <span class="keyword">int</span> y, StringBuilder cur, String dir)</span></span>&#123;</span><br><span class="line">        grid[x][y] = <span class="number">0</span>;</span><br><span class="line">        cur.append(dir);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; direction.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + direction[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ny = y + direction[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; grid.length &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; grid[<span class="number">0</span>].length &amp;&amp; grid[nx][ny] == <span class="number">1</span>)&#123;</span><br><span class="line">                helper(grid, nx, ny, cur, symbols[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.append(<span class="string">"b"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Hash Table</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode698-partitionToKEqualSumSubsets</title>
    <url>/2020/02/12/Leetcode698-partitionToKEqualSumSubsets/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers nums and a positive integer k, find whether it’s possible to divide this array into k non-empty subsets whose sums are all equal.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [4, 3, 2, 3, 5, 2, 1], k &#x3D; 4</span><br><span class="line">Output: True</span><br><span class="line">Explanation: It&#39;s possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= k &lt;= len(nums) &lt;= 16.</li>
<li>0 &lt; nums[i] &lt; 10000.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Solution 1: DFS, but slower<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartitionKSubsets</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; k) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums) sum += num;</span><br><span class="line">        <span class="keyword">if</span> (sum % k != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(nums, sum / k, <span class="keyword">new</span> <span class="keyword">int</span>[k], nums.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, <span class="keyword">int</span>[] parts, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> part: parts)&#123;</span><br><span class="line">                <span class="keyword">if</span> (part != target)&#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> flag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parts.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (parts[i] + nums[index] &gt; target) <span class="keyword">continue</span>;</span><br><span class="line">            parts[i] += nums[index];</span><br><span class="line">            <span class="keyword">if</span> (helper(nums, target, parts, index - <span class="number">1</span>)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            parts[i] -= nums[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Solution 2: Still DFS, but faster<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartitionKSubsets</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &gt; A.length) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : A) sum += num;</span><br><span class="line">        <span class="keyword">if</span> (sum % k != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[A.length];</span><br><span class="line">        Arrays.sort(A);</span><br><span class="line">        <span class="keyword">return</span> helper(A, <span class="number">0</span>, A.length - <span class="number">1</span>, visited, sum / k, k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> sum, <span class="keyword">int</span> st, <span class="keyword">boolean</span>[] visited, <span class="keyword">int</span> target, <span class="keyword">int</span> round)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (round == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (sum == target &amp;&amp; helper(A, <span class="number">0</span>, A.length - <span class="number">1</span>, visited, target, round - <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = st; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i] &amp;&amp; sum + A[i] &lt;= target) &#123;</span><br><span class="line">                visited[i] = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (helper(A, sum + A[i], i - <span class="number">1</span>, visited, target, round))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                visited[i] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode701-insertIntoaBianrySearchTree</title>
    <url>/2019/10/13/Leetcode701-insertIntoaBianrySearchTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the root node of a binary search tree (BST) and a value to be inserted into the tree, insert the value into the BST. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.</p>
<p>Note that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given the tree:</span><br><span class="line">        4</span><br><span class="line">       &#x2F; \</span><br><span class="line">      2   7</span><br><span class="line">     &#x2F; \</span><br><span class="line">    1   3</span><br><span class="line">And the value to insert: 5</span><br><span class="line">You can return this binary search tree:</span><br><span class="line"></span><br><span class="line">         4</span><br><span class="line">       &#x2F;   \</span><br><span class="line">      2     7</span><br><span class="line">     &#x2F; \   &#x2F;</span><br><span class="line">    1   3 5</span><br><span class="line">This tree is also valid:</span><br><span class="line"></span><br><span class="line">         5</span><br><span class="line">       &#x2F;   \</span><br><span class="line">      2     7</span><br><span class="line">     &#x2F; \   </span><br><span class="line">    1   3</span><br><span class="line">         \</span><br><span class="line">          4</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">insertIntoBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            root = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (val &lt; root.val) root.left = insertIntoBST(root.left, val);</span><br><span class="line">        <span class="keyword">if</span> (val &gt; root.val) root.right = insertIntoBST(root.right, val);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode713-subarrayProductLessThanK</title>
    <url>/2019/10/30/Leetcode713-subarrayProductLessThanK/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Your are given an array of positive integers nums.</p>
<p>Count and print the number of (contiguous) subarrays where the product of all the elements in the subarray is less than k.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [10, 5, 2, 6], k &#x3D; 100</span><br><span class="line">Output: 8</span><br><span class="line">Explanation: The 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6].</span><br><span class="line">Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>0 &lt; nums.length &lt;= 50000.</li>
<li>0 &lt; nums[i] &lt; 1000.</li>
<li>0 &lt;= k &lt; 10^6.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSubarrayProductLessThanK</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> product = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; nums.length)&#123;</span><br><span class="line">            product *= nums[j];</span><br><span class="line">            <span class="keyword">while</span>(i &lt;= j &amp;&amp; product &gt;= k)&#123;</span><br><span class="line">                product /= nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            res += j - i + <span class="number">1</span>;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode708-insertIntoASortedCircularLinkedList</title>
    <url>/2020/03/02/Leetcode708-insertIntoASortedCircularLinkedList/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a node from a Circular Linked List which is sorted in ascending order, write a function to insert a value insertVal into the list such that it remains a sorted circular list. The given node can be a reference to any single node in the list, and may not be necessarily the smallest value in the circular list.</p>
<p>If there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the circular list should remain sorted.</p>
<p>If the list is empty (i.e., given node is null), you should create a new single circular list and return the reference to that single node. Otherwise, you should return the original given node.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/01/19/example_1_before_65p.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [3,4,1], insertVal &#x3D; 2</span><br><span class="line">Output: [3,4,1,2]</span><br><span class="line">Explanation: In the figure above, there is a sorted circular list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list. The new node should be inserted between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3.</span><br></pre></td></tr></table></figure>
<p><img src="https://assets.leetcode.com/uploads/2019/01/19/example_1_after_65p.jpg" alt=""></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [], insertVal &#x3D; 1</span><br><span class="line">Output: [1]</span><br><span class="line">Explanation: The list is empty (given head is null). We create a new single circular list and return the reference to that single node.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [1], insertVal &#x3D; 0</span><br><span class="line">Output: [1,0]</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>0 &lt;= Number of Nodes &lt;= 5 * 10^4</li>
<li>-10^6 &lt;= Node.val &lt;= 10^6</li>
<li>-10^6 &lt;= insertVal &lt;= 10^6</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public Node next;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val, Node _next) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        next = _next;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">insert</span><span class="params">(Node head, <span class="keyword">int</span> insertVal)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Case A: Empty</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            Node temp = <span class="keyword">new</span> Node(insertVal);</span><br><span class="line">            temp.next = temp;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// Case B: Not Empty</span></span><br><span class="line">        Node cur = head;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.val &lt; cur.next.val)&#123;</span><br><span class="line"><span class="comment">// Case B1: there are two distinct nodes, still climbing</span></span><br><span class="line">                <span class="keyword">if</span> (insertVal &gt;= cur.val &amp;&amp; insertVal &lt;= cur.next.val)&#123;</span><br><span class="line">                    cur.next = <span class="keyword">new</span> Node(insertVal, cur.next);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cur.val &gt; cur.next.val)&#123;</span><br><span class="line"><span class="comment">// Case B2: there are two distinct nodes, back to the minmum node</span></span><br><span class="line">                <span class="keyword">if</span> (insertVal &gt;= cur.val || insertVal &lt;= cur.next.val)&#123;</span><br><span class="line">                    cur.next = <span class="keyword">new</span> Node(insertVal, cur.next);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cur.next == head)&#123;</span><br><span class="line"><span class="comment">// Case B3: all nodes in the list are the same</span></span><br><span class="line">                cur.next = <span class="keyword">new</span> Node(insertVal, cur.next);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode716-maxStack</title>
    <url>/2020/03/02/Leetcode716-maxStack/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a max stack that supports push, pop, top, peekMax and popMax.</p>
<ol>
<li>push(x) — Push element x onto stack.</li>
<li>pop() — Remove the element on top of the stack and return it.</li>
<li>top() — Get the element on the top.</li>
<li>peekMax() — Retrieve the maximum element in the stack.</li>
<li>popMax() — Retrieve the maximum element in the stack, and remove it. If you find more than one maximum elements, only remove the top-most one.</li>
</ol>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MaxStack stack &#x3D; new MaxStack();</span><br><span class="line">stack.push(5); </span><br><span class="line">stack.push(1);</span><br><span class="line">stack.push(5);</span><br><span class="line">stack.top(); -&gt; 5</span><br><span class="line">stack.popMax(); -&gt; 5</span><br><span class="line">stack.top(); -&gt; 1</span><br><span class="line">stack.peekMax(); -&gt; 5</span><br><span class="line">stack.pop(); -&gt; 1</span><br><span class="line">stack.top(); -&gt; 5</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>-1e7 &lt;= x &lt;= 1e7</li>
<li>Number of operations won’t exceed 10000.</li>
<li>The last four operations won’t be called when stack is empty.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; st;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stMax;</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stMax = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        st.push(x);</span><br><span class="line">        <span class="keyword">if</span> (stMax.isEmpty())</span><br><span class="line">            stMax.push(x);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (x &gt;= stMax.peek())</span><br><span class="line">                stMax.push(x);</span><br><span class="line">            <span class="keyword">else</span> stMax.push(stMax.peek());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stMax.pop();</span><br><span class="line">        <span class="keyword">return</span> st.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> st.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peekMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stMax.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">popMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; temp = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> max = stMax.peek();</span><br><span class="line">        <span class="keyword">while</span>(st.peek() != max)&#123;</span><br><span class="line">            temp.push(st.pop());</span><br><span class="line">            stMax.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        st.pop();</span><br><span class="line">        stMax.pop();    </span><br><span class="line">        <span class="keyword">while</span>(!temp.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">this</span>.push(temp.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MaxStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MaxStack obj = new MaxStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * int param_4 = obj.peekMax();</span></span><br><span class="line"><span class="comment"> * int param_5 = obj.popMax();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode723-candyCrash</title>
    <url>/2020/03/01/Leetcode723-candyCrash/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>This question is about implementing a basic elimination algorithm for Candy Crush.</p>
<p>Given a 2D integer array board representing the grid of candy, different positive integers board[i][j] represent different types of candies. A value of board[i][j] = 0 represents that the cell at position (i, j) is empty. The given board represents the state of the game following the player’s move. Now, you need to restore the board to a stable state by crushing candies according to the following rules:</p>
<ol>
<li>If three or more candies of the same type are adjacent vertically or horizontally, “crush” them all at the same time - these positions become empty.</li>
<li>After crushing all candies simultaneously, if an empty space on the board has candies on top of itself, then these candies will drop until they hit a candy or bottom at the same time. (No new candies will drop outside the top boundary.)</li>
<li>After the above steps, there may exist more candies that can be crushed. If so, you need to repeat the above steps.</li>
<li>If there does not exist more candies that can be crushed (ie. the board is stable), then return the current board.</li>
</ol>
<p>You need to perform the above rules until the board becomes stable, then return the current board.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">board &#x3D;</span><br><span class="line">[[110,5,112,113,114],[210,211,5,213,214],[310,311,3,313,314],[410,411,412,5,414],[5,1,512,3,3],[610,4,1,613,614],[710,1,2,713,714],[810,1,2,1,1],[1,1,2,2,2],[4,1,4,4,1014]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[110,0,0,0,114],[210,0,0,0,214],[310,0,0,113,314],[410,0,0,213,414],[610,211,112,313,614],[710,311,412,613,714],[810,411,512,713,1014]]</span><br></pre></td></tr></table></figure>
<p>Explanation:<br><img src="https://assets.leetcode.com/uploads/2018/10/12/candy_crush_example_2.png" alt=""></p>
<p><strong>Note:</strong></p>
<ul>
<li>The length of board will be in the range [3, 50].</li>
<li>The length of board[i] will be in the range [3, 50].</li>
<li>Each board[i][j] will initially start as an integer in the range [1, 200</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The idea is to traverse the entire matrix again and again to remove crush until no crush can be found.</p>
<p>For each traversal of the matrix, we only check two directions, rightward and downward. There is no need to check upward and leftward because they would have been checked from previous cells.</p>
<p>For each cell, if there are at least three candies of the same type rightward or downward, set them all to its negative value to mark them.</p>
<p>After each traversal, we need to remove all those negative values by setting them to 0, then let the rest drop down to their correct position. A easy way is to iterate through each column, for each column, move positive values to the bottom then set the rest to 0.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] candyCrush(<span class="keyword">int</span>[][] board) &#123;</span><br><span class="line">        <span class="keyword">if</span> (board == <span class="keyword">null</span> || board.length == <span class="number">0</span> || board[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> board;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> m = board.length;</span><br><span class="line">        <span class="keyword">int</span> n = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">while</span> (!isStable(board))&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> idx = m - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (board[i][j] &gt; <span class="number">0</span>) board[idx--][j] = board[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= idx; i++) board[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> board;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isStable</span><span class="params">(<span class="keyword">int</span>[][] board)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> cur = Math.abs(board[i][j]);</span><br><span class="line">                <span class="keyword">if</span> (cur == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; board[<span class="number">0</span>].length - <span class="number">2</span> &amp;&amp; cur == Math.abs(board[i][j + <span class="number">1</span>]) &amp;&amp; cur == Math.abs(board[i][j + <span class="number">2</span>]))&#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">int</span> temp = j;</span><br><span class="line">                    <span class="keyword">while</span>(temp &lt; board[<span class="number">0</span>].length &amp;&amp; Math.abs(board[i][temp]) == cur)&#123;</span><br><span class="line">                        board[i][temp] = -cur;</span><br><span class="line">                        temp++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (i &lt; board.length - <span class="number">2</span> &amp;&amp; cur == Math.abs(board[i + <span class="number">1</span>][j]) &amp;&amp; cur == Math.abs(board[i + <span class="number">2</span>][j]))&#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">int</span> temp = i;</span><br><span class="line">                    <span class="keyword">while</span>(temp &lt; board.length &amp;&amp; Math.abs(board[temp][j]) == cur)&#123;</span><br><span class="line">                        board[temp][j] = -cur;</span><br><span class="line">                        temp++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bloomberg</tag>
        <tag>Two Pointers</tag>
        <tag>Goolge</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode733-floodFill</title>
    <url>/2020/02/07/Leetcode733-floodFill/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>An image is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).</p>
<p>Given a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill, and a pixel value newColor, “flood fill” the image.</p>
<p>To perform a “flood fill”, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on. Replace the color of all of the aforementioned pixels with the newColor.</p>
<p>At the end, return the modified image.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">image &#x3D; [[1,1,1],[1,1,0],[1,0,1]]</span><br><span class="line">sr &#x3D; 1, sc &#x3D; 1, newColor &#x3D; 2</span><br><span class="line">Output: [[2,2,2],[2,2,0],[2,0,1]]</span><br><span class="line">Explanation: </span><br><span class="line">From the center of the image (with position (sr, sc) &#x3D; (1, 1)), all pixels connected </span><br><span class="line">by a path of the same color as the starting pixel are colored with the new color.</span><br><span class="line">Note the bottom corner is not colored 2, because it is not 4-directionally connected</span><br><span class="line">to the starting pixel.</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<p>The length of image and image[0] will be in the range [1, 50].<br>The given starting pixel will satisfy 0 &lt;= sr &lt; image.length and 0 &lt;= sc &lt; image[0].length.<br>The value of each color in image[i][j] and newColor will be an integer in [0, 65535].</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] direction = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] floodFill(<span class="keyword">int</span>[][] image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor) &#123;</span><br><span class="line">        <span class="keyword">if</span> (image.length== <span class="number">0</span> || image[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> image;</span><br><span class="line">        <span class="keyword">if</span> (image[sr][sc] == newColor) <span class="keyword">return</span> image;</span><br><span class="line">        helper(image, sr, sc, image[sr][sc], newColor);</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[][] image, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> old, <span class="keyword">int</span> color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (image[x][y] != old) <span class="keyword">return</span>;</span><br><span class="line">        image[x][y] = color;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; direction.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + direction[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ny = y + direction[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx &gt;=<span class="number">0</span> &amp;&amp; nx &lt; image.length &amp;&amp; ny &gt;=<span class="number">0</span> &amp;&amp; ny &lt; image[<span class="number">0</span>].length)</span><br><span class="line">                helper(image, nx, ny, old, color);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode739-dailyTemperatures</title>
    <url>/2019/09/25/Leetcode739-dailyTemperatures/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.</p>
<p>For example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].</p>
<p>Note: The length of temperatures will be in the range [1, 30000]. Each temperature will be an integer in the range [30, 100].</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">## Solution</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int[] dailyTemperatures(int[] T) &#123;</span><br><span class="line">        int[] res &#x3D; new int[T.length];</span><br><span class="line">        if (T &#x3D;&#x3D; null || T.length &#x3D;&#x3D; 0) return res;</span><br><span class="line">        </span><br><span class="line">        Stack&lt;Integer&gt; st &#x3D; new Stack&lt;&gt;();</span><br><span class="line">        for (int i &#x3D; T.length-1; i&gt;&#x3D;0; i--)&#123;</span><br><span class="line">            while (!st.empty() &amp;&amp; T[i] &gt;&#x3D; T[st.peek()])&#123;</span><br><span class="line">                st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            if (!st.empty() &amp;&amp; T[i] &lt; T[st.peek()]) </span><br><span class="line">                res[i] &#x3D; st.peek() - i;</span><br><span class="line">            else res[i] &#x3D; 0;</span><br><span class="line">            st.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode727-minimumWindowSubsequence</title>
    <url>/2020/03/16/Leetcode727-minimumWindowSubsequence/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given strings S and T, find the minimum (contiguous) substring W of S, so that T is a subsequence of W.</p>
<p>If there is no such window in S that covers all characters in T, return the empty string “”. If there are multiple such minimum-length windows, return the one with the left-most starting index.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">S &#x3D; &quot;abcdebdde&quot;, T &#x3D; &quot;bde&quot;</span><br><span class="line">Output: &quot;bcde&quot;</span><br><span class="line">Explanation: </span><br><span class="line">&quot;bcde&quot; is the answer because it occurs before &quot;bdde&quot; which has the same length.</span><br><span class="line">&quot;deb&quot; is not a smaller window because the elements of T in the window must occur in order.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>All the strings in the input will only contain lowercase letters.</li>
<li>The length of S will be in the range [1, 20000].</li>
<li>The length of T will be in the range [1, 100].</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">minWindow</span><span class="params">(String S, String T)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sidx = <span class="number">0</span>, tidx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> resStart = <span class="number">0</span>, resEnd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> resMin = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span>(sidx &lt; S.length())&#123;</span><br><span class="line">            <span class="keyword">if</span> (S.charAt(sidx) == T.charAt(tidx))&#123;</span><br><span class="line">                <span class="keyword">if</span> (tidx == T.length() - <span class="number">1</span>)&#123;</span><br><span class="line">                    end = sidx + <span class="number">1</span>;</span><br><span class="line">                    tidx--;</span><br><span class="line">                    <span class="keyword">while</span>(tidx &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                        sidx--;</span><br><span class="line">                        <span class="keyword">while</span> (S.charAt(sidx) != T.charAt(tidx)) </span><br><span class="line">                            sidx--;</span><br><span class="line">                        tidx--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(end - sidx &lt; resMin)&#123;</span><br><span class="line">                        resMin = end - sidx;</span><br><span class="line">                        resStart = sidx;</span><br><span class="line">                        resEnd = end;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                tidx++;                </span><br><span class="line">            &#125;</span><br><span class="line">            sidx++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> S.substring(resStart, resEnd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Sliding Window</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode740-deleteAndEarn</title>
    <url>/2019/10/14/Leetcode740-deleteAndEarn/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array nums of integers, you can perform operations on the array.</p>
<p>In each operation, you pick any nums[i] and delete it to earn nums[i] points. After, you must delete every element equal to nums[i] - 1 or nums[i] + 1.</p>
<p>You start with 0 points. Return the maximum number of points you can earn by applying such operations.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [3, 4, 2]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: </span><br><span class="line">Delete 4 to earn 4 points, consequently 3 is also deleted.</span><br><span class="line">Then, delete 2 to earn 2 points. 6 total points are earned.</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [2, 2, 3, 3, 3, 4]</span><br><span class="line">Output: 9</span><br><span class="line">Explanation: </span><br><span class="line">Delete 3 to earn 3 points, deleting both 2&#39;s and the 4.</span><br><span class="line">Then, delete 3 again to earn 3 points, and 3 again to earn 3 points.</span><br><span class="line">9 total points are earned.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteAndEarn</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10001</span>];</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10001</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums) count[num] += num;</span><br><span class="line">        dp[<span class="number">1</span>] = count[<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">2</span>] = Math.max(dp[<span class="number">1</span>], count[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; <span class="number">10001</span>; i++)&#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">2</span>] + count[i], dp[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">10000</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode746-minCostClimbingStairs</title>
    <url>/2020/02/22/Leetcode746-minCostClimbingStairs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>On a staircase, the i-th step has some non-negative cost cost[i] assigned (0 indexed).</p>
<p>Once you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: cost &#x3D; [10, 15, 20]</span><br><span class="line">Output: 15</span><br><span class="line">Explanation: Cheapest is start on cost[1], pay that cost and go to the top.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: cost &#x3D; [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: Cheapest is start on cost[0], and only step on 1s, skipping cost[3].</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(<span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cost == <span class="keyword">null</span> || cost.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[cost.length + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= cost.length; i++)</span><br><span class="line">            dp[i] = Math.min(dp[i-<span class="number">1</span>] + cost[i-<span class="number">1</span>], dp[i-<span class="number">2</span>] + cost[i-<span class="number">2</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[cost.length];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode752-openTheLock</title>
    <url>/2020/03/02/Leetcode752-openTheLock/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: ‘0’, ‘1’, ‘2’, ‘3’, ‘4’, ‘5’, ‘6’, ‘7’, ‘8’, ‘9’. The wheels can rotate freely and wrap around: for example we can turn ‘9’ to be ‘0’, or ‘0’ to be ‘9’. Each move consists of turning one wheel one slot.</p>
<p>The lock initially starts at ‘0000’, a string representing the state of the 4 wheels.</p>
<p>You are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.</p>
<p>Given a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: deadends &#x3D; [&quot;0201&quot;,&quot;0101&quot;,&quot;0102&quot;,&quot;1212&quot;,&quot;2002&quot;], target &#x3D; &quot;0202&quot;</span><br><span class="line">Output: 6</span><br><span class="line">Explanation:</span><br><span class="line">A sequence of valid moves would be &quot;0000&quot; -&gt; &quot;1000&quot; -&gt; &quot;1100&quot; -&gt; &quot;1200&quot; -&gt; &quot;1201&quot; -&gt; &quot;1202&quot; -&gt; &quot;0202&quot;.</span><br><span class="line">Note that a sequence like &quot;0000&quot; -&gt; &quot;0001&quot; -&gt; &quot;0002&quot; -&gt; &quot;0102&quot; -&gt; &quot;0202&quot; would be invalid,</span><br><span class="line">because the wheels of the lock become stuck after the display becomes the dead end &quot;0102&quot;.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: deadends &#x3D; [&quot;8888&quot;], target &#x3D; &quot;0009&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation:</span><br><span class="line">We can turn the last wheel in reverse to move from &quot;0000&quot; -&gt; &quot;0009&quot;.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: deadends &#x3D; [&quot;8887&quot;,&quot;8889&quot;,&quot;8878&quot;,&quot;8898&quot;,&quot;8788&quot;,&quot;8988&quot;,&quot;7888&quot;,&quot;9888&quot;], target &#x3D; &quot;8888&quot;</span><br><span class="line">Output: -1</span><br><span class="line">Explanation:</span><br><span class="line">We can&#39;t reach the target without getting stuck.</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: deadends &#x3D; [&quot;0000&quot;], target &#x3D; &quot;8888&quot;</span><br><span class="line">Output: -1</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>The length of deadends will be in the range [1, 500].</li>
<li>target will not be in the list deadends.</li>
<li>Every string in deadends and the string target will be a string of 4 digits from the 10,000 possibilities ‘0000’ to ‘9999’.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: Basic BFS, 180ms</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//     Basic method, 180ms</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">openLock</span><span class="params">(String[] deadends, String target)</span> </span>&#123;</span><br><span class="line">        Queue&lt;String&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; deads = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(deadends));</span><br><span class="line">        Set&lt;String&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        q.offer(<span class="string">"0000"</span>);</span><br><span class="line">        visited.add(<span class="string">"0000"</span>);</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="keyword">while</span>(size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String s = q.poll();</span><br><span class="line">                <span class="keyword">if</span>(deads.contains(s)) &#123;</span><br><span class="line">                    size --;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(s.equals(target)) <span class="keyword">return</span> level;</span><br><span class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder(s);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++) &#123;</span><br><span class="line">                    <span class="keyword">char</span> c = sb.charAt(i);</span><br><span class="line">                    String s1 = sb.substring(<span class="number">0</span>, i) + (c == <span class="string">'9'</span> ? <span class="number">0</span> : c - <span class="string">'0'</span> + <span class="number">1</span>) + sb.substring(i + <span class="number">1</span>);</span><br><span class="line">                    String s2 = sb.substring(<span class="number">0</span>, i) + (c == <span class="string">'0'</span> ? <span class="number">9</span> : c - <span class="string">'0'</span> - <span class="number">1</span>) + sb.substring(i + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(!visited.contains(s1) &amp;&amp; !deads.contains(s1)) &#123;</span><br><span class="line">                        q.offer(s1);</span><br><span class="line">                        visited.add(s1);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!visited.contains(s2) &amp;&amp; !deads.contains(s2)) &#123;</span><br><span class="line">                        q.offer(s2);</span><br><span class="line">                        visited.add(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                size --;</span><br><span class="line">            &#125;</span><br><span class="line">            level ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2: 2-end BFS, 60ms</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//     2-end method, 60ms. Search from two end in turn.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">openLock</span><span class="params">(String[] deadends, String target)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; begin = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; end = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Set&lt;String&gt; deads = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(deadends));</span><br><span class="line">        begin.add(<span class="string">"0000"</span>);</span><br><span class="line">        end.add(target);</span><br><span class="line">        <span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!begin.isEmpty() &amp;&amp; !end.isEmpty()) &#123;</span><br><span class="line">            Set&lt;String&gt; temp = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(String s : begin) &#123;</span><br><span class="line">                <span class="keyword">if</span>(end.contains(s)) <span class="keyword">return</span> level;</span><br><span class="line">                <span class="keyword">if</span>(deads.contains(s)) <span class="keyword">continue</span>;</span><br><span class="line">                deads.add(s);</span><br><span class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder(s);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++) &#123;</span><br><span class="line">                    <span class="keyword">char</span> c = sb.charAt(i);</span><br><span class="line">                    String s1 = sb.substring(<span class="number">0</span>, i) + (c == <span class="string">'9'</span> ? <span class="number">0</span> : c - <span class="string">'0'</span> + <span class="number">1</span>) + sb.substring(i + <span class="number">1</span>);</span><br><span class="line">                    String s2 = sb.substring(<span class="number">0</span>, i) + (c == <span class="string">'0'</span> ? <span class="number">9</span> : c - <span class="string">'0'</span> - <span class="number">1</span>) + sb.substring(i + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(!deads.contains(s1))</span><br><span class="line">                        temp.add(s1);</span><br><span class="line">                    <span class="keyword">if</span>(!deads.contains(s2))</span><br><span class="line">                        temp.add(s2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            level ++;</span><br><span class="line">            begin = end;</span><br><span class="line">            end = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>BFS</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode772-basicCalculatorIII</title>
    <url>/2019/10/04/Leetcode772-basicCalculatorIII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement a basic calculator to evaluate a simple expression string.</p>
<p>The expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .</p>
<p>The expression string contains only non-negative integers, +, -, *, / operators , open ( and closing parentheses ) and empty spaces . The integer division should truncate toward zero.</p>
<p>You may assume that the given expression is always valid. All intermediate results will be in the range of [-2147483648, 2147483647].</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;1 + 1&quot; &#x3D; 2</span><br><span class="line">&quot; 6-4 &#x2F; 2 &quot; &#x3D; 4</span><br><span class="line">&quot;2*(5+5*2)&#x2F;3+(6&#x2F;2+8)&quot; &#x3D; 21</span><br><span class="line">&quot;(2+6* 3+5- (3*14&#x2F;7+2)*5)+3&quot;&#x3D;-12</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//  More easy to understand</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        Queue&lt;Character&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            q.offer(c);</span><br><span class="line">        &#125;</span><br><span class="line">        q.offer(<span class="string">&#x27;+&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> cal(q);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">cal</span><span class="params">(Queue&lt;Character&gt; q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> sign = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = q.poll();</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(c)) &#123;</span><br><span class="line">                num = <span class="number">10</span> * num + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                num = cal(q);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (sign == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">                    stack.push(num);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                    stack.push(-num);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    stack.push(stack.pop() * num);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sign == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                    stack.push(stack.pop() / num);</span><br><span class="line">                &#125;</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">                sign = c;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            sum += stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//     public int calculate(String s) &#123;</span></span><br><span class="line"><span class="comment">//         int l1 = 0, o1 = 1;</span></span><br><span class="line"><span class="comment">//         int l2 = 1, o2 = 1;</span></span><br><span class="line"><span class="comment">//         Stack&lt;Integer&gt; st = new Stack&lt;&gt;();</span></span><br><span class="line"><span class="comment">//         int i = 0;</span></span><br><span class="line"><span class="comment">//         while (i &lt; s.length())&#123;</span></span><br><span class="line"><span class="comment">//             char c = s.charAt(i);</span></span><br><span class="line"><span class="comment">//             if (Character.isDigit(c))&#123;</span></span><br><span class="line"><span class="comment">//                 int num = c - &#x27;0&#x27;;</span></span><br><span class="line"><span class="comment">//                 while(i+1&lt;s.length() &amp;&amp; Character.isDigit(s.charAt(i+1)))&#123;</span></span><br><span class="line"><span class="comment">//                     num = num * 10 + (s.charAt(++i) - &#x27;0&#x27;);</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//                 l2 = (o2 == 1 ? l2 * num : l2 / num);</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             else if (c == &#x27;(&#x27;)&#123;</span></span><br><span class="line"><span class="comment">//                 st.push(l1);</span></span><br><span class="line"><span class="comment">//                 st.push(o1);</span></span><br><span class="line"><span class="comment">//                 st.push(l2);</span></span><br><span class="line"><span class="comment">//                 st.push(o2);</span></span><br><span class="line"><span class="comment">//                 l1 = 0; o1 = 1;</span></span><br><span class="line"><span class="comment">//                 l2 = 1; o2 = 1;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             else if (c == &#x27;)&#x27;)&#123;</span></span><br><span class="line"><span class="comment">//                 int num = l1 + o1 * l2;</span></span><br><span class="line"><span class="comment">//                 o2 = st.pop(); l2 = st.pop();</span></span><br><span class="line"><span class="comment">//                 o1 = st.pop(); l1 = st.pop();</span></span><br><span class="line"><span class="comment">//                 l2 = (o2 == 1 ? l2 * num : l2 / num);</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             else if (c == &#x27;*&#x27; || c == &#x27;/&#x27;)&#123;</span></span><br><span class="line"><span class="comment">//                o2 = (c == &#x27;*&#x27; ? 1 : -1); </span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             else if (c == &#x27;+&#x27; || c == &#x27;-&#x27;)&#123;</span></span><br><span class="line"><span class="comment">//                 if (c == &#x27;-&#x27; &amp;&amp; (i == 0 || s.charAt(i - 1) == &#x27;(&#x27;)) &#123;</span></span><br><span class="line"><span class="comment">//                     o1 = -1;</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//                 else&#123;</span></span><br><span class="line"><span class="comment">//                     l1 = l1 + o1 * l2;</span></span><br><span class="line"><span class="comment">//                     o1 = (c == &#x27;+&#x27; ? 1 : -1);</span></span><br><span class="line">                </span><br><span class="line"><span class="comment">//                     l2 = 1;</span></span><br><span class="line"><span class="comment">//                     o2 = 1;   </span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             i++;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return l1+o1*l2;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time Complex: $O(N)$ for both above</p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>Amazon</tag>
        <tag>String</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode760-findAnagramMappings</title>
    <url>/2020/03/16/Leetcode760-findAnagramMappings/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two lists Aand B, and B is an anagram of A. B is an anagram of A means B is made by randomizing the order of the elements in A.</p>
<p>We want to find an index mapping P, from A to B. A mapping P[i] = j means the ith element in A appears in B at index j.</p>
<p>These lists A and B may contain duplicates. If there are multiple answers, output any of them.</p>
<p>For example, given<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A &#x3D; [12, 28, 46, 32, 50]</span><br><span class="line">B &#x3D; [50, 12, 32, 46, 28]</span><br></pre></td></tr></table></figure><br>We should return<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 4, 3, 2, 0]</span><br></pre></td></tr></table></figure><br>as P[0] = 1 because the 0th element of A appears at B[1], and P[1] = 4 because the 1st element of A appears at B[4], and so on.</p>
<p><strong>Note:</strong></p>
<ol>
<li>A, B have equal lengths in range [1, 100].</li>
<li>A[i], B[i] are integers in range [0, 10^5].</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] anagramMappings(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B) &#123;</span><br><span class="line">        <span class="keyword">if</span> (B == <span class="keyword">null</span> || A == <span class="keyword">null</span> || B.length == <span class="number">0</span> || A.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; B.length; i++)</span><br><span class="line">            map.put(B[i], i);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length; i++)&#123;</span><br><span class="line">            res[i] = map.get(A[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode780-reachingPoints</title>
    <url>/2019/09/26/Leetcode780-reachingPoints/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A move consists of taking a point (x, y) and transforming it to either (x, x+y) or (x+y, y).</p>
<p>Given a starting point (sx, sy) and a target point (tx, ty), return True if and only if a sequence of moves exists to transform the point (sx, sy) to (tx, ty). Otherwise, return False.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: sx &#x3D; 1, sy &#x3D; 1, tx &#x3D; 3, ty &#x3D; 5</span><br><span class="line">Output: True</span><br><span class="line">Explanation:</span><br><span class="line">One series of moves that transforms the starting point to the target is:</span><br><span class="line">(1, 1) -&gt; (1, 2)</span><br><span class="line">(1, 2) -&gt; (3, 2)</span><br><span class="line">(3, 2) -&gt; (3, 5)</span><br><span class="line"></span><br><span class="line">Input: sx &#x3D; 1, sy &#x3D; 1, tx &#x3D; 2, ty &#x3D; 2</span><br><span class="line">Output: False</span><br><span class="line"></span><br><span class="line">Input: sx &#x3D; 1, sy &#x3D; 1, tx &#x3D; 1, ty &#x3D; 1</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<p>sx, sy, tx, ty will all be integers in the range [1, 10^9].</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">reachingPoints</span><span class="params">(<span class="keyword">int</span> sx, <span class="keyword">int</span> sy, <span class="keyword">int</span> tx, <span class="keyword">int</span> ty)</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">while</span> (sx &lt; tx &amp;&amp; sy &lt; ty)</span><br><span class="line">            <span class="keyword">if</span> (tx &lt; ty)</span><br><span class="line">                ty %= tx;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tx %= ty;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(sx == tx &amp;&amp; sy &lt;= ty &amp;&amp; (ty - sy) % sx == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">        </span><br><span class="line">         <span class="keyword">return</span> sy == ty &amp;&amp; sx &lt;= tx &amp;&amp; (tx - sx) % sy == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode797-allPathsFromSourceToTarget</title>
    <url>/2020/03/01/Leetcode797-allPathsFromSourceToTarget/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a directed, acyclic graph of N nodes.  Find all possible paths from node 0 to node N-1, and return them in any order.</p>
<p>The graph is given as follows:  the nodes are 0, 1, …, graph.length - 1.  graph[i] is a list of all nodes j for which the edge (i, j) exists.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input: [[1,2], [3], [3], []] </span><br><span class="line">Output: [[0,1,3],[0,2,3]] </span><br><span class="line">Explanation: The graph looks like this:</span><br><span class="line">0---&gt;1</span><br><span class="line">|    |</span><br><span class="line">v    v</span><br><span class="line">2---&gt;3</span><br><span class="line">There are two paths: 0 -&gt; 1 -&gt; 3 and 0 -&gt; 2 -&gt; 3.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>The number of nodes in the graph will be in the range [2, 15].</li>
<li>You can print different paths in any order, but you should keep the order of nodes inside one path.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; allPathsSourceTarget(<span class="keyword">int</span>[][] graph) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (graph == <span class="keyword">null</span> || graph.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        helper(graph, res, <span class="keyword">new</span> ArrayList&lt;Integer&gt;(Arrays.asList(<span class="number">0</span>)), <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[][] graph, List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; cur, <span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pos == graph.length - <span class="number">1</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;(cur));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> to: graph[pos])&#123;</span><br><span class="line">            cur.add(to);</span><br><span class="line">            helper(graph, res, cur, to);</span><br><span class="line">            cur.remove(cur.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Bloomberg</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode794-validTicTacToeState</title>
    <url>/2019/10/21/Leetcode794-validTicTacToeState/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A Tic-Tac-Toe board is given as a string array board. Return True if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.</p>
<p>The board is a 3 x 3 array, and consists of characters “ “, “X”, and “O”.  The “ “ character represents an empty square.</p>
<p>Here are the rules of Tic-Tac-Toe:</p>
<ul>
<li>Players take turns placing characters into empty squares (“ “).</li>
<li>The first player always places “X” characters, while the second player always places “O” characters.</li>
<li>“X” and “O” characters are always placed into empty squares, never filled ones.</li>
<li>The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.</li>
<li>The game also ends if all squares are non-empty.</li>
<li>No more moves can be played if the game is over.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: board &#x3D; [&quot;O  &quot;, &quot;   &quot;, &quot;   &quot;]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: The first player always plays &quot;X&quot;.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: board &#x3D; [&quot;XOX&quot;, &quot; X &quot;, &quot;   &quot;]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Players take turns making moves.</span><br><span class="line"></span><br><span class="line">Example 3:</span><br><span class="line">Input: board &#x3D; [&quot;XXX&quot;, &quot;   &quot;, &quot;OOO&quot;]</span><br><span class="line">Output: false</span><br><span class="line"></span><br><span class="line">Example 4:</span><br><span class="line">Input: board &#x3D; [&quot;XOX&quot;, &quot;O O&quot;, &quot;XOX&quot;]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<p>board is a length-3 array of strings, where each string board[i] has length 3.<br>Each board[i][j] is a character in the set {“ “, “X”, “O”}.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validTicTacToe</span><span class="params">(String[] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board.length != <span class="number">3</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> numx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> numo = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] rows = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span>[] cols = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span> d1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> d2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String s: board)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s.length() != <span class="number">3</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">int</span> col = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> ch: s.toCharArray())&#123;</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'X'</span>)&#123;</span><br><span class="line">                    numx++;</span><br><span class="line">                    rows[row]++;</span><br><span class="line">                    cols[col]++;</span><br><span class="line">                    <span class="keyword">if</span> (row == col) d1++;</span><br><span class="line">                    <span class="keyword">if</span> (row + col == <span class="number">2</span>) d2++;</span><br><span class="line">                &#125;               </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'O'</span>)&#123;</span><br><span class="line">                    numo++;</span><br><span class="line">                    rows[row]--;</span><br><span class="line">                    cols[col]--;</span><br><span class="line">                    <span class="keyword">if</span> (row == col) d1--;</span><br><span class="line">                    <span class="keyword">if</span> (row + col == <span class="number">2</span>) d2--;</span><br><span class="line">                &#125;</span><br><span class="line">                col++;</span><br><span class="line">            &#125;</span><br><span class="line">            row++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (numx &lt; numo) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (numx - numo &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> p1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> p2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (rows[i] == <span class="number">3</span>) p1++;</span><br><span class="line">            <span class="keyword">if</span> (cols[i] == <span class="number">3</span>) p1++;        </span><br><span class="line">            <span class="keyword">if</span> (rows[i] == -<span class="number">3</span>) p2++;</span><br><span class="line">            <span class="keyword">if</span> (cols[i] == -<span class="number">3</span>) p2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d1 == <span class="number">3</span>) p1++;</span><br><span class="line">        <span class="keyword">if</span> (d2 == <span class="number">3</span>) p1++;</span><br><span class="line">        <span class="keyword">if</span> (d1 == -<span class="number">3</span>) p2++;</span><br><span class="line">        <span class="keyword">if</span> (d2 == -<span class="number">3</span>) p2++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p1 == <span class="number">2</span> &amp;&amp; p2 == <span class="number">0</span> &amp;&amp; numx+numo == <span class="number">9</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (p1 &gt; <span class="number">1</span> || p2 &gt; <span class="number">1</span> || (p1 == <span class="number">1</span> &amp;&amp; p2 == <span class="number">1</span>) || (p1 == <span class="number">1</span> &amp;&amp; numx == numo) || (p2 == <span class="number">1</span> &amp;&amp; numx &gt; numo)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Microsoft</tag>
        <tag>Math</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode763-partitionLabels</title>
    <url>/2019/10/07/Leetcode763-partitionLabels/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A string S of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: S &#x3D; &quot;ababcbacadefegdehijhklij&quot;</span><br><span class="line">Output: [9,7,8]</span><br><span class="line">Explanation:</span><br><span class="line">The partition is &quot;ababcbaca&quot;, &quot;defegde&quot;, &quot;hijhklij&quot;.</span><br><span class="line">This is a partition so that each letter appears in at most one part.</span><br><span class="line">A partition like &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; is incorrect, because it splits S into less parts.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li>S will have length in range [1, 500].</li>
<li>S will consist of lowercase letters (‘a’ to ‘z’) only.</li>
<li><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">partitionLabels</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (S == <span class="keyword">null</span> || S.length() == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] index = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length(); i++)&#123;</span><br><span class="line">            index[S.charAt(i) - <span class="string">'a'</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length(); i++)&#123;</span><br><span class="line">            end = Math.max(end, index[S.charAt(i) - <span class="string">'a'</span>]);</span><br><span class="line">            <span class="keyword">if</span> (end == i)&#123;</span><br><span class="line">                res.add(end - start + <span class="number">1</span>);</span><br><span class="line">                start = end + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Two Pointers</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode801-minimumSwapsToMakeSequencesIncreasing</title>
    <url>/2020/04/07/Leetcode801-minimumSwapsToMakeSequencesIncreasing/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We have two integer sequences A and B of the same non-zero length.</p>
<p>We are allowed to swap elements A[i] and B[i].  Note that both elements are in the same index position in their respective sequences.</p>
<p>At the end of some number of swaps, A and B are both strictly increasing.  (A sequence is strictly increasing if and only if A[0] &lt; A[1] &lt; A[2] &lt; … &lt; A[A.length - 1].)</p>
<p>Given A and B, return the minimum number of swaps to make both sequences strictly increasing.  It is guaranteed that the given input always makes it possible.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A &#x3D; [1,3,5,4], B &#x3D; [1,2,3,7]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: </span><br><span class="line">Swap A[3] and B[3].  Then the sequences are:</span><br><span class="line">A &#x3D; [1, 3, 5, 7] and B &#x3D; [1, 2, 3, 4]</span><br><span class="line">which are both strictly increasing.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>A, B are arrays with the same length, and that length will be in the range [1, 1000].</li>
<li>A[i], B[i] are integer values in the range [0, 2000].<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2>swap[n] means the minimum swaps to make the A[i] and B[i] sequences increasing for 0 &lt;= i &lt;= n in condition that we swap A[n] and B[n]<br>not_swap[n] is the same with A[n] and B[n] not swapped.</li>
</ul>
<ol>
<li><p>A[i - 1] &lt; A[i] &amp;&amp; B[i - 1] &lt; B[i]. In this case, if we want to keep A and B increasing before the index i, can only have two choices.<br>-&gt; 1.1 don’t swap at (i-1) and don’t swap at i, we can get not_swap[i] = not_swap[i-1]<br>-&gt; 1.2 swap at (i-1) and swap at i, we can get swap[i] = swap[i-1]+1<br>if swap at (i-1) and do not swap at i, we can not guarantee A and B increasing.</p>
</li>
<li><p>A[i-1] &lt; B[i] &amp;&amp; B[i-1] &lt; A[i]. In this case, if we want to keep A and B increasing before the index i, can only have two choices.<br>-&gt; 2.1 swap at (i-1) and do not swap at i, we can get notswap[i] = Math.min(swap[i-1], notswap[i] )<br>-&gt; 2.2 do not swap at (i-1) and swap at i, we can get swap[i]=Math.min(notswap[i-1]+1, swap[i])</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minSwap</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] swap = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">        <span class="keyword">int</span>[] not_swap = <span class="keyword">new</span> <span class="keyword">int</span>[B.length];</span><br><span class="line">        swap[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; A.length; i++)&#123;</span><br><span class="line">            swap[i] = Integer.MAX_VALUE;</span><br><span class="line">            not_swap[i] = Integer.MAX_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; A.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i - <span class="number">1</span>] &lt; A[i] &amp;&amp; B[i - <span class="number">1</span>] &lt; B[i])&#123;</span><br><span class="line">                not_swap[i] = not_swap[i - <span class="number">1</span>];</span><br><span class="line">                swap[i] = swap[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (A[i - <span class="number">1</span>] &lt; B[i] &amp;&amp; B[i - <span class="number">1</span>] &lt; A[i])&#123;</span><br><span class="line">                not_swap[i] = Math.min(not_swap[i], swap[i - <span class="number">1</span>]);</span><br><span class="line">                swap[i] = Math.min(swap[i], not_swap[i - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Math.min(swap[A.length - <span class="number">1</span>], not_swap[A.length - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode787-cheapestFlightsWithinKStops</title>
    <url>/2020/03/29/Leetcode787-cheapestFlightsWithinKStops/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are n cities connected by m flights. Each flight starts from city u and arrives at v with a price w.</p>
<p>Now given all the cities and flights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">n &#x3D; 3, edges &#x3D; [[0,1,100],[1,2,100],[0,2,500]]</span><br><span class="line">src &#x3D; 0, dst &#x3D; 2, k &#x3D; 1</span><br><span class="line">Output: 200</span><br><span class="line">Explanation: </span><br><span class="line">The graph looks like this:</span><br></pre></td></tr></table></figure><br><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The cheapest price from city 0 to city 2 with at most 1 stop costs 200, as marked red in the picture.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">n &#x3D; 3, edges &#x3D; [[0,1,100],[1,2,100],[0,2,500]]</span><br><span class="line">src &#x3D; 0, dst &#x3D; 2, k &#x3D; 0</span><br><span class="line">Output: 500</span><br><span class="line">Explanation: </span><br><span class="line">The graph looks like this:</span><br></pre></td></tr></table></figure><br><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The cheapest price from city 0 to city 2 with at most 0 stop costs 500, as marked blue in the picture.</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ul>
<li>The number of nodes n will be in range [1, 100], with nodes labeled from 0 to n - 1.</li>
<li>The size of flights will be in range [0, n * (n - 1) / 2].</li>
<li>The format of each flight will be (src, dst, price).</li>
<li>The price of each flight will be in the range [1, 10000].</li>
<li>k is in the range of [0, n - 1].</li>
<li>There will not be any duplicated flights or self cycles.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// It happen to be the same idea of Dijkstra's algorithm, but we need to keep the path.</span></span><br><span class="line"><span class="comment">// It could not need visited, here "k" limited the time we can visit a single node that it wont go into an infinite loop. (and the n in range[1,100]), but will be slower.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCheapestPrice</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] flights, <span class="keyword">int</span> src, <span class="keyword">int</span> dst, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Map&lt;Integer, Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//         construct map</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] flight: flights)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(flight[<span class="number">0</span>]))</span><br><span class="line">                map.put(flight[<span class="number">0</span>], <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">            map.get(flight[<span class="number">0</span>]).put(flight[<span class="number">1</span>], flight[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//      used priorityqueue to store distances</span></span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> b[])</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        pq.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, src, K + <span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//         Visited set</span></span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span>[] first = pq.poll();</span><br><span class="line">            <span class="keyword">int</span> price = first[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> city = first[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> stops = first[<span class="number">2</span>];</span><br><span class="line">            set.add(city);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (city == dst)</span><br><span class="line">                <span class="keyword">return</span> price;</span><br><span class="line">            <span class="keyword">if</span> (stops &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                Map&lt;Integer, Integer&gt; adj = map.getOrDefault(city, <span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> a: adj.keySet())&#123;</span><br><span class="line">                    <span class="keyword">if</span> (!set.contains(a))</span><br><span class="line">                        pq.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;adj.get(a) + price, a, stops - <span class="number">1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode809-expressWords</title>
    <url>/2020/04/07/Leetcode809-expressWords/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Sometimes people repeat letters to represent extra feeling, such as “hello” -&gt; “heeellooo”, “hi” -&gt; “hiiii”.  In these strings like “heeellooo”, we have groups of adjacent letters that are all the same:  “h”, “eee”, “ll”, “ooo”.</p>
<p>For some given string S, a query word is stretchy if it can be made to be equal to S by any number of applications of the following extension operation: choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is 3 or more.</p>
<p>For example, starting with “hello”, we could do an extension on the group “o” to get “hellooo”, but we cannot get “helloo” since the group “oo” has size less than 3.  Also, we could do another extension like “ll” -&gt; “lllll” to get “helllllooo”.  If S = “helllllooo”, then the query word “hello” would be stretchy because of these two extension operations: query = “hello” -&gt; “hellooo” -&gt; “helllllooo” = S.</p>
<p>Given a list of query words, return the number of words that are stretchy. </p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">S &#x3D; &quot;heeellooo&quot;</span><br><span class="line">words &#x3D; [&quot;hello&quot;, &quot;hi&quot;, &quot;helo&quot;]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: </span><br><span class="line">We can extend &quot;e&quot; and &quot;o&quot; in the word &quot;hello&quot; to get &quot;heeellooo&quot;.</span><br><span class="line">We can&#39;t extend &quot;helo&quot; to get &quot;heeellooo&quot; because the group &quot;ll&quot; is not size 3 or more.</span><br></pre></td></tr></table></figure>
<p><strong>Notes:</strong></p>
<ul>
<li>0 &lt;= len(S) &lt;= 100.</li>
<li>0 &lt;= len(words) &lt;= 100.</li>
<li>0 &lt;= len(words[i]) &lt;= 100.</li>
<li>S and all words in words consist only of lowercase letters</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. If S[i] == W[j], i++, j++</span></span><br><span class="line"><span class="comment">2. If S[i - 2] == S[i - 1] == S[i] or S[i - 1] == S[i] == S[i + 1], i++</span></span><br><span class="line"><span class="comment">3. return false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">expressiveWords</span><span class="params">(String S, String[] words)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String word: words)</span><br><span class="line">            <span class="keyword">if</span> (check(S, word)) res++;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(String S, String word)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; S.length())&#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; word.length() &amp;&amp; S.charAt(i) == word.charAt(j))&#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; <span class="number">1</span> &amp;&amp; S.charAt(i) == S.charAt(i - <span class="number">1</span>) &amp;&amp; S.charAt(i - <span class="number">2</span>) == S.charAt(i))&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; i &lt; S.length() - <span class="number">1</span> &amp;&amp; S.charAt(i) == S.charAt(i - <span class="number">1</span>) &amp;&amp; S.charAt(i) == S.charAt(i + <span class="number">1</span>))&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j == word.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode813-largestSumOfAverages</title>
    <url>/2020/03/29/Leetcode813-largestSumOfAverages/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We partition a row of numbers A into at most K adjacent (non-empty) groups, then our score is the sum of the average of each group. What is the largest score we can achieve?</p>
<p>Note that our partition must use every number in A, and that scores are not necessarily integers.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">A &#x3D; [9,1,2,3,9]</span><br><span class="line">K &#x3D; 3</span><br><span class="line">Output: 20</span><br><span class="line">Explanation: </span><br><span class="line">The best choice is to partition A into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) &#x2F; 3 + 9 &#x3D; 20.</span><br><span class="line">We could have also partitioned A into [9, 1], [2], [3, 9], for example.</span><br><span class="line">That partition would lead to a score of 5 + 2 + 6 &#x3D; 13, which is worse.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= A.length &lt;= 100.</li>
<li>1 &lt;= A[i] &lt;= 10000.</li>
<li>1 &lt;= K &lt;= A.length.</li>
<li>Answers within 10^-6 of the correct answer will be accepted as correct.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// search return the result for n first numbers to k groups.</span></span><br><span class="line"><span class="comment">// Time complexity: O(KN^2)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">largestSumOfAverages</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = A.length;</span><br><span class="line">        <span class="keyword">double</span>[][] memo = <span class="keyword">new</span> <span class="keyword">double</span>[N+<span class="number">1</span>][N+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">double</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            cur += A[i];</span><br><span class="line">            memo[i + <span class="number">1</span>][<span class="number">1</span>] = cur / (i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> search(N, K, A, memo);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span>[] A, <span class="keyword">double</span>[][] memo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (memo[n][k] &gt; <span class="number">0</span>) <span class="keyword">return</span> memo[n][k];</span><br><span class="line">        <span class="keyword">if</span> (n &lt; k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">            cur += A[i];</span><br><span class="line">            memo[n][k] = Math.max(memo[n][k], search(i, k - <span class="number">1</span>, A, memo) + cur / (n - i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> memo[n][k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode819-mostCommonWord</title>
    <url>/2019/10/07/Leetcode819-mostCommonWord/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a paragraph and a list of banned words, return the most frequent word that is not in the list of banned words.  It is guaranteed there is at least one word that isn’t banned, and that the answer is unique.</p>
<p>Words in the list of banned words are given in lowercase, and free of punctuation.  Words in the paragraph are not case sensitive.  The answer is in lowercase.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">paragraph &#x3D; &quot;Bob hit a ball, the hit BALL flew far after it was hit.&quot;</span><br><span class="line">banned &#x3D; [&quot;hit&quot;]</span><br><span class="line">Output: &quot;ball&quot;</span><br><span class="line">Explanation: </span><br><span class="line">&quot;hit&quot; occurs 3 times, but it is a banned word.</span><br><span class="line">&quot;ball&quot; occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. </span><br><span class="line">Note that words in the paragraph are not case sensitive,</span><br><span class="line">that punctuation is ignored (even if adjacent to words, such as &quot;ball,&quot;), </span><br><span class="line">and that &quot;hit&quot; isn&#39;t the answer even though it occurs more because it is banned.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= paragraph.length &lt;= 1000.</li>
<li>0 &lt;= banned.length &lt;= 100.</li>
<li>1 &lt;= banned[i].length &lt;= 10.</li>
<li>The answer is unique, and written in lowercase (even if its occurrences in paragraph may have uppercase symbols, and even if it is a proper noun.)</li>
<li>paragraph only consists of letters, spaces, or the punctuation symbols !?’,;.</li>
<li>There are no hyphens or hyphenated words.</li>
<li>Words only consist of letters, never apostrophes or other punctuation symbols.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// public String mostCommonWord(String p, String[] banned) &#123;</span></span><br><span class="line">    <span class="comment">//     Set&lt;String&gt; ban = new HashSet&lt;&gt;(Arrays.asList(banned));</span></span><br><span class="line">    <span class="comment">//     Map&lt;String, Integer&gt; count = new HashMap&lt;&gt;();</span></span><br><span class="line">    <span class="comment">//     String[] words = p.replaceAll("\\W+" , " ").toLowerCase().split("\\s+");</span></span><br><span class="line">    <span class="comment">//     for (String w : words) if (!ban.contains(w)) count.put(w, count.getOrDefault(w, 0) + 1);</span></span><br><span class="line">    <span class="comment">//     return Collections.max(count.entrySet(), Map.Entry.comparingByValue()).getKey();</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">mostCommonWord</span><span class="params">(String paragraph, String[] banned)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (paragraph == <span class="keyword">null</span> || paragraph.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String st: banned) set.add(st);</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        String p = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : paragraph.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isLowerCase(c) || Character.isUpperCase(c))&#123;</span><br><span class="line">                p += c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p.length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                p = p.toLowerCase();</span><br><span class="line">                map.put(p, map.getOrDefault(p, <span class="number">0</span>)+<span class="number">1</span>);    </span><br><span class="line">                p = <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            p = p.toLowerCase();</span><br><span class="line">            map.put(p, map.getOrDefault(p, <span class="number">0</span>)+<span class="number">1</span>);    </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> max = -<span class="number">1</span>;</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String s: map.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; map.get(s) &amp;&amp; !set.contains(s))&#123;</span><br><span class="line">                max = map.get(s);</span><br><span class="line">                res = s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode846-handOfStraights</title>
    <url>/2020/04/07/Leetcode846-handOfStraights/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Alice has a hand of cards, given as an array of integers.</p>
<p>Now she wants to rearrange the cards into groups so that each group is size W, and consists of W consecutive cards.</p>
<p>Return true if and only if she can.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: hand &#x3D; [1,2,3,6,2,3,4,7,8], W &#x3D; 3</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Alice&#39;s hand can be rearranged as [1,2,3],[2,3,4],[6,7,8].</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: hand &#x3D; [1,2,3,4,5], W &#x3D; 4</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Alice&#39;s hand can&#39;t be rearranged into groups of 4.</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>1 &lt;= hand.length &lt;= 10000</li>
<li>0 &lt;= hand[i] &lt;= 10^9</li>
<li>1 &lt;= W &lt;= hand.length</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: Basic</strong></p>
<ol>
<li>Count number of different cards to a map c</li>
<li>Loop from the smallest card number.</li>
<li>Everytime we meet a new card i, we cut off i ~ i + W - 1 from the counter.</li>
</ol>
<p><strong>Time Complexity:</strong> <script type="math/tex">O(MlogM + MW)</script></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNStraightHand</span><span class="params">(<span class="keyword">int</span>[] hand, <span class="keyword">int</span> W)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> card: hand)</span><br><span class="line">            map.put(card, map.getOrDefault(card, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> card: map.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(card) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = W - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (map.getOrDefault(card + i, <span class="number">0</span>) &lt; map.get(card)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    map.put(card + i, map.get(card + i) - map.get(card));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2: Improved</strong></p>
<ol>
<li>Count number of different cards to a map c</li>
<li>Cur represent current open straight groups.</li>
<li>In a deque start, we record the number of opened a straight group.</li>
<li>Loop from the smallest card number.</li>
</ol>
<p><strong>Time Complexity:</strong> <script type="math/tex">O(MlogM + N)</script></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNStraightHand</span><span class="params">(<span class="keyword">int</span>[] hand, <span class="keyword">int</span> W)</span> </span>&#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> card: hand)</span><br><span class="line">            map.put(card, map.getOrDefault(card, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        Queue&lt;Integer&gt; start = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> pre = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> card: map.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur &gt; <span class="number">0</span> &amp;&amp; card &gt; pre + <span class="number">1</span> || cur &gt; map.get(card)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            start.add(map.get(card) - cur);</span><br><span class="line">            pre = card;</span><br><span class="line">            cur = map.get(card);</span><br><span class="line">            <span class="keyword">if</span> (start.size() == W) cur -= start.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 3: Fastest</strong></p>
<p><strong>Time Complexity:</strong> <script type="math/tex">O(N)</script>, overall each element will be visited twice.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPossibleDivide</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums.length % k != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; freqMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) freqMap.put(num, freqMap.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!freqMap.containsKey(nums[i])) <span class="keyword">continue</span>;    </span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Find the start of the sequence of consecutive numbers that nums[i] belongs to.</span></span><br><span class="line">            <span class="keyword">int</span> start = nums[i];</span><br><span class="line">            <span class="keyword">while</span> (freqMap.containsKey(start - <span class="number">1</span>)) &#123;</span><br><span class="line">                start--;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Keep creating consecutive sequences of k numbers.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> m = start; m &lt;= nums[i]; ++m) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!freqMap.containsKey(m)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> numOccurrences = freqMap.get(m);    <span class="comment">// There must be this many sequences of length k that start with m.</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (freqMap.containsKey(m + j) &amp;&amp; numOccurrences &lt;= freqMap.get(m + j)) &#123;</span><br><span class="line">                        freqMap.put(m + j, freqMap.get(m + j) - numOccurrences);</span><br><span class="line">                        <span class="keyword">if</span> (freqMap.get(m + j) == <span class="number">0</span>) freqMap.remove(m + j);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;   <span class="comment">// We can&#x27;t create numOccurrences sequences of consecutive numbers starting at m.</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Array</tag>
        <tag>Hash Table</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode912-sortAnArray</title>
    <url>/2020/03/02/Leetcode912-sortAnArray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers nums, sort the array in ascending order.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [5,2,3,1]</span><br><span class="line">Output: [1,2,3,5]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [5,1,1,2,0,0]</span><br><span class="line">Output: [0,0,1,1,2,5]</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= nums.length &lt;= 50000</li>
<li>-50000 &lt;= nums[i] &lt;= 50000</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">sortArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// selectionSort(nums);</span></span><br><span class="line">        </span><br><span class="line">        quickSort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// mergeSort(nums, 0, nums.length - 1);</span></span><br><span class="line">        </span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums) res.add(num);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> minIdx = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[minIdx])&#123;</span><br><span class="line">                    minIdx = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">            nums[i] = nums[minIdx];</span><br><span class="line">            nums[minIdx] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> p = left + random.nextInt(right - left + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> temp = nums[p];</span><br><span class="line">        nums[p] = nums[left];</span><br><span class="line">        nums[left] = temp;</span><br><span class="line">        <span class="keyword">int</span> i = left;</span><br><span class="line">        <span class="keyword">int</span> j = right;</span><br><span class="line">        <span class="keyword">int</span> x = nums[i];</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[j] &gt; x) j--;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; nums[i] &lt;= x) i++;</span><br><span class="line">            nums[j] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        nums[i] = x;</span><br><span class="line">        quickSort(nums, left, i - <span class="number">1</span>);</span><br><span class="line">        quickSort(nums, i + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] cur = (<span class="keyword">int</span>[])nums.clone();</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right)/<span class="number">2</span>;</span><br><span class="line">            mergeSort(cur, left, mid);</span><br><span class="line">            mergeSort(cur, mid + <span class="number">1</span>, right);</span><br><span class="line">            mergeSortHelper(cur, left, mid, right, nums);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeSortHelper</span><span class="params">(<span class="keyword">int</span>[] cur, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right, <span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = left;</span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k = left - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= right)&#123;</span><br><span class="line">            k++;</span><br><span class="line">            <span class="keyword">if</span> (cur[i] &lt;= cur[j])&#123;</span><br><span class="line">                nums[k] = cur[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                nums[k] = cur[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid)&#123;</span><br><span class="line">            k++;</span><br><span class="line">            nums[k] = cur[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= right)&#123;</span><br><span class="line">            k++;</span><br><span class="line">            nums[k] = cur[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode843-guessTheWord</title>
    <url>/2020/04/07/Leetcode843-guessTheWord/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>This problem is an interactive problem new to the LeetCode platform.</p>
<p>We are given a word list of unique words, each word is 6 letters long, and one word in this list is chosen as secret.</p>
<p>You may call master.guess(word) to guess a word.  The guessed word should have type string and must be from the original list with 6 lowercase letters.</p>
<p>This function returns an integer type, representing the number of exact matches (value and position) of your guess to the secret word.  Also, if your guess is not in the given wordlist, it will return -1 instead.</p>
<p>For each test case, you have 10 guesses to guess the word. At the end of any number of calls, if you have made 10 or less calls to master.guess and at least one of these guesses was the secret, you pass the testcase.</p>
<p>Besides the example test case below, there will be 5 additional test cases, each with 100 words in the word list.  The letters of each word in those testcases were chosen independently at random from ‘a’ to ‘z’, such that every word in the given word lists is unique.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: secret &#x3D; &quot;acckzz&quot;, wordlist &#x3D; [&quot;acckzz&quot;,&quot;ccbazz&quot;,&quot;eiowzz&quot;,&quot;abcczz&quot;]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"></span><br><span class="line">master.guess(&quot;aaaaaa&quot;) returns -1, because &quot;aaaaaa&quot; is not in wordlist.</span><br><span class="line">master.guess(&quot;acckzz&quot;) returns 6, because &quot;acckzz&quot; is secret and has all 6 matches.</span><br><span class="line">master.guess(&quot;ccbazz&quot;) returns 3, because &quot;ccbazz&quot; has 3 matches.</span><br><span class="line">master.guess(&quot;eiowzz&quot;) returns 2, because &quot;eiowzz&quot; has 2 matches.</span><br><span class="line">master.guess(&quot;abcczz&quot;) returns 4, because &quot;abcczz&quot; has 4 matches.</span><br><span class="line"></span><br><span class="line">We made 5 calls to master.guess and one of them was the secret, so we pass the test case.</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong>  Any solutions that attempt to circumvent the judge will result in disqualification.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: Guess a Random Word</strong></p>
<p>All words are generated randomly.</p>
<p>So why not we also guess a random word and let it be whatever will be.</p>
<p><strong>Solution 2: Minimax</strong></p>
<p>Generally, we will get 0 matches from the master.guess. As a result, the size of wordlist reduces slowly.</p>
<p>Recall some math here, the possiblity that get 0 matched is:</p>
<script type="math/tex; mode=display">(25/26) ^ 6 = 79.03%</script><p>That is to say, if we make a blind guess,<br>we have about 80% chance to get 0 matched with the secret word.</p>
<p>To simplify the model,<br>we’re going to assume that,<br>we will always run into the worst case (get 0 matched).</p>
<p>In this case,<br>we have 80% chance to eliminate the candidate word<br>as well as its close words which have at least 1 match.</p>
<p>Additionally, in order to delete a max part of words,<br>we select a candidate who has a big “family”,<br>(that is, the fewest 0 matched with other words.)<br><strong>We want to guess a word that can minimum our worst outcome.</strong></p>
<p>So we compare each two words and count their matches.<br>For each word, we note how many word of 0 matches it gets.<br>Then we guess the word with minimum words of 0 matches.</p>
<p>In this solution, we apply a minimax idea.<br>We minimize our worst case,<br>The worst case is <em>max(the number of words with x matches)</em>,<br>and we assume it equal to “the number of words with 0 matches”</p>
<p><strong>Solution 3: Count the occurrence of characters</strong></p>
<p>In the previous solution, we compaired each two words.<br>This make the complexity O(N^2) for each turn.</p>
<p>But actually we don’t have to do that.<br>We just need to count the occurrence for each character on each position.</p>
<p>If we can guess the word that not in the wordlist,<br>we can guess the word based on the most frequent character on the position.</p>
<p>Here we have to guess a word from the list,<br>we still can calculate a score of similarity for each word,<br>and guess the word with highest score.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // This is the Master's API interface.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * interface Master &#123;</span></span><br><span class="line"><span class="comment"> *     public int guess(String word) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findSecretWord</span><span class="params">(String[] wordlist, Master master)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      Solution 1: Randomly guess, Time: O(N), Space: O(N)</span></span><br><span class="line">        <span class="comment">// for (int i = 0; i &lt; 10; i++)&#123;</span></span><br><span class="line">        <span class="comment">//     String guess = wordlist[new Random().nextInt(wordlist.length)];</span></span><br><span class="line">        <span class="comment">//     int x = master.guess(guess);</span></span><br><span class="line">        <span class="comment">//     if (x &lt; 6)&#123;</span></span><br><span class="line">        <span class="comment">//         List&lt;String&gt; temp = new ArrayList&lt;&gt;();</span></span><br><span class="line">        <span class="comment">//         for (String word: wordlist)&#123;</span></span><br><span class="line">        <span class="comment">//             if (match(word, guess) == x)</span></span><br><span class="line">        <span class="comment">//                 temp.add(word);</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//         wordlist = temp.toArray(new String[temp.size()]);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//      Solution 2: Minimax guess, Time: O(N^2), Space: O(N)</span></span><br><span class="line"><span class="comment">//         for (int i = 0; i &lt; 10; i++)&#123;</span></span><br><span class="line"><span class="comment">//             HashMap&lt;String, Integer&gt; count = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//             for (String word1: wordlist)</span></span><br><span class="line"><span class="comment">//                 for (String word2: wordlist)</span></span><br><span class="line"><span class="comment">//                     if (match(word1, word2) == 0)</span></span><br><span class="line"><span class="comment">//                         count.put(word1, count.getOrDefault(word1, 0) + 1);</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">//             String guess = "";</span></span><br><span class="line"><span class="comment">//             int min = Integer.MAX_VALUE;</span></span><br><span class="line"><span class="comment">//             for (String word: wordlist)&#123;</span></span><br><span class="line"><span class="comment">//                 if (min &gt; count.getOrDefault(word, 0))&#123;</span></span><br><span class="line"><span class="comment">//                     guess = word;</span></span><br><span class="line"><span class="comment">//                     min = count.getOrDefault(word, 0);</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">//             int x = master.guess(guess);</span></span><br><span class="line"><span class="comment">//             List&lt;String&gt; temp = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//             for (String word: wordlist)&#123;</span></span><br><span class="line"><span class="comment">//                 if (match(guess, word) == x)</span></span><br><span class="line"><span class="comment">//                     temp.add(word);</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//             wordlist = temp.toArray(new String[temp.size()]);</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//      Solution 3: Count the occurance of each characters, Time O(N), Space O(N)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span>[][] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>][<span class="number">26</span>];</span><br><span class="line">            <span class="keyword">for</span> (String word: wordlist)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">6</span>; k++)</span><br><span class="line">                    count[k][word.charAt(k) - <span class="string">'a'</span>]++;</span><br><span class="line">            </span><br><span class="line">            String guess = wordlist[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (String word: wordlist)&#123;</span><br><span class="line">                <span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">6</span>; k++)</span><br><span class="line">                    score += count[k][word.charAt(k) - <span class="string">'a'</span>];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (score &gt; max)&#123;</span><br><span class="line">                    max = score;</span><br><span class="line">                    guess = word;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> x = master.guess(guess);</span><br><span class="line">            List&lt;String&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String word: wordlist)</span><br><span class="line">                <span class="keyword">if</span> (match(guess, word) == x)</span><br><span class="line">                    temp.add(word);</span><br><span class="line">            wordlist = temp.toArray(<span class="keyword">new</span> String[temp.size()]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//  Used to count the number of matches between two words</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">match</span><span class="params">(String s1, String s2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s1.charAt(i) == s2.charAt(i))</span><br><span class="line">                count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Minimax</tag>
        <tag>Random</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode909-snakesAndLadders</title>
    <url>/2019/10/08/Leetcode909-snakesAndLadders/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>On an N x N board, the numbers from 1 to N*N are written boustrophedonically starting from the bottom left of the board, and alternating direction each row.  For example, for a 6 x 6 board, the numbers are written as follows:</p>
<p><img src="https://assets.leetcode.com/uploads/2018/09/23/snakes.png" alt=""></p>
<p>You start on square 1 of the board (which is always in the last row and first column).  Each move, starting from square x, consists of the following:</p>
<p>You choose a destination square S with number x+1, x+2, x+3, x+4, x+5, or x+6, provided this number is &lt;= N*N.<br>(This choice simulates the result of a standard 6-sided die roll: ie., there are always at most 6 destinations, regardless of the size of the board.)<br>If S has a snake or ladder, you move to the destination of that snake or ladder.  Otherwise, you move to S.<br>A board square on row r and column c has a “snake or ladder” if board[r][c] != -1.  The destination of that snake or ladder is board[r][c].</p>
<p>Note that you only take a snake or ladder at most once per move: if the destination to a snake or ladder is the start of another snake or ladder, you do not continue moving.  (For example, if the board is <code>[[4,-1],[-1,3]]</code>, and on the first move your destination square is <code>2</code>, then you finish your first move at <code>3</code>, because you do not continue moving to <code>4</code>.)</p>
<p>Return the least number of moves required to reach square N*N.  If it is not possible, return -1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><figcaption><span>[</span></figcaption><table><tr><td class="code"><pre><span class="line">[-1,-1,-1,-1,-1,-1],</span><br><span class="line">[-1,-1,-1,-1,-1,-1],</span><br><span class="line">[-1,-1,-1,-1,-1,-1],</span><br><span class="line">[-1,35,-1,-1,13,-1],</span><br><span class="line">[-1,-1,-1,-1,-1,-1],</span><br><span class="line">[-1,15,-1,-1,-1,-1]]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: </span><br><span class="line">At the beginning, you start at square 1 [at row 5, column 0].</span><br><span class="line">You decide to move to square 2, and must take the ladder to square 15.</span><br><span class="line">You then decide to move to square 17 (row 3, column 5), and must take the snake to square 13.</span><br><span class="line">You then decide to move to square 14, and must take the ladder to square 35.</span><br><span class="line">You then decide to move to square 36, ending the game.</span><br><span class="line">It can be shown that you need at least 4 moves to reach the N*N-th square, so the answer is 4.</span><br></pre></td></tr></table></figure>
<p>Note:</p>
<ol>
<li>2 &lt;= board.length = board[0].length &lt;= 20</li>
<li>board[i][j] is between 1 and N*N or is equal to -1.</li>
<li>The board square with number 1 has no snake or ladder.</li>
<li>The board square with number N*N has no snake or ladder.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">snakesAndLadders</span><span class="params">(<span class="keyword">int</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = board.length;</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[n * n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> move = <span class="number">0</span>; !queue.isEmpty(); move++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> size = queue.size(); size &gt; <span class="number">0</span>; size--) &#123;</span><br><span class="line">                <span class="keyword">int</span> num = queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (visited[num]) <span class="keyword">continue</span>;</span><br><span class="line">                visited[num] = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (num == n * n) <span class="keyword">return</span> move;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span> &amp;&amp; num + i &lt;= n * n; i++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> next = num + i;</span><br><span class="line">                    <span class="keyword">int</span> value = getBoardValue(board, next);</span><br><span class="line">                    <span class="keyword">if</span> (value &gt; <span class="number">0</span>) next = value;</span><br><span class="line">                    <span class="keyword">if</span> (!visited[next]) queue.offer(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getBoardValue</span><span class="params">(<span class="keyword">int</span>[][] board, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = board.length;</span><br><span class="line">        <span class="keyword">int</span> r = (num - <span class="number">1</span>) / n;</span><br><span class="line">        <span class="keyword">int</span> x = n - <span class="number">1</span> - r;</span><br><span class="line">        <span class="keyword">int</span> y = r % <span class="number">2</span> == <span class="number">0</span> ? num - <span class="number">1</span> - r * n : n + r * n - num;</span><br><span class="line">        <span class="keyword">return</span> board[x][y];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode937-reorderDataInLogFiles</title>
    <url>/2019/10/07/Leetcode937-reorderDataInLogFiles/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You have an array of logs.  Each log is a space delimited string of words.</p>
<p>For each log, the first word in each log is an alphanumeric identifier.  Then, either:</p>
<p>Each word after the identifier will consist only of lowercase letters, or;<br>Each word after the identifier will consist only of digits.<br>We will call these two varieties of logs letter-logs and digit-logs.  It is guaranteed that each log has at least one word after its identifier.</p>
<p>Reorder the logs so that all of the letter-logs come before any digit-log.  The letter-logs are ordered lexicographically ignoring identifier, with the identifier used in case of ties.  The digit-logs should be put in their original order.</p>
<p>Return the final order of the logs.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: logs &#x3D; [&quot;dig1 8 1 5 1&quot;,&quot;let1 art can&quot;,&quot;dig2 3 6&quot;,&quot;let2 own kit dig&quot;,&quot;let3 art zero&quot;]</span><br><span class="line">Output: [&quot;let1 art can&quot;,&quot;let3 art zero&quot;,&quot;let2 own kit dig&quot;,&quot;dig1 8 1 5 1&quot;,&quot;dig2 3 6&quot;]</span><br></pre></td></tr></table></figure>
<p><strong>Constraints</strong>:</p>
<ol>
<li>0 &lt;= logs.length &lt;= 100</li>
<li>3 &lt;= logs[i].length &lt;= 100</li>
<li>logs[i] is guaranteed to have an identifier, and a word after the identifier.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String[] reorderLogFiles(String[] logs) &#123;</span><br><span class="line">        String[] res = <span class="keyword">new</span> String[logs.length];</span><br><span class="line">        <span class="keyword">if</span> (logs == <span class="keyword">null</span> || logs.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(logs, <span class="keyword">new</span> Comparator&lt;String&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String a, String b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">int</span> index1 = a.indexOf(<span class="string">' '</span>);</span><br><span class="line">                <span class="keyword">int</span> index2 = b.indexOf(<span class="string">' '</span>);</span><br><span class="line">                <span class="keyword">char</span> ch1 = a.charAt(index1 + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">char</span> ch2 = b.charAt(index2 + <span class="number">1</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (ch1 &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (ch2 &lt;= <span class="string">'9'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ch2 &lt;= <span class="string">'9'</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">int</span> tmp = a.substring(index1+<span class="number">1</span>, a.length()).compareTo(b.substring(index2+<span class="number">1</span>, b.length()));</span><br><span class="line">                <span class="keyword">if</span> (tmp == <span class="number">0</span>) tmp = a.substring(<span class="number">0</span>, index1).compareTo(b.substring(<span class="number">0</span>, index2));</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> logs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>String</tag>
        <tag>Comparator</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode938-rangeSumOfBST</title>
    <url>/2020/02/24/Leetcode938-rangeSumOfBST/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).</p>
<p>The binary search tree is guaranteed to have unique values.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [10,5,15,3,7,null,18], L &#x3D; 7, R &#x3D; 15</span><br><span class="line">Output: 32</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [10,5,15,3,7,13,18,1,null,6], L &#x3D; 6, R &#x3D; 10</span><br><span class="line">Output: 23</span><br><span class="line"></span><br><span class="line">**Note:**</span><br><span class="line"></span><br><span class="line">The number of nodes in the tree is at most 10000.</span><br><span class="line">The final answer is guaranteed to be less than 2^31.</span><br><span class="line"></span><br><span class="line">## Solution</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val &#x3D; x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int rangeSumBST(TreeNode root, int L, int R) &#123;</span><br><span class="line">        if (root &#x3D;&#x3D; null) return 0;</span><br><span class="line">        if (root.val &lt; L) return rangeSumBST(root.right, L, R);</span><br><span class="line">        if (root.val &gt; R) return rangeSumBST(root.left, L, R);</span><br><span class="line">        return root.val + rangeSumBST(root.left, L, R) + rangeSumBST(root.right, L, R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode863-allNodesDistanceKInBinaryTree</title>
    <url>/2019/10/16/Leetcode863-allNodesDistanceKInBinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We are given a binary tree (with root node root), a target node, and an integer value K.</p>
<p>Return a list of the values of all nodes that have a distance K from the target node.  The answer can be returned in any order.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [3,5,1,6,2,0,8,null,null,7,4], target &#x3D; 5, K &#x3D; 2</span><br><span class="line"></span><br><span class="line">Output: [7,4,1]</span><br><span class="line"></span><br><span class="line">Explanation: </span><br><span class="line">The nodes that are a distance 2 from the target node (with value 5)</span><br><span class="line">have values 7, 4, and 1.</span><br><span class="line"></span><br><span class="line">Note that the inputs &quot;root&quot; and &quot;target&quot; are actually TreeNodes.</span><br><span class="line">The descriptions of the inputs above are just serializations of these objects.</span><br></pre></td></tr></table></figure>
<p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png" alt=""></p>
<p><strong>Note:</strong></p>
<ol>
<li>The given tree is non-empty.</li>
<li>Each node in the tree has unique values 0 &lt;= node.val &lt;= 500.</li>
<li>The target node is a node in the tree.</li>
<li>0 &lt;= K &lt;= 1000.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    HashMap&lt;TreeNode, List&lt;TreeNode&gt;&gt; map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">distanceK</span><span class="params">(TreeNode root, TreeNode target, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt; ();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || K &lt; <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        buildMap(root, <span class="keyword">null</span>); </span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(target)) <span class="keyword">return</span> res;</span><br><span class="line">        Set&lt;TreeNode&gt; visited = <span class="keyword">new</span> HashSet&lt;TreeNode&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        q.add(target);</span><br><span class="line">        visited.add(target);</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="keyword">if</span> (K == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size ; i++) res.add(q.poll().val);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                TreeNode node = q.poll();</span><br><span class="line">                <span class="keyword">for</span> (TreeNode next : map.get(node)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (visited.contains(next)) <span class="keyword">continue</span>;</span><br><span class="line">                    visited.add(next);</span><br><span class="line">                    q.add(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            K--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildMap</span><span class="params">(TreeNode node, TreeNode parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(node)) &#123;</span><br><span class="line">            map.put(node, <span class="keyword">new</span> ArrayList&lt;TreeNode&gt;());</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="keyword">null</span>)  &#123; map.get(node).add(parent); map.get(parent).add(node) ; &#125;</span><br><span class="line">            buildMap(node.left, node);</span><br><span class="line">            buildMap(node.right, node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Tree</tag>
        <tag>Graph</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode969-pancakeSorting</title>
    <url>/2019/10/23/Leetcode969-pancakeSorting/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array A, we can perform a pancake flip: We choose some positive integer k &lt;= A.length, then reverse the order of the first k elements of A.  We want to perform zero or more pancake flips (doing them one after another in succession) to sort the array A.</p>
<p>Return the k-values corresponding to a sequence of pancake flips that sort A.  Any valid answer that sorts the array within 10 * A.length flips will be judged as correct.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,2,4,1]</span><br><span class="line">Output: [4,2,4,3]</span><br><span class="line">Explanation: </span><br><span class="line">We perform 4 pancake flips, with k values 4, 2, 4, and 3.</span><br><span class="line">Starting state: A &#x3D; [3, 2, 4, 1]</span><br><span class="line">After 1st flip (k&#x3D;4): A &#x3D; [1, 4, 2, 3]</span><br><span class="line">After 2nd flip (k&#x3D;2): A &#x3D; [4, 1, 2, 3]</span><br><span class="line">After 3rd flip (k&#x3D;4): A &#x3D; [3, 2, 1, 4]</span><br><span class="line">After 4th flip (k&#x3D;3): A &#x3D; [1, 2, 3, 4], which is sorted.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3]</span><br><span class="line">Output: []</span><br><span class="line">Explanation: The input is already sorted, so there is no need to flip anything.</span><br><span class="line">Note that other answers, such as [3, 3], would also be accepted.</span><br></pre></td></tr></table></figure><br><strong>Note:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &lt;&#x3D; A.length &lt;&#x3D; 100</span><br><span class="line">A[i] is a permutation of [1, 2, ..., A.length]</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">pancakeSort</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (A.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = A.length; i &gt; <span class="number">1</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">            <span class="keyword">int</span> maxIndex = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (A[j] &gt; max)&#123;</span><br><span class="line">                    max = A[j];</span><br><span class="line">                    maxIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (maxIndex == i - <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            reverse(A, maxIndex);</span><br><span class="line">            res.add(maxIndex + <span class="number">1</span>);</span><br><span class="line">            reverse(A, i - <span class="number">1</span>);</span><br><span class="line">            res.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = index;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = A[i];</span><br><span class="line">            A[i] = A[j];</span><br><span class="line">            A[j] = tmp;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Microsoft</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode957-prisonCellsAfterNDays</title>
    <url>/2019/10/07/Leetcode957-prisonCellsAfterNDays/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are 8 prison cells in a row, and each cell is either occupied or vacant.</p>
<p>Each day, whether the cell is occupied or vacant changes according to the following rules:</p>
<ul>
<li>If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.</li>
<li>Otherwise, it becomes vacant.</li>
</ul>
<p>(Note that because the prison is a row, the first and the last cells in the row can’t have two adjacent neighbors.)</p>
<p>We describe the current state of the prison in the following way: cells[i] == 1 if the i-th cell is occupied, else cells[i] == 0.</p>
<p>Given the initial state of the prison, return the state of the prison after N days (and N such changes described above.)</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: cells &#x3D; [0,1,0,1,1,0,0,1], N &#x3D; 7</span><br><span class="line">Output: [0,0,1,1,0,0,0,0]</span><br><span class="line">Explanation: </span><br><span class="line">The following table summarizes the state of the prison on each day:</span><br><span class="line">Day 0: [0, 1, 0, 1, 1, 0, 0, 1]</span><br><span class="line">Day 1: [0, 1, 1, 0, 0, 0, 0, 0]</span><br><span class="line">Day 2: [0, 0, 0, 0, 1, 1, 1, 0]</span><br><span class="line">Day 3: [0, 1, 1, 0, 0, 1, 0, 0]</span><br><span class="line">Day 4: [0, 0, 0, 0, 0, 1, 0, 0]</span><br><span class="line">Day 5: [0, 1, 1, 1, 0, 1, 0, 0]</span><br><span class="line">Day 6: [0, 0, 1, 0, 1, 1, 0, 0]</span><br><span class="line">Day 7: [0, 0, 1, 1, 0, 0, 0, 0]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: cells &#x3D; [1,0,0,1,0,0,1,0], N &#x3D; 1000000000</span><br><span class="line">Output: [0,0,1,1,1,1,1,0]</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] prisonAfterNDays(<span class="keyword">int</span>[] cells, <span class="keyword">int</span> N) &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; seen = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span>[] cells2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">            seen.put(Arrays.toString(cells), N--);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; ++i)</span><br><span class="line">                cells2[i] = cells[i - <span class="number">1</span>] == cells[i + <span class="number">1</span>] ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            cells = cells2;</span><br><span class="line">            <span class="keyword">if</span> (seen.containsKey(Arrays.toString(cells))) &#123;</span><br><span class="line">                N %= seen.get(Arrays.toString(cells)) - N;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cells;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode946-validateStackSequences</title>
    <url>/2020/04/07/Leetcode946-validateStackSequences/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: pushed &#x3D; [1,2,3,4,5], popped &#x3D; [4,5,3,2,1]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: We might do the following sequence:</span><br><span class="line">push(1), push(2), push(3), push(4), pop() -&gt; 4,</span><br><span class="line">push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: pushed &#x3D; [1,2,3,4,5], popped &#x3D; [4,3,5,1,2]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: 1 cannot be popped before 2.</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ol>
<li>0 &lt;= pushed.length == popped.length &lt;= 1000</li>
<li>0 &lt;= pushed[i], popped[i] &lt; 1000</li>
<li>pushed is a permutation of popped.</li>
<li>pushed and popped have distinct values.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1:</strong> Simulating</p>
<p>Time: O(n)</p>
<p>Space: O(n)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateStackSequences</span><span class="params">(<span class="keyword">int</span>[] pushed, <span class="keyword">int</span>[] popped)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: pushed)&#123;</span><br><span class="line">            st.push(num);</span><br><span class="line">            <span class="keyword">while</span>(!st.isEmpty() &amp;&amp; st.peek() == popped[idx])&#123;</span><br><span class="line">                idx++;</span><br><span class="line">                st.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> st.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>Solution 2: Used pushed as stack, change the input array</strong></p>
<p>Time: O(n)</p>
<p>Space: O(1)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateStackSequences</span><span class="params">(<span class="keyword">int</span>[] pushed, <span class="keyword">int</span>[] popped)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: pushed)&#123;</span><br><span class="line">            pushed[i++] = num;</span><br><span class="line">            <span class="keyword">while</span>(i &gt; <span class="number">0</span> &amp;&amp; pushed[i - <span class="number">1</span>] == popped[j])&#123;</span><br><span class="line">                i--;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode973-kClosestPointsTYoOrigin</title>
    <url>/2019/10/06/Leetcode973-kClosestPointsTYoOrigin/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We have a list of points on the plane.  Find the K closest points to the origin (0, 0).</p>
<p>(Here, the distance between two points on a plane is the Euclidean distance.)</p>
<p>You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: points &#x3D; [[1,3],[-2,2]], K &#x3D; 1</span><br><span class="line">Output: [[-2,2]]</span><br><span class="line">Explanation: </span><br><span class="line">The distance between (1, 3) and the origin is sqrt(10).</span><br><span class="line">The distance between (-2, 2) and the origin is sqrt(8).</span><br><span class="line">Since sqrt(8) &lt; sqrt(10), (-2, 2) is closer to the origin.</span><br><span class="line">We only want the closest K &#x3D; 1 points from the origin, so the answer is just [[-2,2]].</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: points &#x3D; [[3,3],[5,-1],[-2,4]], K &#x3D; 2</span><br><span class="line">Output: [[3,3],[-2,4]]</span><br><span class="line">(The answer [[-2,4],[3,3]] would also be accepted.)</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>O(NlogK), Heap<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] kClosest(<span class="keyword">int</span>[][] points, <span class="keyword">int</span> K) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span>[][] res = <span class="keyword">new</span> <span class="keyword">int</span>[K][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (points.length &lt;= K) <span class="keyword">return</span> points;</span><br><span class="line">        </span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;((a,b) -&gt; getDistance(b) - getDistance(a));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] point: points)&#123;</span><br><span class="line">            pq.offer(point);</span><br><span class="line">            <span class="keyword">if</span> (pq.size() &gt; K) pq.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] point = pq.poll();</span><br><span class="line">            res[i][<span class="number">0</span>] = point[<span class="number">0</span>];</span><br><span class="line">            res[i][<span class="number">1</span>] = point[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDistance</span><span class="params">(<span class="keyword">int</span>[] points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> points[<span class="number">0</span>] * points[<span class="number">0</span>] + points[<span class="number">1</span>] * points[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>O(N), Divide and Conquer<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] kClosest(<span class="keyword">int</span>[][] points, <span class="keyword">int</span> K) &#123;</span><br><span class="line">        <span class="keyword">int</span> len =  points.length, l = <span class="number">0</span>, r = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = helper(points, l, r);</span><br><span class="line">            <span class="keyword">if</span> (mid == K) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (mid &lt; K) &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOfRange(points, <span class="number">0</span>, K);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[][] A, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] pivot = A[l];</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; compare(A[r], pivot) &gt;= <span class="number">0</span>) r--;</span><br><span class="line">            A[l] = A[r];</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; compare(A[l], pivot) &lt;= <span class="number">0</span>) l++;</span><br><span class="line">            A[r] = A[l];</span><br><span class="line">        &#125;</span><br><span class="line">        A[l] = pivot;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] p1, <span class="keyword">int</span>[] p2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p1[<span class="number">0</span>] * p1[<span class="number">0</span>] + p1[<span class="number">1</span>] * p1[<span class="number">1</span>] - p2[<span class="number">0</span>] * p2[<span class="number">0</span>] - p2[<span class="number">1</span>] * p2[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Heap</tag>
        <tag>Divide and Conquer</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode971-flipBinaryTreeToMatchPreorderTraversal</title>
    <url>/2020/03/28/Leetcode971-flipBinaryTreeToMatchPreorderTraversal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree with N nodes, each node has a different value from {1, …, N}.</p>
<p>A node in this binary tree can be flipped by swapping the left child and the right child of that node.</p>
<p>Consider the sequence of N values reported by a preorder traversal starting from the root.  Call such a sequence of N values the voyage of the tree.</p>
<p>(Recall that a preorder traversal of a node means we report the current node’s value, then preorder-traverse the left child, then preorder-traverse the right child.)</p>
<p>Our goal is to flip the least number of nodes in the tree so that the voyage of the tree matches the voyage we are given.</p>
<p>If we can do so, then return a list of the values of all nodes flipped.  You may return the answer in any order.</p>
<p>If we cannot do so, then return the list [-1].</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/01/02/1219-01.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [1,2], voyage &#x3D; [2,1]</span><br><span class="line">Output: [-1]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/01/02/1219-02.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [1,2,3], voyage &#x3D; [1,3,2]</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/01/02/1219-02.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [1,2,3], voyage &#x3D; [1,2,3]</span><br><span class="line">Output: []</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">**Note:**</span><br><span class="line"></span><br><span class="line">* 1 &lt;&#x3D; N &lt;&#x3D; 100</span><br><span class="line"></span><br><span class="line">## Solution</span><br><span class="line"></span><br><span class="line">Global integer i indicates next index in voyage v.</span><br><span class="line"></span><br><span class="line">If current node &#x3D;&#x3D; null, it&#39;s fine, we return true</span><br><span class="line"></span><br><span class="line">If current node.val !&#x3D; v[i], doesn&#39;t match wanted value, return false</span><br><span class="line"></span><br><span class="line">If left child exist but don&#39;t have wanted value, flip it with right child.</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode(int x) &#123; val &#x3D; x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">class Solution &#123;</span><br><span class="line">    List&lt;Integer&gt; res &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    int i &#x3D; 0;</span><br><span class="line">    public List&lt;Integer&gt; flipMatchVoyage(TreeNode root, int[] v) &#123;</span><br><span class="line">        return dfs(root, v) ? res : Arrays.asList(-1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Boolean dfs(TreeNode node, int[] v) &#123;</span><br><span class="line">        if (node &#x3D;&#x3D; null) return true;</span><br><span class="line">        if (node.val !&#x3D; v[i++]) return false;</span><br><span class="line">        if (node.left !&#x3D; null &amp;&amp; node.left.val !&#x3D; v[i]) &#123;</span><br><span class="line">            res.add(node.val);</span><br><span class="line">            return dfs(node.right, v) &amp;&amp; dfs(node.left, v);</span><br><span class="line">        &#125;</span><br><span class="line">        return dfs(node.left, v) &amp;&amp; dfs(node.right, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode978-longestTurbulentSubarray</title>
    <url>/2020/03/29/Leetcode978-longestTurbulentSubarray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A subarray A[i], A[i+1], …, A[j] of A is said to be turbulent if and only if:</p>
<ul>
<li>For i &lt;= k &lt; j, A[k] &gt; A[k+1] when k is odd, and A[k] &lt; A[k+1] when k is even;</li>
<li>OR, for i &lt;= k &lt; j, A[k] &gt; A[k+1] when k is even, and A[k] &lt; A[k+1] when k is odd.</li>
</ul>
<p>That is, the subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.</p>
<p>Return the length of a maximum size turbulent subarray of A.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [9,4,2,10,7,8,8,1,9]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: (A[1] &gt; A[2] &lt; A[3] &gt; A[4] &lt; A[5])</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [4,8,12,16]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [100]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ol>
<li>1 &lt;= A.length &lt;= 40000</li>
<li>0 &lt;= A[i] &lt;= 10^9</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solutio 1:</strong> Basic solution, Time O(n), Space O(n)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//  Basic Method: Time: O(n), Space: O(n)</span></span><br><span class="line"><span class="comment">//     For each A[i]</span></span><br><span class="line"><span class="comment">//  inc: The length of current valid sequence which ends with two increasing numbers</span></span><br><span class="line"><span class="comment">//  dec: The length of current valid sequence which ends with two decreasing numbers</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxTurbulenceSize</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (A == <span class="keyword">null</span> || A.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] inc = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">        <span class="keyword">int</span>[] des = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        Arrays.fill(inc, <span class="number">1</span>);</span><br><span class="line">        Arrays.fill(des, <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; A.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] &gt; A[i - <span class="number">1</span>])</span><br><span class="line">                inc[i] = des[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (A[i] &lt; A[i - <span class="number">1</span>])</span><br><span class="line">                des[i] = inc[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            res = Math.max(res, Math.max(inc[i], des[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 2:</strong> Improved Solution, Space O(1)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//  Improved: O(1) Space; O(N) time</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxTurbulenceSize</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (A == <span class="keyword">null</span> || A.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> inc = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> des = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; A.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i] &gt; A[i - <span class="number">1</span>])&#123;</span><br><span class="line">                inc = des + <span class="number">1</span>;</span><br><span class="line">                des = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (A[i] &lt; A[i - <span class="number">1</span>])&#123;</span><br><span class="line">                des = inc + <span class="number">1</span>;</span><br><span class="line">                inc = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                inc = <span class="number">1</span>;</span><br><span class="line">                des = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, Math.max(inc, des));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Bloomberg</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode980-uniquePathsIII</title>
    <url>/2019/10/14/Leetcode980-uniquePathsIII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>On a 2-dimensional grid, there are 4 types of squares:</p>
<ul>
<li>1 represents the starting square.  There is exactly one starting square.</li>
<li>2 represents the ending square.  There is exactly one ending square.</li>
<li>0 represents empty squares we can walk over.</li>
<li>-1 represents obstacles that we cannot walk over.</li>
</ul>
<p>Return the number of 4-directional walks from the starting square to the ending square, that <strong>walk over every non-obstacle square exactly once</strong>.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: We have the following two paths: </span><br><span class="line">1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)</span><br><span class="line">2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,0,0,0],[0,0,0,0],[0,0,0,2]]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: We have the following four paths: </span><br><span class="line">1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)</span><br><span class="line">2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)</span><br><span class="line">3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)</span><br><span class="line">4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[0,1],[2,0]]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: </span><br><span class="line">There is no path that walks over every empty square exactly once.</span><br><span class="line">Note that the starting and ending square can be anywhere in the grid.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] dir = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;-<span class="number">1</span>, <span class="number">0</span>&#125;,&#123;<span class="number">0</span>, <span class="number">1</span>&#125;,&#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsIII</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numOb = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] start = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span>[] end = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == -<span class="number">1</span>) numOb++;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    start[<span class="number">0</span>] = i;</span><br><span class="line">                    start[<span class="number">1</span>] = j;</span><br><span class="line">                &#125;                </span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[grid.length][grid[<span class="number">0</span>].length];</span><br><span class="line">        dfs(grid, start[<span class="number">0</span>], start[<span class="number">1</span>], visited, numOb, <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] grid, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">boolean</span>[][] visited, <span class="keyword">int</span> numOb, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid[x][y] == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (len == grid.length * grid[<span class="number">0</span>].length - numOb)</span><br><span class="line">                res ++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[x][y] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; nx &lt; grid.length &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; ny &lt; grid[<span class="number">0</span>].length &amp;&amp; !visited[nx][ny] &amp;&amp; grid[nx][ny] != -<span class="number">1</span>)&#123;</span><br><span class="line">                dfs(grid, nx, ny, visited, numOb, len + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[x][y] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Amazon</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode975-oddEvenJump</title>
    <url>/2020/03/03/Leetcode975-oddEvenJump/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array A.  From some starting index, you can make a series of jumps.  The (1st, 3rd, 5th, …) jumps in the series are called odd numbered jumps, and the (2nd, 4th, 6th, …) jumps in the series are called even numbered jumps.</p>
<p>You may from index i jump forward to index j (with i &lt; j) in the following way:</p>
<ul>
<li>During odd numbered jumps (ie. jumps 1, 3, 5, …), you jump to the index j such that A[i] &lt;= A[j] and A[j] is the smallest possible value.  If there are multiple such indexes j, you can only jump to the smallest such index j.</li>
<li>During even numbered jumps (ie. jumps 2, 4, 6, …), you jump to the index j such that A[i] &gt;= A[j] and A[j] is the largest possible value.  If there are multiple such indexes j, you can only jump to the smallest such index j.</li>
<li>(It may be the case that for some index i, there are no legal jumps.)</li>
</ul>
<p>A starting index is good if, starting from that index, you can reach the end of the array (index A.length - 1) by jumping some number of times (possibly 0 or more than once.)</p>
<p>Return the number of good starting indexes.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [10,13,12,14,15]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: </span><br><span class="line">From starting index i &#x3D; 0, we can jump to i &#x3D; 2 (since A[2] is the smallest among A[1], A[2], A[3], A[4] that is greater or equal to A[0]), then we can&#39;t jump any more.</span><br><span class="line">From starting index i &#x3D; 1 and i &#x3D; 2, we can jump to i &#x3D; 3, then we can&#39;t jump any more.</span><br><span class="line">From starting index i &#x3D; 3, we can jump to i &#x3D; 4, so we&#39;ve reached the end.</span><br><span class="line">From starting index i &#x3D; 4, we&#39;ve reached the end already.</span><br><span class="line">In total, there are 2 different starting indexes (i &#x3D; 3, i &#x3D; 4) where we can reach the end with some number of jumps.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,3,1,1,4]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: </span><br><span class="line">From starting index i &#x3D; 0, we make jumps to i &#x3D; 1, i &#x3D; 2, i &#x3D; 3:</span><br><span class="line"></span><br><span class="line">During our 1st jump (odd numbered), we first jump to i &#x3D; 1 because A[1] is the smallest value in (A[1], A[2], A[3], A[4]) that is greater than or equal to A[0].</span><br><span class="line"></span><br><span class="line">During our 2nd jump (even numbered), we jump from i &#x3D; 1 to i &#x3D; 2 because A[2] is the largest value in (A[2], A[3], A[4]) that is less than or equal to A[1].  A[3] is also the largest value, but 2 is a smaller index, so we can only jump to i &#x3D; 2 and not i &#x3D; 3.</span><br><span class="line"></span><br><span class="line">During our 3rd jump (odd numbered), we jump from i &#x3D; 2 to i &#x3D; 3 because A[3] is the smallest value in (A[3], A[4]) that is greater than or equal to A[2].</span><br><span class="line"></span><br><span class="line">We can&#39;t jump from i &#x3D; 3 to i &#x3D; 4, so the starting index i &#x3D; 0 is not good.</span><br><span class="line"></span><br><span class="line">In a similar manner, we can deduce that:</span><br><span class="line">From starting index i &#x3D; 1, we jump to i &#x3D; 4, so we reach the end.</span><br><span class="line">From starting index i &#x3D; 2, we jump to i &#x3D; 3, and then we can&#39;t jump anymore.</span><br><span class="line">From starting index i &#x3D; 3, we jump to i &#x3D; 4, so we reach the end.</span><br><span class="line">From starting index i &#x3D; 4, we are already at the end.</span><br><span class="line">In total, there are 3 different starting indexes (i &#x3D; 1, i &#x3D; 3, i &#x3D; 4) where we can reach the end with some number of jumps.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [5,1,3,4,2]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: </span><br><span class="line">We can reach the end from starting indexes 1, 2, and 4.</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>1 &lt;= A.length &lt;= 20000</li>
<li>0 &lt;= A[i] &lt; 100000</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>We need to jump higher and lower alternately to the end.</p>
<p>Take [5,1,3,4,2] as example.</p>
<p>If we start at 2,<br>we can jump either higher first or lower first to the end,<br>because we are already at the end.<br>higher(2) = true<br>lower(2) = true</p>
<p>If we start at 4,<br>we can’t jump higher, higher(4) = false<br>we can jump lower to 2, lower(4) = higher(2) = true</p>
<p>If we start at 3,<br>we can jump higher to 4, higher(3) = lower(4) = true<br>we can jump lower to 2, lower(3) = higher(2) = true</p>
<p>If we start at 1,<br>we can jump higher to 2, higher(1) = lower(2) = true<br>we can’t jump lower, lower(1) = false</p>
<p>If we start at 5,<br>we can’t jump higher, higher(5) = false<br>we can jump lower to 4, lower(5) = higher(4) = false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">oddEvenJumps</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.length; </span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] higher = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="keyword">boolean</span>[] lower = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        higher[n - <span class="number">1</span>] = lower[n - <span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        TreeMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        map.put(A[n - <span class="number">1</span>], n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            Map.Entry h = map.ceilingEntry(A[i]);</span><br><span class="line">            Map.Entry l = map.floorEntry(A[i]);</span><br><span class="line">            <span class="keyword">if</span> (h != <span class="keyword">null</span>) higher[i] = lower[(<span class="keyword">int</span>)h.getValue()];</span><br><span class="line">            <span class="keyword">if</span> (l != <span class="keyword">null</span>) lower[i] = higher[(<span class="keyword">int</span>)l.getValue()];</span><br><span class="line">            <span class="keyword">if</span> (higher[i]) res++;</span><br><span class="line">            map.put(A[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>Goolge</tag>
      </tags>
  </entry>
  <entry>
    <title>Manacher</title>
    <url>/2019/10/16/Manacher/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="https://" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] manacher(String s)&#123;</span><br><span class="line">    List&lt;Character&gt; a = <span class="keyword">new</span> List&lt;&gt;();</span><br><span class="line">    a.add(<span class="string">'@'</span>);</span><br><span class="line">    a.add(<span class="string">'#'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> ch: s.toCharArray())&#123;</span><br><span class="line">        a.add(ch);</span><br><span class="line">        a.add(<span class="string">'#'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    a.add(<span class="string">'?'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = a.size();</span><br><span class="line">    <span class="keyword">int</span> maxID = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] p = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n- <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (maxID &gt; i) p[i] = Math.min(p[<span class="number">2</span> * id - i], maxID - i);</span><br><span class="line">        <span class="keyword">else</span> p[i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (a.get(i - p[i]) == a.get(i + p[i])) p[i]++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i + p[i] &gt; maxID)&#123;</span><br><span class="line">            maxID = i + p[i];</span><br><span class="line">            id = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Time-Complexity"><a href="#Time-Complexity" class="headerlink" title="Time Complexity"></a>Time Complexity</h2><p>O(N)</p>
<hr />]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Palindrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode993-cousinsInBinaryTree</title>
    <url>/2020/02/12/Leetcode993-cousinsInBinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.</p>
<p>Two nodes of a binary tree are cousins if they have the same depth, but have different parents.</p>
<p>We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.</p>
<p>Return true if and only if the nodes corresponding to the values x and y are cousins.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [1,2,3,4], x &#x3D; 4, y &#x3D; 3</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [1,2,3,null,4,null,5], x &#x3D; 5, y &#x3D; 4</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [1,2,3,null,4], x &#x3D; 2, y &#x3D; 3</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>The number of nodes in the tree will be between 2 and 100.</li>
<li>Each node has a unique integer value from 1 to 100.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCousins</span><span class="params">(TreeNode root, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> isXexist;</span><br><span class="line">        <span class="keyword">boolean</span> isYexist;</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            isXexist = <span class="keyword">false</span>;</span><br><span class="line">            isYexist = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                TreeNode node = queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (node.val == x) isXexist = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (node.val == y) isYexist = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span> &amp;&amp; node.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (node.left.val == x &amp;&amp; node.right.val == y) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (node.left.val == y &amp;&amp; node.right.val == x) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) queue.offer(node.left);</span><br><span class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) queue.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isXexist &amp;&amp; isYexist) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode945-minimumIncrementToMakeArrayUnique</title>
    <url>/2019/09/25/Leetcode945-minimumIncrementToMakeArrayUnique/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers A, a move consists of choosing any A[i], and incrementing it by 1.</p>
<p>Return the least number of moves to make every value in A unique.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,2]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation:  After 1 move, the array could be [1, 2, 3].</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,2,1,2,1,7]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation:  After 6 moves, the array could be [3, 4, 1, 2, 5, 7].</span><br><span class="line">It can be shown with 5 or less moves that it is impossible for the array to have all unique values.</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minIncrementForUnique</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (A == <span class="keyword">null</span> || A.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// Method 1: O(NlgN)</span></span><br><span class="line">        Arrays.sort(A);</span><br><span class="line">        <span class="keyword">int</span> steps = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> available = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// int available = A[0];</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> it: A)&#123;</span><br><span class="line">            steps += Math.max(available - it, <span class="number">0</span>);</span><br><span class="line">            available = Math.max(available, it) + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// Not clean style</span></span><br><span class="line">            <span class="comment">// if (available &gt;= it)&#123;</span></span><br><span class="line">            <span class="comment">//     steps += available - it;</span></span><br><span class="line">            <span class="comment">//     available ++;</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">// else available = it + 1;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Method 2: O(NlgK)</span></span><br><span class="line">        <span class="comment">// TreeMap&lt;Integer, Integer&gt; map = new TreeMap&lt;&gt;();</span></span><br><span class="line">        <span class="comment">// for (int it: A)&#123;</span></span><br><span class="line">        <span class="comment">//     map.put(it, map.getOrDefault(it, 0)+1);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// int steps = 0;</span></span><br><span class="line">        <span class="comment">// int available = 0;</span></span><br><span class="line">        <span class="comment">// for (int it: map.keySet())&#123;</span></span><br><span class="line">        <span class="comment">//     int count = map.get(it);</span></span><br><span class="line">        <span class="comment">//     steps += count * Math.max(available - it, 0) + count*(count-1)/2;</span></span><br><span class="line">        <span class="comment">//     available = Math.max(available, it) + count;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> steps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Union Find, average O(N)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minIncrementForUnique</span><span class="params">(self, A)</span>:</span></span><br><span class="line">        root = &#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(x)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> root:</span><br><span class="line">                root[x] = x</span><br><span class="line">            <span class="keyword">elif</span> x != root[x]:</span><br><span class="line">                root[x] = find(root[x])</span><br><span class="line">            <span class="keyword">elif</span> x + <span class="number">1</span> <span class="keyword">in</span> root:</span><br><span class="line">                root[x] = find(root[x + <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                root[x] = root[x + <span class="number">1</span>] = x + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> root[x]</span><br><span class="line">        <span class="keyword">return</span> sum(find(a) - a <span class="keyword">for</span> a <span class="keyword">in</span> A)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Map</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Achievements-100 Problems Solved</title>
    <url>/2019/09/14/LeetcodeAchievements-100ProblemsSolved/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1g704vx6033j207p0avjrn.jpg" alt="" style="width:30%" /> <!-- 首页和文章内都会显示 --></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
        <tag>Achievement</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode987-verticalOrderTraversalOfABinaryTree</title>
    <url>/2020/03/02/Leetcode987-verticalOrderTraversalOfABinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a binary tree, return the vertical order traversal of its nodes values.</p>
<p>For each node at position (X, Y), its left and right children respectively will be at positions (X-1, Y-1) and (X+1, Y-1).</p>
<p>Running a vertical line from X = -infinity to X = +infinity, whenever the vertical line touches some nodes, we report the values of the nodes in order from top to bottom (decreasing Y coordinates).</p>
<p>If two nodes have the same position, then the value of the node that is reported first is the value that is smaller.</p>
<p>Return an list of non-empty reports in order of X coordinate.  Every report will have a list of values of nodes.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/01/31/1236_example_1.PNG" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,9,20,null,null,15,7]</span><br><span class="line">Output: [[9],[3,15],[20],[7]]</span><br><span class="line">Explanation: </span><br><span class="line">Without loss of generality, we can assume the root node is at position (0, 0):</span><br><span class="line">Then, the node with value 9 occurs at position (-1, -1);</span><br><span class="line">The nodes with values 3 and 15 occur at positions (0, 0) and (0, -2);</span><br><span class="line">The node with value 20 occurs at position (1, -1);</span><br><span class="line">The node with value 7 occurs at position (2, -2).</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2019/01/31/tree2.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,2,3,4,5,6,7]</span><br><span class="line">Output: [[4],[2],[1,5,6],[3],[7]]</span><br><span class="line">Explanation: </span><br><span class="line">The node with value 5 and the node with value 6 have the same position according to the given scheme.</span><br><span class="line">However, in the report &quot;[1,5,6]&quot;, the node value of 5 comes first since 5 is smaller than 6.</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ol>
<li>The tree will have between 1 and 1000 nodes.</li>
<li>Each node’s value will be between 0 and 1000.</li>
</ol>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; verticalTraversal(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Map&lt;Integer, TreeSet&lt;<span class="keyword">int</span>[]&gt;&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        helper(map, root, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> order: map.keySet())&#123;</span><br><span class="line">            List&lt;Integer&gt; temp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] pair: map.get(order))&#123;</span><br><span class="line">                temp.add(pair[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(Map&lt;Integer, TreeSet&lt;<span class="keyword">int</span>[]&gt;&gt; map, TreeNode node, <span class="keyword">int</span> order, <span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(order))</span><br><span class="line">            map.put(order, <span class="keyword">new</span> TreeSet&lt;<span class="keyword">int</span>[]&gt;(<span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b)</span></span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[<span class="number">1</span>] != b[<span class="number">1</span>])</span><br><span class="line">                        <span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        map.get(order).add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;node.val, level&#125;);</span><br><span class="line">        helper(map, node.left, order - <span class="number">1</span>, level + <span class="number">1</span>);</span><br><span class="line">        helper(map, node.right, order + <span class="number">1</span>, level + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Bloomberg</tag>
        <tag>Tree</tag>
        <tag>Hash Map</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Maximum Flow</title>
    <url>/2018/11/11/MaximumFlow/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx54cm6f9vj209b04374c.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Ford-Fulkerson-method"><a href="#Ford-Fulkerson-method" class="headerlink" title="Ford-Fulkerson method"></a>Ford-Fulkerson method</h2><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx53n0bi5ej20e70483yr.jpg" alt=""></p>
<h3 id="Residual-networks"><a href="#Residual-networks" class="headerlink" title="Residual networks"></a>Residual networks</h3><p>Intuitively, given a flow network $G$ and a flow $f$ , the residual network $G_f$ consists<br>of edges with capacities that represent how we can change the flow on edges of G.</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx53u7mkpfj208j023glh.jpg" alt=""></p>
<h3 id="Augmenting-paths"><a href="#Augmenting-paths" class="headerlink" title="Augmenting paths"></a>Augmenting paths</h3><p>Given a flow network $G=(V,E)$ and a flow $f$ , an <strong>augmenting path</strong> p is a<br>simple path from s to t in the residual network $G_f$.</p>
<h3 id="Cuts-of-flow-networks"><a href="#Cuts-of-flow-networks" class="headerlink" title="Cuts of flow networks"></a>Cuts of flow networks</h3><p>A cut $(S,T)$ of flow network $G=(V,E)$ is a partition of $V$ into $S$ and<br>$T = V - S$ such that $s \in S$ and $t \in T$ .</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx53tgp99pj205s021glh.jpg" alt=""></p>
<h3 id="basic-Ford-Fulkerson-algorithm"><a href="#basic-Ford-Fulkerson-algorithm" class="headerlink" title="basic Ford-Fulkerson algorithm"></a>basic Ford-Fulkerson algorithm</h3><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx53v378o5j20c004z74k.jpg" alt=""></p>
<h3 id="The-Edmonds-Karp-algorithm"><a href="#The-Edmonds-Karp-algorithm" class="headerlink" title="The Edmonds-Karp algorithm"></a>The Edmonds-Karp algorithm</h3><p>We can improve the bound on <strong>FORD-FULKERSON</strong> by finding the augmenting<br>path p in line 3 with a breadth-first search. That is, we choose the augmenting<br>path as a shortest path from s to t in the residual network, where each edge has<br>unit distance (weight).</p>
<p>Running Time: $O(VE^2)$</p>
<h2 id="Maximum-bipartite-matching"><a href="#Maximum-bipartite-matching" class="headerlink" title="Maximum bipartite matching"></a>Maximum bipartite matching</h2><p>Thus, given a bipartite undirected graph $G$, we can find a maximum matching by<br>creating the flow network $G’$, running the Ford-Fulkerson method, and directly obtaining<br>a maximum matching $M$ from the integer-valued maximum flow $f$ found. Since anymatching in a bipartite graph has cardinality at most $min(L,R) = O(V)$, the value of the maximum flow in $G’$ is $O(V)$. We can therefore find a maximum matching in a bipartite graph in time $O(VE’) = O(VE)$</p>
<h2 id="Push-relabel-algorithms"><a href="#Push-relabel-algorithms" class="headerlink" title="Push-relabel algorithms"></a>Push-relabel algorithms</h2><h3 id="The-push-operation"><a href="#The-push-operation" class="headerlink" title="The push operation"></a>The push operation</h3><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx540vvnalj20di04xglz.jpg" alt=""></p>
<h3 id="The-relabel-operation"><a href="#The-relabel-operation" class="headerlink" title="The relabel operation"></a>The relabel operation</h3><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx541m4ezmj20dt02taa6.jpg" alt=""></p>
<h3 id="The-generic-algorithm"><a href="#The-generic-algorithm" class="headerlink" title="The generic algorithm"></a>The generic algorithm</h3><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx54248mjuj206906474g.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx5431wn83j20by02awei.jpg" alt=""></p>
<h2 id="The-relabel-to-front-algorithm"><a href="#The-relabel-to-front-algorithm" class="headerlink" title="The relabel-to-front algorithm"></a>The relabel-to-front algorithm</h2><h3 id="Discharging-an-overflowing-vertex"><a href="#Discharging-an-overflowing-vertex" class="headerlink" title="Discharging an overflowing vertex"></a>Discharging an overflowing vertex</h3><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx544unfqfj209504t74f.jpg" alt=""></p>
<h3 id="The-relabel-to-front-algorithm-1"><a href="#The-relabel-to-front-algorithm-1" class="headerlink" title="The relabel-to-front algorithm"></a>The relabel-to-front algorithm</h3><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fx545m18jcj207i06c0t1.jpg" alt=""></p>
<hr />]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Graph Algorithms</tag>
        <tag>Maximum Flow</tag>
        <tag>Ford-Fulkerson</tag>
        <tag>Edmonds-Karp algorithm</tag>
        <tag>Maximum bipartite matching</tag>
        <tag>Push-relabel algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode981-timeBasedKey-ValueStore</title>
    <url>/2019/10/28/Leetcode981-timeBasedKey-ValueStore/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Create a timebased key-value store class TimeMap, that supports two operations.</p>
<ol>
<li>set(string key, string value, int timestamp)</li>
</ol>
<ul>
<li>Stores the key and value, along with the given timestamp.</li>
</ul>
<ol>
<li>get(string key, int timestamp)</li>
</ol>
<ul>
<li>Returns a value such that set(key, value, timestamp_prev) was called previously, with timestamp_prev &lt;= timestamp.</li>
<li>If there are multiple such values, it returns the one with the largest timestamp_prev.</li>
<li>If there are no values, it returns the empty string (“”).<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><strong>Example 1:</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: inputs &#x3D; [&quot;TimeMap&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;], inputs &#x3D; [[],[&quot;foo&quot;,&quot;bar&quot;,1],[&quot;foo&quot;,1],[&quot;foo&quot;,3],[&quot;foo&quot;,&quot;bar2&quot;,4],[&quot;foo&quot;,4],[&quot;foo&quot;,5]]</span><br><span class="line">Output: [null,null,&quot;bar&quot;,&quot;bar&quot;,null,&quot;bar2&quot;,&quot;bar2&quot;]</span><br><span class="line">Explanation:   </span><br><span class="line">TimeMap kv;   </span><br><span class="line">kv.set(&quot;foo&quot;, &quot;bar&quot;, 1); &#x2F;&#x2F; store the key &quot;foo&quot; and value &quot;bar&quot; along with timestamp &#x3D; 1   </span><br><span class="line">kv.get(&quot;foo&quot;, 1);  &#x2F;&#x2F; output &quot;bar&quot;   </span><br><span class="line">kv.get(&quot;foo&quot;, 3); &#x2F;&#x2F; output &quot;bar&quot; since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie &quot;bar&quot;   </span><br><span class="line">kv.set(&quot;foo&quot;, &quot;bar2&quot;, 4);   </span><br><span class="line">kv.get(&quot;foo&quot;, 4); &#x2F;&#x2F; output &quot;bar2&quot;   </span><br><span class="line">kv.get(&quot;foo&quot;, 5); &#x2F;&#x2F;output &quot;bar2&quot;   </span><br></pre></td></tr></table></figure>
<strong>Example 2:</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: inputs &#x3D; [&quot;TimeMap&quot;,&quot;set&quot;,&quot;set&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;,&quot;get&quot;], inputs &#x3D; [[],[&quot;love&quot;,&quot;high&quot;,10],[&quot;love&quot;,&quot;low&quot;,20],[&quot;love&quot;,5],[&quot;love&quot;,10],[&quot;love&quot;,15],[&quot;love&quot;,20],[&quot;love&quot;,25]]</span><br><span class="line">Output: [null,null,null,&quot;&quot;,&quot;high&quot;,&quot;high&quot;,&quot;low&quot;,&quot;low&quot;]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>Note:</strong></p>
<ul>
<li>All key/value strings are lowercase.</li>
<li>All key/value strings have length in the range [1, 100]</li>
<li>The timestamps for all TimeMap.set operations are strictly increasing.</li>
<li>1 &lt;= timestamp &lt;= 10^7</li>
<li>TimeMap.set and TimeMap.get functions will be called a total of 120000 times (combined) per test case.<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeMap</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        String val;</span><br><span class="line">        <span class="keyword">int</span> times;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(String val, <span class="keyword">int</span> times)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.times = times;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    HashMap&lt;String, List&lt;Node&gt;&gt; map;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;String, List&lt;Node&gt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, String value, <span class="keyword">int</span> timestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) map.put(key, <span class="keyword">new</span> ArrayList&lt;Node&gt;());</span><br><span class="line">        map.get(key).add(<span class="keyword">new</span> Node(value, timestamp));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key, <span class="keyword">int</span> timestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> binarySearch(map.get(key), timestamp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">binarySearch</span><span class="params">(List&lt;Node&gt; list, <span class="keyword">int</span> timestamp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = list.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (list.get(mid).times == timestamp) <span class="keyword">return</span> list.get(mid).val;</span><br><span class="line">            <span class="keyword">if</span> (list.get(mid).times &lt; timestamp)&#123;</span><br><span class="line">                <span class="keyword">if</span> (list.get(mid + <span class="number">1</span>).times &gt; timestamp) <span class="keyword">return</span> list.get(mid).val;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.get(left).times &lt;= timestamp ? list.get(left).val : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your TimeMap object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * TimeMap obj = new TimeMap();</span></span><br><span class="line"><span class="comment"> * obj.set(key,value,timestamp);</span></span><br><span class="line"><span class="comment"> * String param_2 = obj.get(key,timestamp);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Hash Table</tag>
        <tag>Divide and Conquer</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Merge Sort</title>
    <url>/2018/12/28/MergeSort/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029gy1fym950zqvbj212w0m8q9p.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeSort</span><span class="params">(a1, s, m, t, a)</span>:</span></span><br><span class="line">    i = s</span><br><span class="line">    j = m + <span class="number">1</span></span><br><span class="line">    k = s - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= m) <span class="keyword">and</span> (j &lt;= t):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (a1[i] &lt;= a1[j]):</span><br><span class="line">            a[k] = a1[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a[k] = a1[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i&lt;=m):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">        a[k] = a1[i]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (j&lt;=t):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">        a[k] = a1[j]</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeSortStep</span><span class="params">(a, s, t)</span>:</span></span><br><span class="line">    a1 = deepcopy(a)</span><br><span class="line">    <span class="keyword">if</span> (s&lt;t):</span><br><span class="line">        m = (s+t)//<span class="number">2</span></span><br><span class="line">        mergeSortStep(a1, s, m)</span><br><span class="line">        mergeSortStep(a1, m+<span class="number">1</span>, t)</span><br><span class="line">        mergeSort(a1, s, m, t, a)</span><br><span class="line"></span><br><span class="line">n = int(input(<span class="string">'Please input the number of the list: '</span>))</span><br><span class="line">a = list(map(int, input(<span class="string">'Please input the unsorted list: '</span>).split()))</span><br><span class="line">mergeSortStep(a, <span class="number">0</span>, n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    print(a[i], end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure>
<p><strong>Hint: shadow/deep copy for lists</strong></p>
<hr />]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Algorithms</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>PythonInput</title>
    <url>/2018/12/31/PythonInput/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fvx5bbi8asj212w0m8my4.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h3 id="Input-one-parameter"><a href="#Input-one-parameter" class="headerlink" title="Input one parameter"></a>Input one parameter</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = int(input(<span class="string">'Input one parameter: '</span>))</span><br></pre></td></tr></table></figure>
<h3 id="Input-muti-parameters"><a href="#Input-muti-parameters" class="headerlink" title="Input muti parameters"></a>Input muti parameters</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, y = map(int, input(<span class="string">'Input two parameters: '</span>).split(<span class="string">' '</span>))</span><br></pre></td></tr></table></figure>
<h3 id="Input-a-list"><a href="#Input-a-list" class="headerlink" title="Input a list"></a>Input a list</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = list(map(int, input(<span class="string">'Input a list'</span>).split(<span class="string">' '</span>)))</span><br></pre></td></tr></table></figure>
<h3 id="Input-muli-d-list"><a href="#Input-muli-d-list" class="headerlink" title="Input muli-d list"></a>Input muli-d list</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = []</span><br><span class="line">n = int(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    l.append(list(map(int, input().split(<span class="string">' '</span>))))</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Input</tag>
        <tag>Format</tag>
      </tags>
  </entry>
  <entry>
    <title>LARA IS BACK!</title>
    <url>/2018/09/12/ShadowOfTheTombRaiderRelease/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fv7oz31s59j21hc0u0tl6.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<hr />]]></content>
      <categories>
        <category>Tomb Raider</category>
      </categories>
      <tags>
        <tag>Game</tag>
        <tag>Tomb Raider</tag>
        <tag>Lara Croft</tag>
      </tags>
  </entry>
  <entry>
    <title>NP-Completeness</title>
    <url>/2018/12/03/NP-Completeness/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fxuntyysxzj212w0m8ab6.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="NP-completeness-and-the-classes-P-and-NP"><a href="#NP-completeness-and-the-classes-P-and-NP" class="headerlink" title="NP-completeness and the classes P and NP"></a>NP-completeness and the classes P and NP</h2><h3 id="Classes-P"><a href="#Classes-P" class="headerlink" title="Classes P"></a>Classes P</h3><p>The class P consists of those problems that are solvable in polynomial time.</p>
<p>More specifically, they are problems that can be solved in time $O(n^k)$ for some<br>constant k, where n is the size of the input to the problem.</p>
<h3 id="Classes-NP"><a href="#Classes-NP" class="headerlink" title="Classes NP"></a>Classes NP</h3><p>The class NP consists of those problems that are “verifiable” in polynomial time.</p>
<p>What do we mean by a problem being verifiable? If we were somehow given a<br>“certificate” of a solution, then we could verify that the certificate is correct in time<br>polynomial in the size of the input to the problem.</p>
<h3 id="NP-completeness"><a href="#NP-completeness" class="headerlink" title="NP-completeness"></a>NP-completeness</h3><p>Informally, a problem is in the class NPC—and we refer to it as being NP-complete if<br>it is in NP and is as “hard” as any problem in NP.</p>
<p>In the meantime, we will state without proof that if any NP-complete problem<br>can be solved in polynomial time, then every problem in NP has a polynomialtime<br>algorithm.</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h3><p><img src="https://blog.csdn.net/golden1314521/article/details/51470999" alt="P问题、NP问题、NPC问题的概念及实例证明"></p>
<h2 id="Polynomial-time"><a href="#Polynomial-time" class="headerlink" title="Polynomial time"></a>Polynomial time</h2><h3 id="Abstract-problems"><a href="#Abstract-problems" class="headerlink" title="Abstract problems"></a>Abstract problems</h3><p>To understand the class of polynomial-time solvable problems, we must first have<br>a formal notion of what a “problem” is. We define an abstract problem <strong>Q</strong> to be a<br>binary relation on a set <strong>I</strong> of problem instances and a set <strong>S</strong> of problem solutions.<br>For example, an instance for <strong>SHORTEST-PATH</strong> is a triple consisting of a graph<br>and two vertices. A solution is a sequence of vertices in the graph, with perhaps<br>the empty sequence denoting that no path exists. The problem <strong>SHORTEST-PATH</strong><br>itself is the relation that associates each instance of a graph and two vertices with<br>a shortest path in the graph that connects the two vertices. Since shortest paths are<br>not necessarily unique, a given problem instance may have more than one solution.</p>
<h3 id="Endocing"><a href="#Endocing" class="headerlink" title="Endocing"></a>Endocing</h3><p>In order for a computer program to solve an abstract problem, we must represent<br>problem instances in a way that the program understands. An encoding of a set S<br>of abstract objects is a mapping e from S to the set of binary strings.</p>
<h3 id="A-formal-language-framework"><a href="#A-formal-language-framework" class="headerlink" title="A formal-language framework"></a>A formal-language framework</h3><p>Omit!</p>
<h3 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h3><p>Show that if an algorithm makes at most a constant number of calls to polynomial-time subroutines and performs an additional amount of work that also takes polynomial time, then it runs in polynomial time. Also show that a polynomial number of calls to polynomial-time subroutines may result in an exponential-time algorithm.</p>
<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fxuk9s3tlmj20h80d6q5j.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/cf684029ly1fxuk9y886hj20hz073js2.jpg" alt=""></p>
<h2 id="Polynomial-time-verification"><a href="#Polynomial-time-verification" class="headerlink" title="Polynomial-time verification"></a>Polynomial-time verification</h2><h3 id="Hamiltonian-cycles"><a href="#Hamiltonian-cycles" class="headerlink" title="Hamiltonian cycles"></a>Hamiltonian cycles</h3><p>A hamiltonian cycle of an undirected graph $G=(V;E)$ is a simple cycle that contains each vertex in $V$. A graph that contains a hamiltonian cycle is said to be hamiltonian; otherwise, it is nonhamiltonian.</p>
<p>We can define the hamiltonian-cycle problem, “Does a graph G have a hamiltonian cycle?” as a formal language:</p>
<script type="math/tex; mode=display">HAM-CYCLE = \{(G) : G is a hamiltonian graph\}</script><p>This naive algorithm does not run in polynomial time. In fact, the hamiltonian-cycle problem is NP-complete.</p>
<h3 id="Verification-algorithms"><a href="#Verification-algorithms" class="headerlink" title="Verification algorithms"></a>Verification algorithms</h3><p>We define a verification algorithm as being a two-argument algorithm A, where one argument is an ordinary input string x and the other is a binary string y called a certificate. A two-argument algorithm A verifies an input string x if there exists a certificate y such that $A(x,y) = 1$. The language verified by a verification algorithm A is</p>
<script type="math/tex; mode=display">L = \{x \in \{0,1\}^* : there \space exists \space y \in \{0, 1\}^* such \space that \space A(x,y) = 1\}</script><h3 id="The-complexity-class-NP"><a href="#The-complexity-class-NP" class="headerlink" title="The complexity class NP"></a>The complexity class NP</h3><p>Omit!</p>
<h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><h4 id="Question-1"><a href="#Question-1" class="headerlink" title="Question 1"></a>Question 1</h4><p>Prove that if $G$ is an undirected bipartite graph with an odd number of vertices, then $G$ is nonhamiltonian.</p>
<h4 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h4><p>Let graph G be a bipartite graph with an odd number of vertices and G be Hamiltonian, meaning that there is a directed cycle that includes every vertex of G. As such, there exists a cycle in G would of odd length. However, a graph G is bipartite if and only if every cycle of G has even length. Proven by contradiction, if G is a bipartite graph with an odd number of vertices, then G is non-Hamiltonian.</p>
<h4 id="Question-2"><a href="#Question-2" class="headerlink" title="Question 2"></a>Question 2</h4><p>Show that any language in NP can be decided by an algorithm running in time $2^{O(n^k)}$ for some constant k.</p>
<h4 id="Answer-1"><a href="#Answer-1" class="headerlink" title="Answer"></a>Answer</h4><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fxukxkdlysj20go0av3zt.jpg" alt=""></p>
<h4 id="Question-3"><a href="#Question-3" class="headerlink" title="Question 3"></a>Question 3</h4><p>A hamiltonian path in a graph is a simple path that visits every vertex exactly<br>once. Show that the language $HAM-PATH = {(G, u , i): there \space is \space a \space hamiltonian \space path \space from \space u \space to \space i \space in \space graph \space G}$ belongs to NP.</p>
<h4 id="Answer-2"><a href="#Answer-2" class="headerlink" title="Answer"></a>Answer</h4><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fxuleeazmtj20gq07hgn1.jpg" alt=""></p>
<h4 id="Question-4"><a href="#Question-4" class="headerlink" title="Question 4"></a>Question 4</h4><p>Show that the hamiltonian-path problem from Exercise 34.2-6 can be solved in polynomial time on directed acyclic graphs. Give an efficient algorithm for the problem.</p>
<h4 id="Answer-3"><a href="#Answer-3" class="headerlink" title="Answer"></a>Answer</h4><p>For this particular problem, we could find a polynomial-time solution for it and then it’s proven it could be solved in polynomial-time.</p>
<p>In this following step, I will give some steps that will demonstrate it will resolve the problem:</p>
<p>1) find a path in the original graph $G$ that in-degree is zero, because for a DAG it must have a source node that in-degree is zero. If there’re more than one nodes, then there is no solution, since every node must be visited, but the zero degree should start first and if there’re more than one point, then there must be some nodes that left cannot be visited at first.</p>
<p>2) remove the source node which in-degree is zero and its neighboring edges so that we could find the next node to start, let’s assume that the left graph is $G’$.</p>
<p>3) if the left graph $G’$ has more than two nodes or vertices that have the in-degree which is zero, then we could judge that it’s unsolvable, because as I said in 1) there is no way to visit those nodes since there in-degree is zero and there should only be one to visit after its predecessor.</p>
<p>4) keep doing the 3) until we have reached the end-point, which there is no other nodes to visit. If there is some nodes that are not visited but we cannot find an edge to reach it, then it’s unsolvable, otherwise we should get the solution.</p>
<p>From the above steps, we have found the solution for the hamiltonian-path, and its complexity if $O(|E|+|V|)$, while here $|V|$ is the number of vertices in the graph and $|E|$ is the number of edges in the graph, because we have to trace the vertices and its neighborhood edges from $v<em>{1}$ to $v</em>{n}$. We know that it is done in polynomial time.</p>
<h2 id="NP-completeness-and-reducibility"><a href="#NP-completeness-and-reducibility" class="headerlink" title="NP-completeness and reducibility"></a>NP-completeness and reducibility</h2><h3 id="Reducibility"><a href="#Reducibility" class="headerlink" title="Reducibility"></a>Reducibility</h3><p>A language $L_1$ is polynomial-time reducible to a language $L_2$, written $L_1 \leq_p L_2$</p>
<p>If there exists a polynomial-time computable function $f :{0, 1}^<em> \rightarrow {0, 1}^</em>$ such that for all $x \in {0, 1}^*$,</p>
<script type="math/tex; mode=display">x \in L_1 \space if \space and \space only \space if \space f(x) \in L_2</script><p>We call the function f the <strong>reduction function</strong>, and a polynomial-time algorithm F that computes f is a <strong>reduction algorithm</strong>.</p>
<h3 id="NP-completeness-1"><a href="#NP-completeness-1" class="headerlink" title="NP-completeness"></a>NP-completeness</h3><p>A language $L \in {0,1}$ is NP-complete if</p>
<ol>
<li>$L \in NP$, and</li>
<li>$L’ \leq_p L$ for every $L’ \in NP$.</li>
</ol>
<p>If a language L satisfies property 2, but not necessarily property 1, we say that L is NP-hard. We also define NPC to be the class of NP-complete languages.</p>
<h3 id="Circuit-satisfiability"><a href="#Circuit-satisfiability" class="headerlink" title="Circuit satisfiability"></a>Circuit satisfiability</h3><p>The language CIRCUIT-SAT is therefore at least as hard as any language in NP, and since it belongs to NP, it is NP-complete.</p>
<h3 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise"></a>Exercise</h3><h4 id="Question-1-1"><a href="#Question-1-1" class="headerlink" title="Question 1"></a>Question 1</h4><p>Show that the $\leq_p$ relation is a transitive relation on languages. That is, show that if $L_1 \leq_p L_2$ and $L_2 \leq_p L_3$, then $L_1 \leq_p L_3$.</p>
<h4 id="Answer-4"><a href="#Answer-4" class="headerlink" title="Answer"></a>Answer</h4><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fxumuzljmej20gk05yq3g.jpg" alt=""></p>
<h4 id="Question-2-1"><a href="#Question-2-1" class="headerlink" title="Question 2"></a>Question 2</h4><p>A language L is complete for a language class C with respect to polynomial-time reductions if $L \in C$ and $L’ \leq_p L$ for all $L’ \in C$. Show that $\empty$ and ${0,1}^*$ are the only languages in P that are not complete for P with respect to polynomial-time reductions.</p>
<h4 id="Answer-5"><a href="#Answer-5" class="headerlink" title="Answer"></a>Answer</h4><p>Omit</p>
<h2 id="NP-completeness-proofs"><a href="#NP-completeness-proofs" class="headerlink" title="NP-completeness proofs"></a>NP-completeness proofs</h2><p>Language L is NP-complete:</p>
<ol>
<li>Prove $L \in NP$.</li>
<li>Select a known NP-complete language $L’$.</li>
<li>Describe an algorithm that computes a function $f$ mapping every instance $x \in {0,1}^*$ of $L’$ to an instance $f(x)$ of $L$.</li>
<li>Prove that the function $f$ satisfies $x \in L’$ if and only if $f(x) \in L$ for all $x \in {0,1}^*$.</li>
<li>Prove that the algorithm computing $f$ runs in polynomial time.</li>
</ol>
<h3 id="3-CNF-satisfiability"><a href="#3-CNF-satisfiability" class="headerlink" title="3-CNF satisfiability"></a>3-CNF satisfiability</h3><p>We define 3-CNF satisfiability using the following terms. A literal in a boolean formula is an occurrence of a variable or its negation. A boolean formula is in conjunctive normal form, or CNF, if it is expressed as an AND of clauses, each of which is the OR of one or more literals. A boolean formula is in 3-conjunctive normal form, or 3-CNF, if each clause has exactly three distinct literals.</p>
<h4 id="Theorem"><a href="#Theorem" class="headerlink" title="Theorem"></a>Theorem</h4><p>Satisfiability of boolean formulas in 3-conjunctive normal form is NP-complete.</p>
<h3 id="Exercises-1"><a href="#Exercises-1" class="headerlink" title="Exercises"></a>Exercises</h3><h4 id="Question-1-2"><a href="#Question-1-2" class="headerlink" title="Question 1"></a>Question 1</h4><p>Consider the straightforward (nonpolynomial-time) reduction in the proof of Theorem 34.9. Describe a circuit of size n that, when converted to a formula by this method, yields a formula whose size is exponential in n.</p>
<h4 id="Answer-6"><a href="#Answer-6" class="headerlink" title="Answer"></a>Answer</h4><h4 id="Question-2-2"><a href="#Question-2-2" class="headerlink" title="Question 2"></a>Question 2</h4><p>Suppose that someone gives you a polynomial-time algorithm to decide formula satisfiability. Describe how to use this algorithm to find satisfying assignments in polynomial time.</p>
<h4 id="Answer-7"><a href="#Answer-7" class="headerlink" title="Answer"></a>Answer</h4><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fxvn7ofocfj20gq06agn7.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/cf684029ly1fxvn8cgbw0j20gp03f0t3.jpg" alt=""></p>
<h2 id="NP-complete-problems"><a href="#NP-complete-problems" class="headerlink" title="NP-complete problems"></a>NP-complete problems</h2><p>What the F<em>*</em>!</p>
<h3 id="Exercises-2"><a href="#Exercises-2" class="headerlink" title="Exercises"></a>Exercises</h3><h4 id="Question-1-3"><a href="#Question-1-3" class="headerlink" title="Question 1"></a>Question 1</h4><p>The subgraph-isomorphism problem takes two undirected graphs $G_1$ and $G_2$, and it asks whether $G_1$ is isomorphic to a subgraph of $G_2$. Show that the subgraph-isomorphism problem is NP-complete.</p>
<h4 id="Answer-8"><a href="#Answer-8" class="headerlink" title="Answer"></a>Answer</h4><p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fxvo8qcea8j20g905575j.jpg" alt=""><br><img src="http://ww1.sinaimg.cn/large/cf684029ly1fxvo8w97ftj20i10ajgoz.jpg" alt=""></p>
<hr />]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>P</tag>
        <tag>NP</tag>
        <tag>NPC</tag>
        <tag>NPC-Complete</tag>
      </tags>
  </entry>
  <entry>
    <title>Modify Github Pages Rep for Hexo-Blog</title>
    <url>/2020/07/06/Modify-Github-Pages-Rep-for-Hexo-Blog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/github_pages_hexo.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<ul>
<li><a href="#push-a-new-branch">Push a new branch</a><ul>
<li><a href="#create-a-new-branch">Create a new branch</a></li>
<li><a href="#clone-rep-and-modify">Clone rep and modify</a></li>
<li><a href="#push-to-github">Push to github</a></li>
</ul>
</li>
<li><a href="#setup-on-a-new-device">Setup on a new device</a><ul>
<li><a href="#setup-git">Setup git</a></li>
<li><a href="#install-hexo">Install hexo</a></li>
<li><a href="#clone-rep-and-deploy">Clone rep and deploy</a></li>
</ul>
</li>
<li><a href="#tips">Tips</a></li>
</ul>
<h2 id="Push-a-new-branch"><a href="#Push-a-new-branch" class="headerlink" title="Push a new branch"></a>Push a new branch</h2><h3 id="Create-a-new-branch"><a href="#Create-a-new-branch" class="headerlink" title="Create a new branch"></a>Create a new branch</h3><p>Create a new branch like <code>hexo</code> in blog rep</p>
<p>Set the new branch as <strong>default branch</strong> in settings</p>
<h3 id="Clone-rep-and-modify"><a href="#Clone-rep-and-modify" class="headerlink" title="Clone rep and modify"></a>Clone rep and modify</h3><p>Under any local folder, clone the rep</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;&lt;Your username&gt;&#x2F;&lt;Your username&gt;.github.io.git</span><br></pre></td></tr></table></figure>
<p>Under this local rep folder, delete all items exclude <code>.git</code> folder</p>
<p>Copy all items from the original blog file exclude <code>.deploy_git</code> folder. Check if there is a file called <code>.gitignore</code> and its content looks like:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure><br>Meanwhile, focus on if there is any <code>.git</code> folder under your theme folders. Delete them all, or you will not have your themes config on your other devices.</p>
<h3 id="Push-to-github"><a href="#Push-to-github" class="headerlink" title="Push to github"></a>Push to github</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;add branch&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>Push done.</p>
<p>You could check if all items exclude item in <code>.gitignore</code> exist in your github rep.</p>
<h2 id="Setup-on-a-new-device"><a href="#Setup-on-a-new-device" class="headerlink" title="Setup on a new device"></a>Setup on a new device</h2><h3 id="Setup-git"><a href="#Setup-git" class="headerlink" title="Setup git"></a>Setup git</h3><p>Install git<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure></p>
<p>Setup global config<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourgithubname&quot;</span><br><span class="line">git config --global user.email &quot;yourgithubemail&quot;</span><br></pre></td></tr></table></figure></p>
<h3 id="Install-hexo"><a href="#Install-hexo" class="headerlink" title="Install hexo"></a>Install hexo</h3><p>Install NodeJS<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br></pre></td></tr></table></figure><br>Install npm, maybe already exist after installing nodejs<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure><br>Install hexo<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p>
<h3 id="Clone-rep-and-deploy"><a href="#Clone-rep-and-deploy" class="headerlink" title="Clone rep and deploy"></a>Clone rep and deploy</h3><p>Under any folder, clone the rep<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;&lt;Your username&gt;&#x2F;&lt;Your username&gt;.github.io.git</span><br></pre></td></tr></table></figure></p>
<p>Under the local rep folder<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p>Generate and deploy<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></p>
<p>Then you could edit and deploy your blog as usual on this new device</p>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol>
<li>Commit and push src rep to github after editing</li>
<li>Pull first on blog existed device before editing</li>
</ol>
<hr />]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Minimum Spanning Trees</title>
    <url>/2018/10/12/MinimumSpanningTrees/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fw6drerq9rj212w0m8tfl.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Growing-a-minimum-spanning-tree"><a href="#Growing-a-minimum-spanning-tree" class="headerlink" title="Growing a minimum spanning tree"></a>Growing a minimum spanning tree</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GENERIC_MST(G, w)</span><br><span class="line">A &#x3D; 0</span><br><span class="line">while A does not form a spanning tree</span><br><span class="line">    find an edge(u,v) that is safe for A</span><br><span class="line">    A &#x3D; A U &#123;(u,v)&#125;</span><br><span class="line">return A</span><br></pre></td></tr></table></figure>
<h3 id="Safe-Edge-Theorem"><a href="#Safe-Edge-Theorem" class="headerlink" title="Safe-Edge Theorem"></a>Safe-Edge Theorem</h3><p>Let G = (V, E) be a connected, undirected graph with a real-valued weight function w defined on E. Let A be a subset of E that is inclueded in some minimum spanning tree for G, let (S, V-S) be any cut of G that<br>respects A, and let (u,v) be a light edge crossing (S, V-S). Then edge(u, v) is safe for A.   </p>
<h2 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MST-KRUSKAL(G, w)</span><br><span class="line">1   A &#x3D; null</span><br><span class="line">2   for each vertex v &lt;- G.V</span><br><span class="line">3       MARK-SET(v)</span><br><span class="line">4   sort the edges of G.E into nondecreasing order by weight w</span><br><span class="line">5   for each edge(u,v) &lt;- G.E, taken in nondecreasing order by weight w</span><br><span class="line">6       if FIND-SET(u) !&#x3D; FIND-SET(v)</span><br><span class="line">7           A &#x3D; A U &#123;(u,v)&#125;</span><br><span class="line">8           UNION(u,v)</span><br><span class="line">9   return A</span><br></pre></td></tr></table></figure>
<p>The operation FIND-SET(u) returns a representative element from the set that contains u. Thus, we can determine whether two vertices u and v belong to the same tree by testing whether FIND-SET(u) equals FIND-SET(v). To combine trees, Kruskal’s algorithm calls the UNION procedure.</p>
<p>Lines 1–3 initialize the set A to the empty set and create |V| trees, one containing each vertex. The for loop in lines 5–8 examines edges in order of weight, from lowest to highest. The loop checks, for each edge (u, v), whether the endpoints u and v belong to the same tree. If they do, then the edge (u, v) cannot be added to the forest without creating a cycle, and the edge is discarded. Otherwise, the two vertices belong to different trees. In this case, line 7 adds the edge (u, v) to A, and line 8 merges the vertices in the two trees.</p>
<p>Running Time: O(ElgV)</p>
<h2 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MST-PRIM(G, W, r)</span><br><span class="line">1   for each u &lt;- G.V</span><br><span class="line">2       u.key &#x3D; infinity</span><br><span class="line">3       u.pre &#x3D; NIL</span><br><span class="line">4   r.key &#x3D; 0</span><br><span class="line">5   Q &#x3D; G.V</span><br><span class="line">6   while Q !&#x3D; null</span><br><span class="line">7       u &#x3D; EXTRACT-MIN(Q</span><br><span class="line">8       for each v &lt;- G.adj[u]</span><br><span class="line">9       if v&lt;-Q and w(u,v)&lt;v.key</span><br><span class="line">10          v.pre &#x3D; u</span><br><span class="line">11          v.key &#x3D; w(u,v)</span><br></pre></td></tr></table></figure>
<p>The running time of Prim’s algorithm depends on how we implement the minpriority queue Q.</p>
<p>If we implement Q as a binary min-heap, the total time for Prim’s algorithm is O(ElgV), which is<br>asymptotically the same as for our implementation of Kruskal’s algorithm.</p>
<p>if we use a Fibonacci heap to implement the min-priority queue Q, the running time of Prim’s<br>algorithm improves to O(E + VlgV)</p>
<hr />]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Graph Algorithms</tag>
        <tag>Minimum Spanning Trees</tag>
        <tag>Kruskal</tag>
        <tag>Prim</tag>
      </tags>
  </entry>
  <entry>
    <title>Quick Sort</title>
    <url>/2018/12/24/QuickSort/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fyhl74f8ruj212w0m8gsy.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">QuickSort</span><span class="params">(a, left, right)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> left&gt;=right:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    p = left + random.randrange(right-left+<span class="number">1</span>)</span><br><span class="line">    temp = a[left]</span><br><span class="line">    a[left] = a[p]</span><br><span class="line">    a[p] = temp</span><br><span class="line">    i = left</span><br><span class="line">    j = right</span><br><span class="line">    x = a[i]</span><br><span class="line">    <span class="keyword">while</span> (i&lt;j) :</span><br><span class="line">        <span class="keyword">while</span> (i&lt;j) <span class="keyword">and</span> (a[j]&gt;x):</span><br><span class="line">        <span class="comment"># From big to small</span></span><br><span class="line">        <span class="comment"># while (i&lt;j) and (a[j]&lt;x):</span></span><br><span class="line">            j = j - <span class="number">1</span></span><br><span class="line">        a[i] = a[j]</span><br><span class="line">        <span class="keyword">while</span> (i&lt;j) <span class="keyword">and</span> (a[i]&lt;=x):</span><br><span class="line">        <span class="comment"># From big to small</span></span><br><span class="line">        <span class="comment"># while (i&lt;j) and (a[i]&gt;=x):</span></span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">        a[j] = a[i]         </span><br><span class="line">    a[i] = x</span><br><span class="line">    QuickSort(a, left, i<span class="number">-1</span>)</span><br><span class="line">    QuickSort(a, i+<span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line">n = int(input(<span class="string">"The number of the list: "</span>))</span><br><span class="line">line = input(<span class="string">"The unsorted list: "</span>)</span><br><span class="line">a = list(map(int, line.split()))</span><br><span class="line">QuickSort(a, <span class="number">0</span>, n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    print(a[i], end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><h3 id="Keyboards-input"><a href="#Keyboards-input" class="headerlink" title="Keyboards input"></a>Keyboards input</h3><p>To convert str to speical foramt list, using split() to seperate list and convert items’ type</p>
<h3 id="Outputs-format"><a href="#Outputs-format" class="headerlink" title="Outputs format"></a>Outputs format</h3><p>To print a list in one line seperated by SPACE, using end=’ ‘, which can be used with other symbols like ‘,’</p>
<hr />]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Algorithms</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>TrieTree</title>
    <url>/2019/10/16/TrieTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="https://" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class TrieNode&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isEnd;</span><br><span class="line">    TreeNode[] sons;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sons = <span class="keyword">new</span> TreeNode[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWord</span><span class="params">(String s, TrieNode root)</span></span>&#123;</span><br><span class="line">    TreeNode cur = root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> ch: s.toCharArray())&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.sons[ch - <span class="string">'a'</span>] == <span class="keyword">null</span>) cur.sons[ch - <span class="string">'a'</span>] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">        cur = cur.sons[ch -<span class="string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    cur.isEnd = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String s, TrieNode root)</span></span>&#123;</span><br><span class="line">    TrieNode cur = root;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> ch: s.toCharArray())&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.sons[ch - <span class="string">'a'</span>] == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        cur = cur.sons[ch - <span class="string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cur.isEnd) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    TrieNode root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    String word = <span class="string">"Congratulations"</span>;</span><br><span class="line">    addWord(word, root);</span><br><span class="line">    <span class="keyword">if</span> (search(word, root)) System.out.println(<span class="string">"Congratuations!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h1 id="-1"><a href="#-1" class="headerlink" title="#"></a>#</h1><hr />]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>Union-find data structure</title>
    <url>/2018/12/27/union-find/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fyl26sdrq8j212w0m8jwg.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initial</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] friends = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) friends[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (friends[i] != i) friends[i] = find(friends[i]);</span><br><span class="line">    <span class="keyword">return</span> friends[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> si = find(i);</span><br><span class="line">    <span class="keyword">int</span> sj = find(j);</span><br><span class="line">    <span class="keyword">if</span> (si != sj) friends[si] = sj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="MakeSet"><a href="#MakeSet" class="headerlink" title="MakeSet"></a>MakeSet</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeSet</span><span class="params">(a, n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        a[i] = i</span><br></pre></td></tr></table></figure>
<h3 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    <span class="keyword">if</span> a[i] != i:</span><br><span class="line">        <span class="comment"># Optimation 1: Find with path compression</span></span><br><span class="line">        a[i] = find(a[i]) </span><br><span class="line">    <span class="keyword">return</span> a[i]</span><br></pre></td></tr></table></figure>
<h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    fx = find(x)</span><br><span class="line">    fy = find(y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fx == fy):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> rank</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    <span class="comment"># Optimation 2: Union by Rank</span></span><br><span class="line">    <span class="keyword">if</span> (rank[fx]&gt;rank[fy]):</span><br><span class="line">        a[fy] = fx</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a[fx] = fy</span><br><span class="line">        <span class="keyword">if</span> (rank[fx] == rank[fy]):</span><br><span class="line">            rank[fy] += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="Example-problem"><a href="#Example-problem" class="headerlink" title="Example problem"></a>Example problem</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>If a family is too large, it’s really not easy to judge whether two people are relatives. Give a relatives diagram and find out whether any given two people have relatives. Provisions: X and y are relatives, y and Z are relatives, then x and Z are relatives. If X and y are relatives, then x’s relatives are relatives of y, and y’s relatives are relatives of X.</p>
<h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line: three integers n, m, p, (n &lt;= 5000, m &lt;= 5000, P &lt;= 5000), respectively, denote n individuals and m relatives, and ask P about their relatives. </p>
<p>The following M lines: Mi, Mj, 1 &lt;= Mi, Mj &lt;= N, two numbers per line, indicating that Mi and Mj are related. </p>
<p>Next, line p: Pi and Pj are two numbers per line. Ask if Pi and Pj are related.</p>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>P lines, one’Yes’or’No’ per line. The answer to the $i^{th}$ question is “have” or “don’t have” relatives.</p>
<hr />]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Algorithms</tag>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>Single-Source Shortest Paths</title>
    <url>/2018/10/13/Single-SourceShortestPaths/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="http://ww1.sinaimg.cn/large/cf684029ly1fw6z6dlblbj212w0m8ti0.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><h3 id="Lemma-24-1-Subpaths-of-shortest-paths-are-shortest-paths"><a href="#Lemma-24-1-Subpaths-of-shortest-paths-are-shortest-paths" class="headerlink" title="Lemma 24.1 (Subpaths of shortest paths are shortest paths)"></a>Lemma 24.1 (Subpaths of shortest paths are shortest paths)</h3><p>Given a weighted, directed graph G = (V, E) with weight function w:E-&gt;R, let P = (v0,v1,…,vk) be a shortest path from vertex v0 to vertex vk and, for any i and j such as 0&lt;=i&lt;=j&lt;=k, let Pij = (vi,vi+1,…,vj) be the subpath of P from vertex vi to vertex vj. Then, Pij is a shortest path from vi to vj.</p>
<h3 id="Negative-weight-edges"><a href="#Negative-weight-edges" class="headerlink" title="Negative-weight edges"></a>Negative-weight edges</h3><p>Some instances of the single-source shortest-paths problem may include edges whose weights are negative. If the graph G(V,E) contains no negativeweight cycles reachable from the source s, then for all v &lt;- V , the shortest-path weight P(s,v) remains well defined, even if it has a negative value. If the graph contains a negative-weight cycle reachable from s, however, shortest-path weights are not well defined. No path from s to a vertex on the cycle can be a shortest path—we can always find a path with lower weight by following the proposed “shortest” path and then traversing the negative-weight cycle. If there is a negativeweight cycle on some path from s to v, we define P(s,v)=-infinity.</p>
<h3 id="Cycle"><a href="#Cycle" class="headerlink" title="Cycle"></a>Cycle</h3><p>As we have just seen, it cannot contain a negative-weight cycle. Nor can it contain a positive-weight cycle, since removing the cycle from the path produces a path with the same source and destination vertices and a lower path weight. </p>
<p>That leaves only 0-weight cycles. We can remove a 0-weight cycle from any path to produce another path whose weight is the same. Thus, if there is a shortest path from a source vertex s to a destination vertex v that contains a 0-weight cycle, then there is another shortest path from s to v without this cycle. As long as a shortest path has 0-weight cycles, we can repeatedly remove these cycles from the path until we have a shortest path that is cycle-free. Therefore, without loss of generality we can assume that when we are finding shortest paths, they have no cycles, i.e., they are simple paths.</p>
<h3 id="Relaxation"><a href="#Relaxation" class="headerlink" title="Relaxation"></a>Relaxation</h3><p>For each vertex v&lt;-V, we maintain an attribute v.d, which is an upper bound on the weight of a shortest path from source s to v. We call v.d a shortest-path estimate.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INITIALIZE-SINGLE-SOURCE(G,s)</span><br><span class="line">1   for each vertex v &lt;- G.V</span><br><span class="line">2       v.d &#x3D; infinity</span><br><span class="line">3       v.pre &#x3D; NIL</span><br><span class="line">4   s.d&#x3D;0</span><br></pre></td></tr></table></figure></p>
<p>The following code performs a relaxation step on edge (u,v) in O(1) time:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RELAX(u,v,w)</span><br><span class="line">1   if v.d &gt; u.d + w(u,v)</span><br><span class="line">2       v.d &#x3D; u.d + w(u,v)</span><br><span class="line">3       v.pre &#x3D; u</span><br></pre></td></tr></table></figure></p>
<h3 id="Properties-of-shortest-paths-and-relaxation"><a href="#Properties-of-shortest-paths-and-relaxation" class="headerlink" title="Properties of shortest paths and relaxation"></a>Properties of shortest paths and relaxation</h3><h4 id="Triangle-inequality-Lemma-24-10"><a href="#Triangle-inequality-Lemma-24-10" class="headerlink" title="Triangle inequality (Lemma 24.10)"></a>Triangle inequality (Lemma 24.10)</h4><p>For any edge(u,v) &lt;- E, we have d(s,v) &lt;= d(s,u) + w(u,v).</p>
<h4 id="Upper-bound-property-Lemma-24-11"><a href="#Upper-bound-property-Lemma-24-11" class="headerlink" title="Upper-bound property (Lemma 24.11)"></a>Upper-bound property (Lemma 24.11)</h4><p>We always have v.d &gt;= P(s, v) for all vertices v &lt;- V , and once v.d achieves the value d(s,v), it never changes.</p>
<h4 id="No-path-property-Corollary-24-12"><a href="#No-path-property-Corollary-24-12" class="headerlink" title="No-path property (Corollary 24.12)"></a>No-path property (Corollary 24.12)</h4><p>If there is no path from s to v, then we always have v.d = d(s,v) = infinity.</p>
<h4 id="Convergence-property-Lemma-24-14"><a href="#Convergence-property-Lemma-24-14" class="headerlink" title="Convergence property (Lemma 24.14)"></a>Convergence property (Lemma 24.14)</h4><p>If s ~&gt; u -&gt; v is a shortest path in G for some u; u,v &lt;- V , and if u.d = d(s, u) at any time prior to relaxing edge (u,v), then v.d = d(s, v) at all times afterward.</p>
<h4 id="Path-relaxation-property-Lemma-24-15"><a href="#Path-relaxation-property-Lemma-24-15" class="headerlink" title="Path-relaxation property (Lemma 24.15)"></a>Path-relaxation property (Lemma 24.15)</h4><p>If $p=(v_1,v_2,\ldots,v_k)$ is a shortest path from s=v0 to vk, and we relax the edges of p in the order (v0, v1), (v1, v2), ….,(vx-1,vk), then vk.d = d(s,vk). This property holds regardless of any other relaxation steps that occur, even if they are intermixed with relaxations of the edges of p.</p>
<h4 id="Predecessor-subgraph-property-Lemma-24-17"><a href="#Predecessor-subgraph-property-Lemma-24-17" class="headerlink" title="Predecessor-subgraph property (Lemma 24.17)"></a>Predecessor-subgraph property (Lemma 24.17)</h4><p>Once v.d = d(s,v) for all v &lt;- V , the predecessor subgraph is a shortest-paths tree rooted at s.</p>
<h2 id="The-Bellman-Ford-algorithm"><a href="#The-Bellman-Ford-algorithm" class="headerlink" title="The Bellman-Ford algorithm"></a>The Bellman-Ford algorithm</h2><p>The Bellman-Ford algorithm solves the single-source shortest-paths problem in the general case in which edge weights may be negative. The Bellman-Ford algorithm returns a boolean value indicating whether or not there is a negative-weight cycle that is reachable from the source. If there is such a cycle, the algorithm indicates that no solution exists. If there is no such cycle, the algorithm produces the shortest paths and their weights.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BELLMAN-FORD(G,w,s)</span><br><span class="line">1   INITIALIZE-SINGLE-SOURCE(G,s)</span><br><span class="line">2   for i &#x3D; 1 to |G.V|-1</span><br><span class="line">3       for each edge(u,v) &lt;- G.E</span><br><span class="line">4           RELAX(u,v,w)</span><br><span class="line">5   for each edge(u,v) &lt;- G.E</span><br><span class="line">6       if v.d &gt; u.d + w(u,v)</span><br><span class="line">7           return FALSE</span><br></pre></td></tr></table></figure>
<p>Running Time: O(VE)</p>
<h2 id="Single-source-shortest-paths-in-directed-acyclic-graphs"><a href="#Single-source-shortest-paths-in-directed-acyclic-graphs" class="headerlink" title="Single-source shortest paths in directed acyclic graphs"></a>Single-source shortest paths in directed acyclic graphs</h2><p>By relaxing the edges of a weighted dag (directed acyclic graph) $ G=(V,E) $ according to a topological sort of its vertices, we can compute shortest paths from a single source in $\Theta(V + E)$ time.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DAG-SHORTEST-PATHS(G,w,s)</span><br><span class="line">1   topologically sort the vertices of G</span><br><span class="line">2   INITIALIZE-SINGLE-SOURCE(G,s)</span><br><span class="line">3   for each vertex u, taken in topologicall sorted order</span><br><span class="line">4       for each vertex v &lt;- G.Adj[u]</span><br><span class="line">5           RELAX(u,v,w)</span><br></pre></td></tr></table></figure>
<h2 id="Dijkstra’s-algorithm"><a href="#Dijkstra’s-algorithm" class="headerlink" title="Dijkstra’s algorithm"></a>Dijkstra’s algorithm</h2><p>Dijkstra’s algorithm solves the single-source shortest-paths problem on a weighted, directed graph $G=(V, E)$ for the case in which all edge weights are nonnegative.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DIJKSTRA(G,w,s)</span><br><span class="line">1   INITIALIZE-SINGLE-SOURCE(G,s)</span><br><span class="line">2   S &#x3D; null</span><br><span class="line">3   Q &#x3D; G.V</span><br><span class="line">4   while Q !&#x3D; null</span><br><span class="line">5       u &#x3D; EXTRACT-MIN(Q)</span><br><span class="line">6       S &#x3D; S U &#123;u&#125;</span><br><span class="line">7       for each vertex v&lt;-G.Adj[u]</span><br><span class="line">8           RELAX(u,v,w)</span><br></pre></td></tr></table></figure>
<p>Dijkstra’s algorithm? It maintains the min-priority queue Q by calling three priority-queue operations: INSERT (implicit in line 3), EXTRACT-MIN(line 5), and DECREASE-KEY (implicit in RELAX, which is called in line 8).</p>
<p>The running time of Dijkstra’s algorithm depends on how we implement the min-priority queue. For a total time of $O(V^2+E)=O(V^2)$</p>
<p>If the graph is sufficiently sparse—in particular, $E = o(V^2/lgV)$—we can improve the algorithm by implementing the min-priority queue with a binary minheap. The total running time is therefore $O((V+E)lgV)$, which is $O(ElgV)$ if all vertices are reachable from the source.This running time improves upon the straightforward $O(V^2)$ time implementation if $E = o(V^2/lgV)$.</p>
<p>We can in fact achieve a running time of $O(VlgV + E)$ by implementing the min-priority queue with a Fibonacci heap</p>
<hr />]]></content>
      <categories>
        <category>Algorithms</category>
      </categories>
      <tags>
        <tag>Graph Algorithms</tag>
        <tag>Single-Source Shortest Paths</tag>
        <tag>Bellman-Ford</tag>
        <tag>Dijkstra</tag>
      </tags>
  </entry>
  <entry>
    <title>Syncing a fork repository using rebase</title>
    <url>/2020/07/10/syncing-a-fork-repo-using-rebase/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/git-github.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<p>After forking one repository, if this repository updated, we need to keep up-to-date with this upstream repository.</p>
<h2 id="Configuring-a-remote-for-a-fork"><a href="#Configuring-a-remote-for-a-fork" class="headerlink" title="Configuring a remote for a fork"></a>Configuring a remote for a fork</h2><h3 id="Check-current-configured-remote-repository-for-your-fork"><a href="#Check-current-configured-remote-repository-for-your-fork" class="headerlink" title="Check current configured remote repository for your fork."></a>Check current configured remote repository for your fork.</h3><p>Using <code>git remove -v</code> to check remote repository status.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">&gt; origin  https:&#x2F;&#x2F;github.com&#x2F;YOUR_USERNAME&#x2F;YOUR_FORK.git (fetch)</span><br><span class="line">&gt; origin  https:&#x2F;&#x2F;github.com&#x2F;YOUR_USERNAME&#x2F;YOUR_FORK.git (push)</span><br></pre></td></tr></table></figure></p>
<h3 id="Create-a-new-remote-upstream-repository"><a href="#Create-a-new-remote-upstream-repository" class="headerlink" title="Create a new remote upstream repository"></a>Create a new remote <em>upstream</em> repository</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add upstream https:&#x2F;&#x2F;github.com&#x2F;ORIGINAL_OWNER&#x2F;ORIGINAL_REPOSITORY.git</span><br></pre></td></tr></table></figure>
<h3 id="Verify"><a href="#Verify" class="headerlink" title="Verify"></a>Verify</h3><p>Verify the new <code>upstream</code> repository you’ve specified for your fork.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">&gt; origin    https:&#x2F;&#x2F;github.com&#x2F;YOUR_USERNAME&#x2F;YOUR_FORK.git (fetch)</span><br><span class="line">&gt; origin    https:&#x2F;&#x2F;github.com&#x2F;YOUR_USERNAME&#x2F;YOUR_FORK.git (push)</span><br><span class="line">&gt; upstream  https:&#x2F;&#x2F;github.com&#x2F;ORIGINAL_OWNER&#x2F;ORIGINAL_REPOSITORY.git (fetch)</span><br><span class="line">&gt; upstream  https:&#x2F;&#x2F;github.com&#x2F;ORIGINAL_OWNER&#x2F;ORIGINAL_REPOSITORY.git (push)</span><br></pre></td></tr></table></figure></p>
<h2 id="Syncing-a-fork"><a href="#Syncing-a-fork" class="headerlink" title="Syncing a fork"></a>Syncing a fork</h2><h3 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h3><p>Fetch the branches and their respective commits from the upstream repository. Commits to <code>master</code> will be stored in a local branch, <code>upstream/master</code>.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch upstream</span><br><span class="line">&gt; remote: Counting objects: 75, done.</span><br><span class="line">&gt; remote: Compressing objects: 100% (53&#x2F;53), done.</span><br><span class="line">&gt; remote: Total 62 (delta 27), reused 44 (delta 9)</span><br><span class="line">&gt; Unpacking objects: 100% (62&#x2F;62), done.</span><br><span class="line">&gt; From https:&#x2F;&#x2F;github.com&#x2F;ORIGINAL_OWNER&#x2F;ORIGINAL_REPOSITORY</span><br><span class="line">&gt;  * [new branch]      master     -&gt; upstream&#x2F;master</span><br></pre></td></tr></table></figure></p>
<h3 id="Switch-to-local-master"><a href="#Switch-to-local-master" class="headerlink" title="Switch to local master"></a>Switch to local master</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">&gt; Switched to branch &#39;master&#39;</span><br></pre></td></tr></table></figure>
<h3 id="Rebase-the-changes-from-upstream-master-into-your-local-master"><a href="#Rebase-the-changes-from-upstream-master-into-your-local-master" class="headerlink" title="Rebase the changes from upstream/master into your local master"></a>Rebase the changes from upstream/master into your local master</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase -i upstream&#x2F;master</span><br></pre></td></tr></table></figure>
<p>If no conflict, move to next step.</p>
<p>If any conflict, figure out conflict part, then add changes.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add CONFLICT_FILE</span><br></pre></td></tr></table></figure></p>
<p>Continue to rebase<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure></p>
<h3 id="Push-to-origin-master"><a href="#Push-to-origin-master" class="headerlink" title="Push to origin master"></a>Push to origin master</h3><p>Push your up-to-date local repo to origin master<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/configuring-a-remote-for-a-fork">Configuring a remote for a fork</a></li>
<li><a href="https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork">Syncing a fork</a></li>
<li><a href="https://git-scm.com/docs/git-rebase">git-rebase</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/merging-vs-rebasing">Merging vs. Rebasing</a><hr /></li>
</ul>
]]></content>
      <categories>
        <category>Git/Github</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>upgrade-hexo-next</title>
    <url>/2020/07/08/upgrade-hexo-next/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<a id="more"></a>
<h2 id="Upgrade-Hexo-to-v4-0"><a href="#Upgrade-Hexo-to-v4-0" class="headerlink" title="Upgrade Hexo to v4.0+"></a>Upgrade Hexo to v4.0+</h2><p>To upgrade to Hexo v4, change the following line in package.json in your hexo blog folder.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-  &quot;hexo&quot;: &quot;^3.9.0&quot;,</span><br><span class="line">+  &quot;hexo&quot;: &quot;^4.0.0&quot;,</span><br></pre></td></tr></table></figure></p>
<p>Then excute the following command<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm update</span><br></pre></td></tr></table></figure></p>
<p>Excute <code>hexo version</code> under your hexo blog directory to check the version upgrade</p>
<h2 id="Upgrade-NexT-to-v7-x-from-v5-x"><a href="#Upgrade-NexT-to-v7-x-from-v5-x" class="headerlink" title="Upgrade NexT to v7.x from v5.x"></a>Upgrade NexT to v7.x from v5.x</h2><p>Following <a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/UPDATE-FROM-5.1.X.md" target="_blank" rel="noopener">offical instruction</a> to upgrade</p>
<hr />]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode025-Reverse Nodes in k-Group</title>
    <url>/2021/01/11/Leetcode025-reverseNodesinkGroup/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.</p>
<p>k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.</p>
<p><strong>Follow up:</strong></p>
<ul>
<li>Could you solve the problem in O(1) extra memory space?</li>
<li>You may not alter the values in the list’s nodes, only nodes itself may be changed.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [1,2,3,4,5], k &#x3D; 2</span><br><span class="line">Output: [2,1,4,3,5]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><img src="https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [1,2,3,4,5], k &#x3D; 3</span><br><span class="line">Output: [3,2,1,4,5]</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [1,2,3,4,5], k &#x3D; 1</span><br><span class="line">Output: [1,2,3,4,5]</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: head &#x3D; [1], k &#x3D; 1</span><br><span class="line">Output: [1]</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the list is in the range sz.</li>
<li>1 &lt;= sz &lt;= 5000</li>
<li>0 &lt;= Node.val &lt;= 1000</li>
<li>1 &lt;= k &lt;= sz</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Solution-1-Recursion"><a href="#Solution-1-Recursion" class="headerlink" title="Solution 1: Recursion"></a>Solution 1: Recursion</h3><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N/k)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span> &amp;&amp; count != k) &#123; <span class="comment">// find the k+1 node</span></span><br><span class="line">            curr = curr.next;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count == k) &#123; <span class="comment">// if k+1 node is found</span></span><br><span class="line">            curr = reverseKGroup(curr, k); <span class="comment">// reverse list with k+1 node as head</span></span><br><span class="line">            <span class="comment">// head - head-pointer to direct part, </span></span><br><span class="line">            <span class="comment">// curr - head-pointer to reversed part;</span></span><br><span class="line">            <span class="keyword">while</span> (count-- &gt; <span class="number">0</span>) &#123; <span class="comment">// reverse current k-group: </span></span><br><span class="line">                ListNode tmp = head.next; <span class="comment">// tmp - next head in direct part</span></span><br><span class="line">                head.next = curr; <span class="comment">// preappending &quot;direct&quot; head to the reversed list </span></span><br><span class="line">                curr = head; <span class="comment">// move head of reversed part to a new node</span></span><br><span class="line">                head = tmp; <span class="comment">// move &quot;direct&quot; head to the next node in direct part</span></span><br><span class="line">            &#125;</span><br><span class="line">            head = curr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-2-Follow-up-no-recursion"><a href="#Solution-2-Follow-up-no-recursion" class="headerlink" title="Solution 2: Follow up, no-recursion"></a>Solution 2: Follow up, no-recursion</h3><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(1)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (ListNode i = head; i != <span class="keyword">null</span>; n++, i = i.next);</span><br><span class="line">        </span><br><span class="line">        ListNode dmy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dmy.next = head;</span><br><span class="line">        <span class="keyword">for</span>(ListNode prev = dmy, tail = head; n &gt;= k; n -= k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">                ListNode next = tail.next.next;</span><br><span class="line">                tail.next.next = prev.next;</span><br><span class="line">                prev.next = tail.next;</span><br><span class="line">                tail.next = next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            prev = tail;</span><br><span class="line">            tail = tail.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dmy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Linked List</tag>
        <tag>Recursion</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode032-Longest Valid Parentheses</title>
    <url>/2021/01/07/Leetcode032-longestValidParentheses/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;(()&quot;</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The longest valid parentheses substring is &quot;()&quot;.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;)()())&quot;</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The longest valid parentheses substring is &quot;()()&quot;.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;&quot;</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>0 &lt;= s.length &lt;= 3 * 104</li>
<li>s[i] is ‘(‘, or ‘)’.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<h3 id="Solution-1-Stack"><a href="#Solution-1-Stack" class="headerlink" title="Solution 1: Stack"></a>Solution 1: Stack</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Stack&lt;Integer&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                st.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (st.isEmpty())&#123;</span><br><span class="line">                    st.push(i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (s.charAt(st.peek()) == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                        st.pop();</span><br><span class="line">                        res = Math.max(res, i - (st.isEmpty() ? -<span class="number">1</span> : st.peek()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        st.push(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-2-DP"><a href="#Solution-2-DP" class="headerlink" title="Solution 2: DP"></a>Solution 2: DP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If s[i] is &#39;(&#39;, set dp[i] to 0,because any string end with &#39;(&#39; cannot be a valid one.</span><br><span class="line"></span><br><span class="line">Else if s[i] is &#39;)&#39;</span><br><span class="line"></span><br><span class="line">     If s[i-1] is &#39;(&#39;, dp[i] &#x3D; dp[i-2] + 2</span><br><span class="line"></span><br><span class="line">     Else if s[i-1] is &#39;)&#39; and s[i-dp[i-1]-1] &#x3D;&#x3D; &#39;(&#39;, dp[i] &#x3D; dp[i-1] + 2 + dp[i-dp[i-1]-2]</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                    dp[i] = (i - <span class="number">2</span>) &gt;= <span class="number">0</span> ? dp[i - <span class="number">2</span>] + <span class="number">2</span> : <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;<span class="comment">// if s[i-1] == &#x27;)&#x27;, combine the previous length.</span></span><br><span class="line">                    <span class="keyword">if</span> (i - dp[i - <span class="number">1</span>] - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; s.charAt(i - dp[i - <span class="number">1</span>] - <span class="number">1</span>) == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                        dp[i] = dp[i - <span class="number">1</span>] + <span class="number">2</span> + (i - dp[i - <span class="number">1</span>] - <span class="number">2</span> &gt;= <span class="number">0</span> ? dp[i - dp[i - <span class="number">1</span>] - <span class="number">2</span>] : <span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                res = Math.max(res, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//else if s[i] == &#x27;(&#x27;, skip it, because longest[i] must be 0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>DP</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode043-Multiply Strings</title>
    <url>/2021/01/05/Leetcode043-multiplyStrings/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.</p>
<p>Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: num1 &#x3D; &quot;2&quot;, num2 &#x3D; &quot;3&quot;</span><br><span class="line">Output: &quot;6&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: num1 &#x3D; &quot;123&quot;, num2 &#x3D; &quot;456&quot;</span><br><span class="line">Output: &quot;56088&quot;</span><br></pre></td></tr></table></figure><br><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= num1.length, num2.length &lt;= 200</li>
<li>num1 and num2 consist of digits only.</li>
<li>Both num1 and num2 do not contain any leading zero, except the number 0 itself.</li>
<li><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2></li>
<li><p>Time Complexity: <script type="math/tex">O(MN)</script></p>
</li>
<li>Space Complexity: <script type="math/tex">O(M + N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">multiply</span><span class="params">(String num1, String num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num1.equals(<span class="string">&quot;0&quot;</span>) || num2.equals(<span class="string">&quot;0&quot;</span>)) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] product = <span class="keyword">new</span> <span class="keyword">int</span>[num1.length() + num2.length()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num1.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = num2.length() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">int</span> a = num1.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                <span class="keyword">int</span> b = num2.charAt(j) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                product[i + j + <span class="number">1</span>] += a * b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = product.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = (product[i] + carry) % <span class="number">10</span>;</span><br><span class="line">            carry = (product[i] + carry) / <span class="number">10</span>;</span><br><span class="line">            product[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: product)</span><br><span class="line">            res.append(num);</span><br><span class="line">        <span class="keyword">while</span>(res.length() &gt; <span class="number">0</span> &amp;&amp; res.charAt(<span class="number">0</span>) == <span class="string">&#x27;0&#x27;</span>) res.deleteCharAt(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res.length() == <span class="number">0</span> ? <span class="string">&quot;0&quot;</span> : res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>Math</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode051-N-Queens</title>
    <url>/2021/01/11/Leetcode051-NQueens/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.</p>
<p>Given an integer n, return all distinct solutions to the n-queens puzzle.</p>
<p>Each solution contains a distinct board configuration of the n-queens’ placement, where ‘Q’ and ‘.’ both indicate a queen and an empty space, respectively.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2020/11/13/queens.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 4</span><br><span class="line">Output: [[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]</span><br><span class="line">Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n &#x3D; 1</span><br><span class="line">Output: [[&quot;Q&quot;]]</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N!)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<h3 id="Solution-1-Basic-Backtracking"><a href="#Solution-1-Basic-Backtracking" class="headerlink" title="Solution 1: Basic Backtracking"></a>Solution 1: Basic Backtracking</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">char</span>[][] board = <span class="keyword">new</span> <span class="keyword">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                board[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;String&gt;&gt;();</span><br><span class="line">        dfs(board, <span class="number">0</span>, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> colIndex, List&lt;List&lt;String&gt;&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(colIndex == board.length) &#123;</span><br><span class="line">            res.add(construct(board));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(validate(board, i, colIndex)) &#123;</span><br><span class="line">                board[i][colIndex] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                dfs(board, colIndex + <span class="number">1</span>, res);</span><br><span class="line">                board[i][colIndex] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; y; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == <span class="string">&#x27;Q&#x27;</span> &amp;&amp; (x + j == y + i || x + y == i + j || x == i))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">construct</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            String s = <span class="keyword">new</span> String(board[i]);</span><br><span class="line">            res.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-2-with-memory"><a href="#Solution-2-with-memory" class="headerlink" title="Solution 2: with memory"></a>Solution 2: with memory</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">char</span>[][] curr, <span class="keyword">int</span> idx, <span class="keyword">int</span> n, List&lt;List&lt;String&gt;&gt; ret, <span class="keyword">boolean</span>[] col, <span class="keyword">boolean</span>[] diag1, <span class="keyword">boolean</span>[] diag2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (idx == n) &#123;</span><br><span class="line">            List&lt;String&gt; toAdd = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">                toAdd.add(String.valueOf(curr[i]));</span><br><span class="line">            &#125;</span><br><span class="line">            ret.add(toAdd);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (col[j] || diag1[idx + n - j - <span class="number">1</span>] || diag2[idx + j]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            col[j] = <span class="keyword">true</span>;</span><br><span class="line">            diag1[idx + n - j - <span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">            diag2[idx + j] = <span class="keyword">true</span>;</span><br><span class="line">            curr[idx][j] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            solve(curr, idx + <span class="number">1</span>, n, ret, col, diag1, diag2);</span><br><span class="line">            curr[idx][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            col[j] = <span class="keyword">false</span>;</span><br><span class="line">            diag1[idx + n - j - <span class="number">1</span>] = <span class="keyword">false</span>;</span><br><span class="line">            diag2[idx + j] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[][] curr = <span class="keyword">new</span> <span class="keyword">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                curr[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span>[] col = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="keyword">boolean</span>[] diag1 = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">2</span> * n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">boolean</span>[] diag2 = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">2</span> * n - <span class="number">1</span>];</span><br><span class="line">        solve(curr, <span class="number">0</span>, n, ret, col, diag1, diag2);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Backtracking</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode068-Text Justification</title>
    <url>/2021/01/10/Leetcode068-textJustification/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.</p>
<p>You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ‘ ‘ when necessary so that each line has exactly maxWidth characters.</p>
<p>Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</p>
<p>For the last line of text, it should be left justified and no extra space is inserted between words.</p>
<p><strong>Note:</strong></p>
<ul>
<li>A word is defined as a character sequence consisting of non-space characters only.</li>
<li>Each word’s length is guaranteed to be greater than 0 and not exceed maxWidth.</li>
<li>The input array words contains at least one word.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: words &#x3D; [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;], maxWidth &#x3D; 16</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">   &quot;This    is    an&quot;,</span><br><span class="line">   &quot;example  of text&quot;,</span><br><span class="line">   &quot;justification.  &quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: words &#x3D; [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;], maxWidth &#x3D; 16</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  &quot;What   must   be&quot;,</span><br><span class="line">  &quot;acknowledgment  &quot;,</span><br><span class="line">  &quot;shall be        &quot;</span><br><span class="line">]</span><br><span class="line">Explanation: Note that the last line is &quot;shall be    &quot; instead of &quot;shall     be&quot;, because the last line must be left-justified instead of fully-justified.</span><br><span class="line">Note that the second line is also left-justified becase it contains only one word.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: words &#x3D; [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,&quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;], maxWidth &#x3D; 20</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  &quot;Science  is  what we&quot;,</span><br><span class="line">  &quot;understand      well&quot;,</span><br><span class="line">  &quot;enough to explain to&quot;,</span><br><span class="line">  &quot;a  computer.  Art is&quot;,</span><br><span class="line">  &quot;everything  else  we&quot;,</span><br><span class="line">  &quot;do                  &quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= words.length &lt;= 300</li>
<li>1 &lt;= words[i].length &lt;= 20</li>
<li>words[i] consists of only English letters and symbols.</li>
<li>1 &lt;= maxWidth &lt;= 100</li>
<li>words[i].length &lt;= maxWidth</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(len(res))</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">We start with left being the first word.</span><br><span class="line"></span><br><span class="line">findRight: Then we greedily try to go as far right as possible until we fill our current line.</span><br><span class="line"></span><br><span class="line">Then we justify one line at a time.</span><br><span class="line"></span><br><span class="line">justify: In all cases we pad the right side with spaces until we reach max width for the line;</span><br><span class="line"></span><br><span class="line">If it&#39;s one word then it is easy, the result is just that word.</span><br><span class="line">If it&#39;s the last line then the result is all words separated by a single space.</span><br><span class="line">Otherwise we calculate the size of each space evenly and if there is a remainder we distribute an extra space until it is gone.</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">fullJustify</span><span class="params">(String[] words, <span class="keyword">int</span> maxWidth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>; </span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (cur &lt; words.length) &#123;</span><br><span class="line">            <span class="keyword">int</span> curEnd = find(cur, words, maxWidth);</span><br><span class="line">            res.add(justify(cur, curEnd, words, maxWidth));</span><br><span class="line">            cur = curEnd + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> cur, String[] words, <span class="keyword">int</span> maxWidth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> curEnd = cur;</span><br><span class="line">        <span class="keyword">int</span> sum = words[curEnd++].length();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (curEnd &lt; words.length &amp;&amp; (sum + <span class="number">1</span> + words[curEnd].length()) &lt;= maxWidth)</span><br><span class="line">            sum += <span class="number">1</span> + words[curEnd++].length();</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> curEnd - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">justify</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> curEnd, String[] words, <span class="keyword">int</span> maxWidth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (curEnd == cur) <span class="keyword">return</span> pad(words[cur], maxWidth);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span> isLastLine = curEnd == words.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> numWords = curEnd - cur;</span><br><span class="line">        <span class="keyword">int</span> totalSpace = maxWidth - wordsLength(cur, curEnd, words);       </span><br><span class="line">        <span class="keyword">int</span> numSpaces = isLastLine ? <span class="number">1</span> : totalSpace / numWords;</span><br><span class="line">        <span class="keyword">int</span> remainder = isLastLine ? <span class="number">0</span> : totalSpace % numWords;</span><br><span class="line">        </span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cur; i &lt; curEnd; i++)&#123;</span><br><span class="line">            res.append(words[i]);</span><br><span class="line">            res.append(whitespace(numSpaces));</span><br><span class="line">            res.append(remainder-- &gt; <span class="number">0</span> ? <span class="string">&quot; &quot;</span> : <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.append(words[curEnd]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> isLastLine ? pad(res.toString(), maxWidth) : res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">pad</span><span class="params">(String s, <span class="keyword">int</span> maxWidth)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(s);</span><br><span class="line">        sb.append(whitespace(maxWidth - s.length()));</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">whitespace</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">wordsLength</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> curEnd, String[] words)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> wordsLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = cur; i &lt;= curEnd; i++) &#123;</span><br><span class="line">            wordsLength += words[i].length();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wordsLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1049-Last Stone Weight II</title>
    <url>/2021/01/05/Leetcode1049-lastStoneWeightII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We have a collection of rocks, each rock has a positive integer weight.</p>
<p>Each turn, we choose any two rocks and smash them together.  Suppose the stones have weights x and y with x &lt;= y.  The result of this smash is:</p>
<p>If x == y, both stones are totally destroyed;<br>If x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.<br>At the end, there is at most 1 stone left.  Return the smallest possible weight of this stone (the weight is 0 if there are no stones left.)</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,7,4,1,8,1]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: </span><br><span class="line">We can combine 2 and 4 to get 2 so the array converts to [2,7,1,8,1] then,</span><br><span class="line">we can combine 7 and 8 to get 1 so the array converts to [2,1,1,1] then,</span><br><span class="line">we can combine 2 and 1 to get 1 so the array converts to [1,1,1] then,</span><br><span class="line">we can combine 1 and 1 to get 0 so the array converts to [1] then that&#39;s the optimal value.</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= stones.length &lt;= 30</li>
<li>1 &lt;= stones[i] &lt;= 100</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>This question eaquals to partition an array into 2 subsets whose difference is minimal<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1) S1 + S2  &#x3D; S</span><br><span class="line">(2) S1 - S2 &#x3D; diff  </span><br><span class="line">&#x3D;&#x3D;&gt; -&gt; diff &#x3D; S - 2 * S2  &#x3D;&#x3D;&gt; minimize diff equals to  maximize S2 </span><br></pre></td></tr></table></figure></p>
<p>Now we should find the maximum of S2 , range from 0 to S / 2, using dp can solve this</p>
<ul>
<li>Time Complexity: <script type="math/tex">O(NS)</script> S = Sum(A), N = Length(A)</li>
<li>Space Complexity: <script type="math/tex">O(S)</script></li>
</ul>
<h3 id="Solution-1-2-D-dp-array"><a href="#Solution-1-2-D-dp-array" class="headerlink" title="Solution 1: 2-D dp array"></a>Solution 1: 2-D dp array</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastStoneWeightII</span><span class="params">(<span class="keyword">int</span>[] stones)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = stones.length;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> stone: stones) &#123;</span><br><span class="line">            sum += stone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][sum / <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= sum / <span class="number">2</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= stones[i - <span class="number">1</span>])&#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - stones[i - <span class="number">1</span>]] + stones[i - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum - <span class="number">2</span> * dp[n][sum / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-2-1-D-dp-array"><a href="#Solution-2-1-D-dp-array" class="headerlink" title="Solution 2: 1-D dp array"></a>Solution 2: 1-D dp array</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastStoneWeightII</span><span class="params">(<span class="keyword">int</span>[] stones)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = stones.length;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> stone: stones) &#123;</span><br><span class="line">            sum += stone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[sum / <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = sum / <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= stones[i - <span class="number">1</span>])&#123;</span><br><span class="line">                    dp[j] = Math.max(dp[j], dp[j - stones[i - <span class="number">1</span>]] + stones[i - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum - <span class="number">2</span> * dp[sum / <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1155-Number of Dice Rolls With Target Sum</title>
    <url>/2021/01/09/Leetcode1155-numberofDiceRollsWithTargetSum/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You have d dice, and each die has f faces numbered 1, 2, …, f.</p>
<p>Return the number of possible ways (out of fd total ways) modulo <strong>10^9 + 7</strong> to roll the dice so the sum of the face up numbers equals target.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: d &#x3D; 1, f &#x3D; 6, target &#x3D; 3</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: </span><br><span class="line">You throw one die with 6 faces.  There is only one way to get a sum of 3.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: d &#x3D; 2, f &#x3D; 6, target &#x3D; 7</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: </span><br><span class="line">You throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:</span><br><span class="line">1+6, 2+5, 3+4, 4+3, 5+2, 6+1.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: d &#x3D; 2, f &#x3D; 5, target &#x3D; 10</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: </span><br><span class="line">You throw two dice, each with 5 faces.  There is only one way to get a sum of 10: 5+5.</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: d &#x3D; 1, f &#x3D; 2, target &#x3D; 3</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: </span><br><span class="line">You throw one die with 2 faces.  There is no way to get a sum of 3.</span><br></pre></td></tr></table></figure><br><strong>Example 5:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: d &#x3D; 30, f &#x3D; 30, target &#x3D; 500</span><br><span class="line">Output: 222616187</span><br><span class="line">Explanation: </span><br><span class="line">The answer must be returned modulo 10^9 + 7.</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &lt;&#x3D; d, f &lt;&#x3D; 30</span><br><span class="line">1 &lt;&#x3D; target &lt;&#x3D; 1000</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Solution-1-2-D-DP"><a href="#Solution-1-2-D-DP" class="headerlink" title="Solution 1: 2-D DP"></a>Solution 1: 2-D DP</h3><ul>
<li>Time Complexity: <script type="math/tex">O(d * f * target)</script></li>
<li>Space Complexity: <script type="math/tex">O(d * target)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numRollsToTarget</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> f, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> MOD = (<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, <span class="number">9</span>) + <span class="number">7</span>;</span><br><span class="line">        <span class="comment">//how many possibility can i dices sum up to j;</span></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[d + <span class="number">1</span>][target + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= target; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; i * f)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= f &amp;&amp; k &lt;= j; k++)&#123;</span><br><span class="line">                    dp[i][j] = (dp[i][j] + dp[i - <span class="number">1</span>][j - k]) % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[d][target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-2-1-D-DP"><a href="#Solution-2-1-D-DP" class="headerlink" title="Solution 2: 1-D DP"></a>Solution 2: 1-D DP</h3><ul>
<li>Time Complexity: <script type="math/tex">O(d * f * target)</script></li>
<li>Space Complexity: <script type="math/tex">O(target)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numRollsToTarget</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> f, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> MOD = (<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, <span class="number">9</span>) + <span class="number">7</span>;</span><br><span class="line">    	<span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[target+<span class="number">1</span>];</span><br><span class="line">    	dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= d;i++) &#123;</span><br><span class="line">    		<span class="keyword">int</span> []temp = <span class="keyword">new</span> <span class="keyword">int</span>[target+<span class="number">1</span>];</span><br><span class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= target;j++) &#123;</span><br><span class="line">    			<span class="keyword">if</span>(j &gt; i * f)</span><br><span class="line">    				<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= f &amp;&amp; k &lt;= j;k++)</span><br><span class="line">					temp[j] = (temp[j] + dp[j - k]) % MOD;</span><br><span class="line">    		&#125;</span><br><span class="line">    		dp = temp;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-3-DFS-with-memoery"><a href="#Solution-3-DFS-with-memoery" class="headerlink" title="Solution 3: DFS with memoery"></a>Solution 3: DFS with memoery</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> MOD = (<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, <span class="number">9</span>) + <span class="number">7</span>;</span><br><span class="line">    Map&lt;String, Integer&gt; memo = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numRollsToTarget</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> f, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (d == <span class="number">0</span> &amp;&amp; target == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (d == <span class="number">0</span> || target == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String key = d + <span class="string">&quot; &quot;</span> + target;</span><br><span class="line">        <span class="keyword">if</span> (memo.containsKey(key)) <span class="keyword">return</span> memo.get(key);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= f; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; target)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res = (res + numRollsToTarget(d - <span class="number">1</span>, f, target - i)) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        memo.put(key, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1172-Dinner Plate Stacks</title>
    <url>/2021/01/21/Leetcode1172-dinnerPlateStacks/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum capacity.</p>
<p>Implement the DinnerPlates class:</p>
<ul>
<li>DinnerPlates(int capacity) Initializes the object with the maximum capacity of the stacks.</li>
<li>void push(int val) Pushes the given positive integer val into the leftmost stack with size less than capacity.</li>
<li>int pop() Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns -1 if all stacks are empty.</li>
<li>int popAtStack(int index) Returns the value at the top of the stack with the given index and removes it from that stack, and returns -1 if the stack with that given index is empty.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: </span><br><span class="line">[&quot;DinnerPlates&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;popAtStack&quot;,&quot;popAtStack&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;,&quot;pop&quot;]</span><br><span class="line">[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]</span><br><span class="line">Output: </span><br><span class="line">[null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]</span><br><span class="line"></span><br><span class="line">Explanation: </span><br><span class="line">DinnerPlates D &#x3D; DinnerPlates(2);  &#x2F;&#x2F; Initialize with capacity &#x3D; 2</span><br><span class="line">D.push(1);</span><br><span class="line">D.push(2);</span><br><span class="line">D.push(3);</span><br><span class="line">D.push(4);</span><br><span class="line">D.push(5);         &#x2F;&#x2F; The stacks are now:  2  4</span><br><span class="line">                                           1  3  5</span><br><span class="line">                                           ﹈ ﹈ ﹈</span><br><span class="line">D.popAtStack(0);   &#x2F;&#x2F; Returns 2.  The stacks are now:     4</span><br><span class="line">                                                       1  3  5</span><br><span class="line">                                                       ﹈ ﹈ ﹈</span><br><span class="line">D.push(20);        &#x2F;&#x2F; The stacks are now: 20  4</span><br><span class="line">                                           1  3  5</span><br><span class="line">                                           ﹈ ﹈ ﹈</span><br><span class="line">D.push(21);        &#x2F;&#x2F; The stacks are now: 20  4 21</span><br><span class="line">                                           1  3  5</span><br><span class="line">                                           ﹈ ﹈ ﹈</span><br><span class="line">D.popAtStack(0);   &#x2F;&#x2F; Returns 20.  The stacks are now:     4 21</span><br><span class="line">                                                        1  3  5</span><br><span class="line">                                                        ﹈ ﹈ ﹈</span><br><span class="line">D.popAtStack(2);   &#x2F;&#x2F; Returns 21.  The stacks are now:     4</span><br><span class="line">                                                        1  3  5</span><br><span class="line">                                                        ﹈ ﹈ ﹈ </span><br><span class="line">D.pop()            &#x2F;&#x2F; Returns 5.  The stacks are now:      4</span><br><span class="line">                                                        1  3 </span><br><span class="line">                                                        ﹈ ﹈  </span><br><span class="line">D.pop()            &#x2F;&#x2F; Returns 4.  The stacks are now:   1  3 </span><br><span class="line">                                                        ﹈ ﹈   </span><br><span class="line">D.pop()            &#x2F;&#x2F; Returns 3.  The stacks are now:   1 </span><br><span class="line">                                                        ﹈   </span><br><span class="line">D.pop()            &#x2F;&#x2F; Returns 1.  There are no stacks.</span><br><span class="line">D.pop()            &#x2F;&#x2F; Returns -1.  There are still no stacks.</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= capacity &lt;= 20000</li>
<li>1 &lt;= val &lt;= 20000</li>
<li>0 &lt;= index &lt;= 100000</li>
<li>At most 200000 calls will be made to push, pop, and popAtStack.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(logN)</script> for each operations</li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DinnerPlates</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Integer,Deque&lt;Integer&gt;&gt; stacks;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TreeSet&lt;Integer&gt; available;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DinnerPlates</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        stacks = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        available = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (available.isEmpty()) &#123;</span><br><span class="line">            Map.Entry&lt;Integer,Deque&lt;Integer&gt;&gt; e = stacks.lastEntry();</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) index = e.getKey() + <span class="number">1</span>;</span><br><span class="line">            available.add(index);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            index = available.first();</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;Integer&gt; stack = stacks.getOrDefault(index, <span class="keyword">new</span> ArrayDeque());</span><br><span class="line">        stack.push(val);</span><br><span class="line">        <span class="keyword">if</span> (stack.size() == capacity) available.remove(index);</span><br><span class="line">        stacks.put(index, stack);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (stacks.isEmpty())</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> popAtStack(stacks.lastKey());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">popAtStack</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!stacks.containsKey(index))</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        Deque&lt;Integer&gt; stack = stacks.get(index);</span><br><span class="line">        <span class="keyword">int</span> res = stack.pop();</span><br><span class="line">        <span class="keyword">if</span> (stack.size() == <span class="number">0</span>) stacks.remove(index);</span><br><span class="line">        available.add(index);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your DinnerPlates object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * DinnerPlates obj = new DinnerPlates(capacity);</span></span><br><span class="line"><span class="comment"> * obj.push(val);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.popAtStack(index);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Design</tag>
        <tag>TikTok</tag>
        <tag>TreeMap</tag>
        <tag>TreeSet</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1197-minimumKnightMoves</title>
    <url>/2021/01/05/Leetcode1197-minimumKnightMoves/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>In an infinite chess board with coordinates from -infinity to +infinity, you have a knight at square [0, 0].</p>
<p>A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/12/knight.png" alt=""></p>
<p>Return the minimum number of steps needed to move the knight to the square [x, y].  It is guaranteed the answer exists.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: x &#x3D; 2, y &#x3D; 1</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: [0, 0] → [2, 1]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: x &#x3D; 5, y &#x3D; 5</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: [0, 0] → [2, 1] → [4, 2] → [3, 4] → [5, 5]</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|x| + |y| &lt;&#x3D; 300</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Solution-1-BFS"><a href="#Solution-1-BFS" class="headerlink" title="Solution 1: BFS"></a>Solution 1: BFS</h3><ul>
<li>Time Complexity: <script type="math/tex">O()</script></li>
<li>Space Complexity: <script type="math/tex">O()</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Cell</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Cell</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minKnightMoves</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] dir = &#123;&#123;-<span class="number">2</span>, <span class="number">1</span>&#125;,&#123;-<span class="number">1</span>, <span class="number">2</span>&#125;,&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,&#123;<span class="number">2</span>, <span class="number">1</span>&#125;,&#123;<span class="number">2</span>, -<span class="number">1</span>&#125;,&#123;<span class="number">1</span>, -<span class="number">2</span>&#125;,&#123;-<span class="number">1</span>, -<span class="number">2</span>&#125;,&#123;-<span class="number">2</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        Queue&lt;Cell&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.offer(<span class="keyword">new</span> Cell(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        HashSet&lt;String&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        visited.add(<span class="string">&quot;0,0&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        x = Math.abs(x);</span><br><span class="line">        y = Math.abs(y);</span><br><span class="line"><span class="comment">//      so we can use nx &gt;= 0 and ny &gt;= 0, or need to use nx &gt;= -1, ny &gt;= -1   </span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span> &amp;&amp; y == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size; j++)&#123;</span><br><span class="line">                Cell cur = q.poll();</span><br><span class="line">                <span class="keyword">if</span> (cur.x == x &amp;&amp; cur.y == y)</span><br><span class="line">                    <span class="keyword">return</span> step;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span>[] d : dir)&#123;</span><br><span class="line">                    <span class="keyword">int</span> nx = cur.x + d[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">int</span> ny = cur.y + d[<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; !visited.contains(nx + <span class="string">&quot;,&quot;</span> + ny))&#123;</span><br><span class="line">                        q.offer(<span class="keyword">new</span> Cell(nx, ny));</span><br><span class="line">                        visited.add(nx + <span class="string">&quot;,&quot;</span> + ny);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-2-Recursion-with-memory-faster"><a href="#Solution-2-Recursion-with-memory-faster" class="headerlink" title="Solution 2: Recursion with memory, faster"></a>Solution 2: Recursion with memory, faster</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minKnightMoves</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        x = Math.abs(x);</span><br><span class="line">        y = Math.abs(y);</span><br><span class="line">        Map&lt;String, Integer&gt; memo = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> helper(x, y, memo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, Map&lt;String, Integer&gt; memo)</span> </span>&#123;</span><br><span class="line">        String key = x + <span class="string">&quot;,&quot;</span> + y;</span><br><span class="line">        <span class="keyword">if</span> (memo.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (x + y == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x + y == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> min = Math.min(helper(Math.abs(x - <span class="number">1</span>), Math.abs(y - <span class="number">2</span>), memo), </span><br><span class="line">                           helper(Math.abs(x - <span class="number">2</span>), Math.abs(y - <span class="number">1</span>), memo)) + <span class="number">1</span>;</span><br><span class="line">        memo.put(key, min);</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>Recursion</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1235-Maximum Profit In Job Scheduling</title>
    <url>/2021/01/04/Leetcode1235-maximumProfitInJobScheduling/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].</p>
<p>You’re given the startTime , endTime and profit arrays, you need to output the maximum profit you can take such that there are no 2 jobs in the subset with overlapping time range.</p>
<p>If you choose a job that ends at time X you will be able to start another job that starts at time X.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2019/10/10/sample1_1584.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: startTime &#x3D; [1,2,3,3], endTime &#x3D; [3,4,5,6], profit &#x3D; [50,10,40,70]</span><br><span class="line">Output: 120</span><br><span class="line">Explanation: The subset chosen is the first and fourth job. </span><br><span class="line">Time range [1-3]+[3-6] , we get profit of 120 &#x3D; 50 + 70.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><img src="https://assets.leetcode.com/uploads/2019/10/10/sample22_1584.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: startTime &#x3D; [1,2,3,4,6], endTime &#x3D; [3,5,10,6,9], profit &#x3D; [20,20,100,70,60]</span><br><span class="line">Output: 150</span><br><span class="line">Explanation: The subset chosen is the first, fourth and fifth job. </span><br><span class="line">Profit obtained 150 &#x3D; 20 + 70 + 60.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><img src="https://assets.leetcode.com/uploads/2019/10/10/sample3_1584.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: startTime &#x3D; [1,1,1], endTime &#x3D; [2,3,4], profit &#x3D; [5,6,4]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= startTime.length == endTime.length == profit.length &lt;= 5 * 10^4</li>
<li>1 &lt;= startTime[i] &lt; endTime[i] &lt;= 10^9</li>
<li>1 &lt;= profit[i] &lt;= 10^4</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(NlogN)</script> in total, sort <script type="math/tex">O(NlogN)</script>, binary search <script type="math/tex">O(NlogN)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<h3 id="Solution-1-DP-Binary-Search"><a href="#Solution-1-DP-Binary-Search" class="headerlink" title="Solution 1: DP + Binary Search"></a>Solution 1: DP + Binary Search</h3><p>Sort the jobs by endTime.</p>
<p>dp[time] = profit means that within the first time duration,</p>
<p>we cam make at most profit money.</p>
<p>Intial dp[0] = 0, as we make profit = 0 at time = 0.</p>
<p>For each job = [s, e, p], where s,e,p are its start time, end time and profit,</p>
<p>Then the logic is similar to the knapsack problem.</p>
<p>If we don’t do this job, nothing will be changed.</p>
<p>If we do this job, binary search in the dp to find the largest profit we can make before start time s.</p>
<p>So we also know the maximum cuurent profit that we can make doing this job.</p>
<p>Compare with last element in the dp,<br>we make more money,</p>
<p>it worth doing this job,</p>
<p>then we add the pair of [e, cur] to the back of dp.</p>
<p>Otherwise, we’d like not to do this job.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Job</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start;</span><br><span class="line">        <span class="keyword">int</span> end;</span><br><span class="line">        <span class="keyword">int</span> profit;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Job</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> e, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">            start = s;</span><br><span class="line">            end = e;</span><br><span class="line">            profit = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DpEntry</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> end;</span><br><span class="line">        <span class="keyword">int</span> profit;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DpEntry</span><span class="params">(<span class="keyword">int</span> e, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">            end = e;</span><br><span class="line">            profit = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jobScheduling</span><span class="params">(<span class="keyword">int</span>[] startTime, <span class="keyword">int</span>[] endTime, <span class="keyword">int</span>[] profit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = startTime.length;</span><br><span class="line">        Job[] jobs = <span class="keyword">new</span> Job[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            jobs[i] = <span class="keyword">new</span> Job(startTime[i], endTime[i], profit[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(jobs, (a, b) -&gt; (a.end - b.end));</span><br><span class="line">        </span><br><span class="line">        List&lt;DpEntry&gt; dp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        dp.add(<span class="keyword">new</span> DpEntry(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (Job job: jobs)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = dp.get(helper(dp, job.start + <span class="number">1</span>)).profit + job.profit;</span><br><span class="line">            <span class="keyword">if</span> (cur &gt; dp.get(dp.size() - <span class="number">1</span>).profit)&#123;</span><br><span class="line">                dp.add(<span class="keyword">new</span> DpEntry(job.end, cur));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.get(dp.size() - <span class="number">1</span>).profit;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(List&lt;DpEntry&gt; dp, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = dp.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left + <span class="number">1</span>&lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (dp.get(mid).end &lt; target)&#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.get(right).end &lt; target ? right : left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-2-DP-TreeMap"><a href="#Solution-2-DP-TreeMap" class="headerlink" title="Solution 2: DP + TreeMap"></a>Solution 2: DP + TreeMap</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">jobScheduling</span><span class="params">(<span class="keyword">int</span>[] startTime, <span class="keyword">int</span>[] endTime, <span class="keyword">int</span>[] profit)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = startTime.length;</span><br><span class="line">    <span class="keyword">int</span>[][] jobs = <span class="keyword">new</span> <span class="keyword">int</span>[n][<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        jobs[i] = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;startTime[i], endTime[i], profit[i]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(jobs, (a, b)-&gt;a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line">    TreeMap&lt;Integer, Integer&gt; dp = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">    dp.put(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>[] job : jobs) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = dp.floorEntry(job[<span class="number">0</span>]).getValue() + job[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (cur &gt; dp.lastEntry().getValue())</span><br><span class="line">            dp.put(job[<span class="number">1</span>], cur);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp.lastEntry().getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
        <tag>DP</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1262-Greatest Sum Divisible by Three</title>
    <url>/2021/01/10/Leetcode1262-greatestSumDivisiblebyThree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array nums of integers, we need to find the maximum possible sum of elements of the array such that it is divisible by three.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [3,6,5,1,8]</span><br><span class="line">Output: 18</span><br><span class="line">Explanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [4]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: Since 4 is not divisible by 3, do not pick any number.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [1,2,3,4,4]</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= nums.length &lt;= 4 * 10^4</li>
<li>1 &lt;= nums[i] &lt;= 10^4</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dp[i][m] &#x3D; largest sum from a subset of nums[0..i - 1] such that the remainder of sum % 3 equals m</span><br><span class="line">dp[i][0] &#x3D; max(dp[i - 1][0], dp[i - 1][0] + num[i]) when num[i] mod 3 &#x3D;&#x3D; 0</span><br><span class="line">dp[i][1] &#x3D; max(dp[i - 1][1], dp[i - 1][1] + num[i]) when num[i] mod 3 &#x3D;&#x3D; 0</span><br><span class="line">dp[i][2] &#x3D; max(dp[i - 1][2], dp[i - 1][2] + num[i]) when num[i] mod 3 &#x3D;&#x3D; 0</span><br><span class="line">   </span><br><span class="line">dp[i][0] &#x3D; max(dp[i - 1][0], dp[i - 1][2] + num[i]) when num[i] mod 3 &#x3D;&#x3D; 1</span><br><span class="line">dp[i][1] &#x3D; max(dp[i - 1][1], dp[i - 1][0] + num[i]) when num[i] mod 3 &#x3D;&#x3D; 1</span><br><span class="line">dp[i][2] &#x3D; max(dp[i - 1][2], dp[i - 1][1] + num[i]) when num[i] mod 3 &#x3D;&#x3D; 1</span><br><span class="line"></span><br><span class="line">dp[i][0] &#x3D; max(dp[i - 1][0], dp[i - 1][1] + num[i]) when num[i] mod 3 &#x3D;&#x3D; 2</span><br><span class="line">dp[i][1] &#x3D; max(dp[i - 1][1], dp[i - 1][2] + num[i]) when num[i] mod 3 &#x3D;&#x3D; 2</span><br><span class="line">dp[i][2] &#x3D; max(dp[i - 1][2], dp[i - 1][0] + num[i]) when num[i] mod 3 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">Basic case</span><br><span class="line">dp[0][0] &#x3D; 0</span><br><span class="line">dp[0][1] &#x3D; -Inf   because 0 mod 3 &#x3D;&#x3D; 1 is impossible</span><br><span class="line">dp[0][2] &#x3D; -Inf   because 0 mod 3 &#x3D;&#x3D; 2 is impossible</span><br><span class="line"></span><br><span class="line">dp[i][j] is only based on dp[i - 1][j], could use 1-D array to store dp.</span><br></pre></td></tr></table></figure>
<ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(1)</script></li>
</ul>
<h3 id="Solution-1-1-D-Array"><a href="#Solution-1-1-D-Array" class="headerlink" title="Solution 1: 1-D Array"></a>Solution 1: 1-D Array</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSumDivThree</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = Integer.MIN_VALUE;</span><br><span class="line">        dp[<span class="number">2</span>] = Integer.MIN_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] temp = Arrays.copyOf(dp, dp.length);</span><br><span class="line">            <span class="keyword">int</span> remainder = num % <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span> (remainder == <span class="number">0</span>)&#123;</span><br><span class="line">                temp[<span class="number">0</span>] = Math.max(dp[<span class="number">0</span>], num + dp[<span class="number">0</span>]);</span><br><span class="line">                temp[<span class="number">1</span>] = Math.max(dp[<span class="number">1</span>], num + dp[<span class="number">1</span>]);</span><br><span class="line">                temp[<span class="number">2</span>] = Math.max(dp[<span class="number">2</span>], num + dp[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (remainder == <span class="number">1</span>)&#123;</span><br><span class="line">                temp[<span class="number">0</span>] = Math.max(dp[<span class="number">0</span>], num + dp[<span class="number">2</span>]);</span><br><span class="line">                temp[<span class="number">1</span>] = Math.max(dp[<span class="number">1</span>], num + dp[<span class="number">0</span>]);</span><br><span class="line">                temp[<span class="number">2</span>] = Math.max(dp[<span class="number">2</span>], num + dp[<span class="number">1</span>]);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (remainder == <span class="number">2</span>)&#123;</span><br><span class="line">                temp[<span class="number">0</span>] = Math.max(dp[<span class="number">0</span>], num + dp[<span class="number">1</span>]);</span><br><span class="line">                temp[<span class="number">1</span>] = Math.max(dp[<span class="number">1</span>], num + dp[<span class="number">2</span>]);</span><br><span class="line">                temp[<span class="number">2</span>] = Math.max(dp[<span class="number">2</span>], num + dp[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            dp = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-2-Clean-1-D-Array"><a href="#Solution-2-Clean-1-D-Array" class="headerlink" title="Solution 2: Clean 1-D Array"></a>Solution 2: Clean 1-D Array</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSumDivThree</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = Integer.MIN_VALUE;</span><br><span class="line">        dp[<span class="number">2</span>] = Integer.MIN_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] temp = Arrays.copyOf(dp, dp.length);</span><br><span class="line">            <span class="keyword">int</span> remainder = num % <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                temp[i] = Math.max(dp[i], dp[(i + <span class="number">3</span> - remainder) % <span class="number">3</span>] + num);</span><br><span class="line">            &#125;</span><br><span class="line">            dp = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-3-Follow-up-divided-by-K"><a href="#Solution-3-Follow-up-divided-by-K" class="headerlink" title="Solution 3: Follow up - divided by K"></a>Solution 3: Follow up - divided by K</h3><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(K)</script><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSumDivThree</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helper(nums, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; i++)</span><br><span class="line">            dp[i] = Integer.MIN_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] temp = Arrays.copyOf(dp, dp.length);</span><br><span class="line">            <span class="keyword">int</span> remainder = num % k;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">                temp[i] = Math.max(dp[i], dp[(i + k - remainder) % k] + num);</span><br><span class="line">            &#125;</span><br><span class="line">            dp = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1296-Divide Array in Sets of K Consecutive Numbers</title>
    <url>/2021/01/05/Leetcode1296-DivideArrayinSetsofKConsecutiveNumbers/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers nums and a positive integer k, find whether it’s possible to divide this array into sets of k consecutive numbers<br>Return True if its possible otherwise return False.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [1,2,3,3,4,4,5,6], k &#x3D; 4</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6].</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [3,2,1,2,3,4,3,4,5,9,10,11], k &#x3D; 3</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [3,3,2,2,1,1], k &#x3D; 3</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [1,2,3,4], k &#x3D; 3</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Each array should be divided in subarrays of size 3.</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &lt;&#x3D; nums.length &lt;&#x3D; 10^5</span><br><span class="line">1 &lt;&#x3D; nums[i] &lt;&#x3D; 10^9</span><br><span class="line">1 &lt;&#x3D; k &lt;&#x3D; nums.length</span><br></pre></td></tr></table></figure></p>
<p>Note: This question is the same as 846: <a href="https://leetcode.com/problems/hand-of-straights/">https://leetcode.com/problems/hand-of-straights/</a></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Solution-1-Basic"><a href="#Solution-1-Basic" class="headerlink" title="Solution 1: Basic"></a>Solution 1: Basic</h3><ol>
<li>Count number of different cards to a map c</li>
<li>Loop from the smallest card number.</li>
<li>Everytime we meet a new card i, we cut off i - i + k - 1 from the counter.</li>
</ol>
<ul>
<li>Time Complexity: <script type="math/tex">O(Mlog^M + MK)</script></li>
<li>Space Complexity: <script type="math/tex">O(M)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPossibleDivide</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length % k != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        TreeMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : map.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(num) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (map.getOrDefault(num + i, <span class="number">0</span>) &lt; map.get(num)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    map.put(num + i, map.getOrDefault(num + i, <span class="number">0</span>) - map.get(num));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-2-Improved"><a href="#Solution-2-Improved" class="headerlink" title="Solution 2: Improved"></a>Solution 2: Improved</h3><ol>
<li>Count number of different cards to a map c</li>
<li>Cur represent current open straight groups.</li>
<li>In a deque start, we record the number of opened a straight group.</li>
<li>Loop from the smallest card number.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">For example, A &#x3D; [1,2,3,2,3,4], k &#x3D; 3</span><br><span class="line">We meet one 1:</span><br><span class="line">opened &#x3D; 0, we open a new straight groups starting at 1, push (1,1) to start.</span><br><span class="line">We meet two 2:</span><br><span class="line">opened &#x3D; 1, we need open another straight groups starting at 1, push (2,1) to start.</span><br><span class="line">We meet two 3:</span><br><span class="line">opened &#x3D; 2, it match current opened groups.</span><br><span class="line">We open one group at 1, now we close it. opened &#x3D; opened - 1 &#x3D; 1</span><br><span class="line">We meet one 4:</span><br><span class="line">opened &#x3D; 1, it match current opened groups.</span><br><span class="line">We open one group at 2, now we close it. opened &#x3D; opened - 1 &#x3D; 0</span><br></pre></td></tr></table></figure></li>
<li>return if no more open groups.</li>
</ol>
<ul>
<li>Time Complexity: <script type="math/tex">O(Mlog^M + N)</script></li>
<li>Space Complexity: <script type="math/tex">O(M)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPossibleDivide</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length % k != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        TreeMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;Integer&gt; start = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> pre = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : map.keySet())&#123;</span><br><span class="line">            <span class="keyword">if</span> ((cur &gt; <span class="number">0</span> &amp;&amp; num &gt; pre + <span class="number">1</span>) || cur &gt; map.get(num)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            start.add(map.get(num) - cur);</span><br><span class="line">            pre = num;</span><br><span class="line">            cur = map.get(num);</span><br><span class="line">            <span class="keyword">if</span> (start.size() == k) cur -= start.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-3-Fastest"><a href="#Solution-3-Fastest" class="headerlink" title="Solution 3: Fastest"></a>Solution 3: Fastest</h3><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script>, overall each element will be visited twice.</li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPossibleDivide</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums.length % k != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; freqMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) freqMap.put(num, freqMap.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!freqMap.containsKey(nums[i])) <span class="keyword">continue</span>;    </span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Find the start of the sequence of consecutive numbers that nums[i] belongs to.</span></span><br><span class="line">            <span class="keyword">int</span> start = nums[i];</span><br><span class="line">            <span class="keyword">while</span> (freqMap.containsKey(start - <span class="number">1</span>)) &#123;</span><br><span class="line">                start--;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Keep creating consecutive sequences of k numbers.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> m = start; m &lt;= nums[i]; ++m) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!freqMap.containsKey(m)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> numOccurrences = freqMap.get(m);    <span class="comment">// There must be this many sequences of length k that start with m.</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (freqMap.containsKey(m + j) &amp;&amp; numOccurrences &lt;= freqMap.get(m + j)) &#123;</span><br><span class="line">                        freqMap.put(m + j, freqMap.get(m + j) - numOccurrences);</span><br><span class="line">                        <span class="keyword">if</span> (freqMap.get(m + j) == <span class="number">0</span>) freqMap.remove(m + j);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;   <span class="comment">// We can&#x27;t create numOccurrences sequences of consecutive numbers starting at m.</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1345-Jump Game IV</title>
    <url>/2021/01/12/Leetcode1345-jumpGameIV/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers arr, you are initially positioned at the first index of the array.</p>
<p>In one step you can jump from index i to index:</p>
<ul>
<li>i + 1 where: i + 1 &lt; arr.length.</li>
<li>i - 1 where: i - 1 &gt;= 0.</li>
<li>j where: arr[i] == arr[j] and i != j.<br>Return the minimum number of steps to reach the last index of the array.</li>
</ul>
<p>Notice that you can not jump outside of the array at any time.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: arr &#x3D; [100,-23,-23,404,100,23,23,23,3,404]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: You need three jumps from index 0 --&gt; 4 --&gt; 3 --&gt; 9. Note that index 9 is the last index of the array.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: arr &#x3D; [7]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: Start index is the last index. You don&#39;t need to jump.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: arr &#x3D; [7,6,9,6,9,6,9,7]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: You can jump directly from index 0 to index 7 which is last index of the array.</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: arr &#x3D; [6,1,9]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><br><strong>Example 5:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: arr &#x3D; [11,22,7,7,7,7,7,7,7,22,13]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= arr.length &lt;= 5 * 104</li>
<li>-108 &lt;= arr[i] &lt;= 108</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Solution-1-BFS"><a href="#Solution-1-BFS" class="headerlink" title="Solution 1: BFS"></a>Solution 1: BFS</h3><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minJumps</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(arr[i]))&#123;</span><br><span class="line">                map.put(arr[i], <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(arr[i]).add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[arr.length];</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.offer(<span class="number">0</span>);</span><br><span class="line">        visited[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> cur = q.poll();</span><br><span class="line">                <span class="keyword">if</span> (cur == arr.length - <span class="number">1</span>) <span class="keyword">return</span> step;</span><br><span class="line">                List&lt;Integer&gt; next = map.get(arr[cur]);</span><br><span class="line">                next.add(cur - <span class="number">1</span>);</span><br><span class="line">                next.add(cur + <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> ne: next)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (ne &gt;= <span class="number">0</span> &amp;&amp; ne &lt;= arr.length - <span class="number">1</span> &amp;&amp; !visited[ne])&#123;</span><br><span class="line">                        visited[ne] = <span class="keyword">true</span>;</span><br><span class="line">                        q.offer(ne);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// to avoid visit element with same value again, for example, 7 7 7 7 2, only add 7 7 7 7for once into the queue.                 </span></span><br><span class="line">                map.put(arr[cur], <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> step;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-2-Improved-Bidirectional-BFS"><a href="#Solution-2-Improved-Bidirectional-BFS" class="headerlink" title="Solution 2: Improved : Bidirectional BFS"></a>Solution 2: Improved : Bidirectional BFS</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>()</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minJumps</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(arr[i]))&#123;</span><br><span class="line">                map.put(arr[i], <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(arr[i]).add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;(), q2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[arr.length], visited2 = <span class="keyword">new</span> <span class="keyword">boolean</span>[arr.length];</span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;    </span><br><span class="line"></span><br><span class="line">        q.offer(<span class="number">0</span>); </span><br><span class="line">        visited[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">        q2.offer(arr.length - <span class="number">1</span>); </span><br><span class="line">        visited2[arr.length - <span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Each loop does one BFS step.</span></span><br><span class="line">        <span class="keyword">while</span> (q.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Always make the next step with the cheaper search, swap if necessary.</span></span><br><span class="line">            <span class="keyword">if</span> (q2.size() &lt; q.size()) &#123;</span><br><span class="line">                Queue&lt;Integer&gt; temp = q;</span><br><span class="line">                q = q2; </span><br><span class="line">                q2 = temp;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">boolean</span>[] temps = visited;</span><br><span class="line">                visited = visited2; </span><br><span class="line">                visited2 = temps;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Standard BFS step code.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = q.size(); i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">                <span class="keyword">int</span> cur = q.poll();       </span><br><span class="line">                <span class="keyword">if</span> (visited2[cur]) <span class="keyword">return</span> step;   <span class="comment">// Check if the two BFS searches meet.</span></span><br><span class="line"></span><br><span class="line">                List&lt;Integer&gt; next = map.get(arr[cur]);</span><br><span class="line">                next.add(cur - <span class="number">1</span>);</span><br><span class="line">                next.add(cur + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// Iterate through next possible steps, add unseen ones to the queue.</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> ne : next) &#123;                    </span><br><span class="line">                    <span class="keyword">if</span> (ne &gt;= <span class="number">0</span> &amp;&amp; ne &lt; arr.length &amp;&amp; !visited[ne]) &#123;</span><br><span class="line">                        visited[ne] = <span class="keyword">true</span>;</span><br><span class="line">                        q.offer(ne);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// We remove edges that we go over. We already added all these indices to the queue, there is no need to ever go over them again.</span></span><br><span class="line">                map.put(arr[cur], <span class="keyword">new</span> ArrayList&lt;&gt;());   </span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> step;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1352-Product Of The Last K Numbers</title>
    <url>/2020/12/27/Leetcode1352-productOfTheLastKNumbers/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Implement the class ProductOfNumbers that supports two methods:</p>
<ol>
<li>add(int num)</li>
</ol>
<p>Adds the number num to the back of the current list of numbers.</p>
<ol>
<li>getProduct(int k)</li>
</ol>
<p>Returns the product of the last k numbers in the current list.<br>You can assume that always the current list has at least k numbers.<br>At any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;ProductOfNumbers&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;add&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;getProduct&quot;,&quot;add&quot;,&quot;getProduct&quot;]</span><br><span class="line">[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]</span><br><span class="line"></span><br><span class="line">Output</span><br><span class="line">[null,null,null,null,null,null,20,40,0,null,32]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">ProductOfNumbers productOfNumbers &#x3D; new ProductOfNumbers();</span><br><span class="line">productOfNumbers.add(3);        &#x2F;&#x2F; [3]</span><br><span class="line">productOfNumbers.add(0);        &#x2F;&#x2F; [3,0]</span><br><span class="line">productOfNumbers.add(2);        &#x2F;&#x2F; [3,0,2]</span><br><span class="line">productOfNumbers.add(5);        &#x2F;&#x2F; [3,0,2,5]</span><br><span class="line">productOfNumbers.add(4);        &#x2F;&#x2F; [3,0,2,5,4]</span><br><span class="line">productOfNumbers.getProduct(2); &#x2F;&#x2F; return 20. The product of the last 2 numbers is 5 * 4 &#x3D; 20</span><br><span class="line">productOfNumbers.getProduct(3); &#x2F;&#x2F; return 40. The product of the last 3 numbers is 2 * 5 * 4 &#x3D; 40</span><br><span class="line">productOfNumbers.getProduct(4); &#x2F;&#x2F; return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 &#x3D; 0</span><br><span class="line">productOfNumbers.add(8);        &#x2F;&#x2F; [3,0,2,5,4,8]</span><br><span class="line">productOfNumbers.getProduct(2); &#x2F;&#x2F; return 32. The product of the last 2 numbers is 4 * 8 &#x3D; 32 </span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li>There will be at most 40000 operations considering both add and getProduct.</li>
<li>0 &lt;= num &lt;= 100</li>
<li>1 &lt;= k &lt;= 40000</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(1) each</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductOfNumbers</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; prefixProduction;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductOfNumbers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        prefixProduction = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        prefixProduction.add(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            prefixProduction.add(prefixProduction.get(prefixProduction.size() - <span class="number">1</span>) * num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            prefixProduction = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            prefixProduction.add(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProduct</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = prefixProduction.size();</span><br><span class="line">        <span class="keyword">return</span> k &gt;= len ? <span class="number">0</span> : prefixProduction.get(len - <span class="number">1</span>) / prefixProduction.get(len - k - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your ProductOfNumbers object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * ProductOfNumbers obj = new ProductOfNumbers();</span></span><br><span class="line"><span class="comment"> * obj.add(num);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.getProduct(k);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Design</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode1531-String Compression II</title>
    <url>/2022/01/10/Leetcode1531-stringCompressionII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Run-length encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string “aabccc” we replace “aa” by “a2” and replace “ccc” by “c3”. Thus the compressed string becomes “a2bc3”.</p>
<p>Notice that in this problem, we are not adding ‘1’ after single characters.</p>
<p>Given a string s and an integer k. You need to delete at most k characters from s such that the run-length encoded version of s has minimum length.</p>
<p>Find the minimum length of the run-length encoded version of s after deleting at most k characters.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;aaabcccd&quot;, k &#x3D; 2</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Compressing s without deleting anything will give us &quot;a3bc3d&quot; of length 6. Deleting any of the characters &#39;a&#39; or &#39;c&#39; would at most decrease the length of the compressed string to 5, for instance delete 2 &#39;a&#39; then we will have s &#x3D; &quot;abcccd&quot; which compressed is abc3d. Therefore, the optimal way is to delete &#39;b&#39; and &#39;d&#39;, then the compressed version of s will be &quot;a3c3&quot; of length 4.</span><br></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;aabbaa&quot;, k &#x3D; 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: If we delete both &#39;b&#39; characters, the resulting compressed string would be &quot;a4&quot; of length 2.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s &#x3D; &quot;aaaaaaaaaaa&quot;, k &#x3D; 0</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Since k is zero, we cannot delete anything. The compressed string is &quot;a11&quot; of length 3.</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= s.length &lt;= 100</li>
<li>0 &lt;= k &lt;= s.length</li>
<li>s contains only lowercase English letters.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(n^2k)</script></li>
<li>Space Complexity: <script type="math/tex">O(nk)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// We define the state dp[i][k]: the minimum length for s.substring(0, i+1) with at most k deletion.</span></span><br><span class="line"><span class="comment">// For each char s[i], we can either keep it or delete it.</span></span><br><span class="line"><span class="comment">// If delete, dp[i][j]=dp[i-1][j-1].</span></span><br><span class="line"><span class="comment">// If keep, we delete at most j chars in s.substring(0, i+1) that are different from s[i].</span></span><br><span class="line"><span class="comment">// O(kn^2)</span></span><br><span class="line"><span class="comment">// 状态定义：T(i, k) 表示 [i, n) 范围内、最多可删除 k 个字符的最优解</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态转移：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除字符。T(i+1, k-1)，if k &gt; 0</span></span><br><span class="line"><span class="comment">// 保留字符。枚举以 s[i] 为首的字符组的所有可能结束位置 j，encodeOne(sameCount([i, j+1))) + T(j+1, k - diffCount([i, j+1))，if k - diffCount([i, j+1) &gt;= 0</span></span><br><span class="line"><span class="comment">// 其中，sameCount([i, j+1)) 表示 [i, j+1) 范围内与 s[i] 相同的字符个数，则 diffCount([i, j+1)) = (j+1-i) - sameCount([i, j+1)) 为 [i, j+1) 内与 s[i] 不同的字符个数，即 [i, j+1) 内被删除的字符个数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLengthOfOptimalCompression</span><span class="params">(String s, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][k + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= k; j++)&#123;</span><br><span class="line">                dp[i][j] = <span class="number">10000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= k; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> delete = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> m = i; m &gt;= <span class="number">1</span>; m--)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (s.charAt(m - <span class="number">1</span>) == s.charAt(i - <span class="number">1</span>))&#123;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        delete++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (j - delete &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                        dp[i][j] = Math.min(dp[i][j], dp[m - <span class="number">1</span>][j - delete] + <span class="number">1</span> + (count &gt;= <span class="number">100</span> ? <span class="number">3</span> : count &gt;= <span class="number">10</span> ? <span class="number">2</span> : count &gt;= <span class="number">2</span> ? <span class="number">1</span> : <span class="number">0</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n][k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode162-Find Peek Element</title>
    <url>/2021/01/05/Leetcode162-findPeekElement/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A peak element is an element that is strictly greater than its neighbors.</p>
<p>Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.</p>
<p>You may imagine that nums[-1] = nums[n] = -∞.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [1,2,3,1]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: 3 is a peak element and your function should return the index number 2.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [1,2,1,3,5,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= nums.length &lt;= 1000</li>
<li>-231 &lt;= nums[i] &lt;= 231 - 1</li>
<li>nums[i] != nums[i + 1] for all valid i.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(log^N)</script></li>
<li>Space Complexity: <script type="math/tex">O(1)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findPeakElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid1 = (left + right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> mid2 = mid1 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid1] &lt; nums[mid2])</span><br><span class="line">            left = mid2;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right = mid1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Binary Search</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode167-Two Sum II-Input Array Is Sorted</title>
    <url>/2020/12/25/Leetcode167-twoSumII-InputArrayIsSorted/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.</p>
<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.</p>
<p><strong>Note:</strong></p>
<ul>
<li>Your returned answers (both index1 and index2) are not zero-based.</li>
<li>You may assume that each input would have exactly one solution and you may not use the same element twice.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: numbers &#x3D; [2,7,11,15], target &#x3D; 9</span><br><span class="line">Output: [1,2]</span><br><span class="line">Explanation: The sum of 2 and 7 is 9. Therefore index1 &#x3D; 1, index2 &#x3D; 2.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: numbers &#x3D; [2,3,4], target &#x3D; 6</span><br><span class="line">Output: [1,3]</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: numbers &#x3D; [-1,0], target &#x3D; -1</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>2 &lt;= nums.length &lt;= 3 * 104</li>
<li>-1000 &lt;= nums[i] &lt;= 1000</li>
<li>nums is sorted in increasing order.</li>
<li><p>-1000 &lt;= target &lt;= 1000</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2></li>
<li><p>Time Complexity: <script type="math/tex">O(N)</script></p>
</li>
<li>Space Complexity: <script type="math/tex">O(1)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = numbers.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">            <span class="keyword">int</span> cur = numbers[i] + numbers[j];</span><br><span class="line">            <span class="keyword">if</span> (cur == target)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cur &lt; target)&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i + <span class="number">1</span>, j + <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode179-Largest Number</title>
    <url>/2021/01/05/Leetcode179-largestNumber/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a list of non-negative integers nums, arrange them such that they form the largest number.</p>
<p>Note: The result may be very large, so you need to return a string instead of an integer.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [10,2]</span><br><span class="line">Output: &quot;210&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [3,30,34,5,9]</span><br><span class="line">Output: &quot;9534330&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [1]</span><br><span class="line">Output: &quot;1&quot;</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [10]</span><br><span class="line">Output: &quot;10&quot;</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= nums.length &lt;= 100</li>
<li>0 &lt;= nums[i] &lt;= 10^9</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(Nlog^N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        String[] sarr = <span class="keyword">new</span> String[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            sarr[i] = String.valueOf(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(sarr, <span class="keyword">new</span> Comparator&lt;String&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String a, String b)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (b + a).compareTo(a + b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (String str: sarr)</span><br><span class="line">            res.append(str);</span><br><span class="line">        <span class="keyword">if</span> (res.charAt(<span class="number">0</span>) == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Sort</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode280-Wiggle Sort</title>
    <url>/2022/01/10/Leetcode280-wiggleSort/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer array nums, reorder it such that nums[0] &lt;= nums[1] &gt;= nums[2] &lt;= nums[3]….</p>
<p>You may assume the input array always has a valid answer.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [3,5,2,1,6,4]</span><br><span class="line">Output: [3,5,1,6,2,4]</span><br><span class="line">Explanation: [1,6,2,5,3,4] is also accepted.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [6,6,5,6,3,8]</span><br><span class="line">Output: [6,6,5,6,3,8]</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= nums.length &lt;= 5 * 104</li>
<li>0 &lt;= nums[i] &lt;= 104</li>
<li>It is guaranteed that there will be an answer for the given input nums.</li>
</ul>
<p><strong>Follow up:</strong> Could you solve the problem in O(n) time complexity?</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1:</strong> Sort, O(NlogN)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wiggleSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length - <span class="number">1</span>; i += <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; nums[i] &lt; nums[i + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">                nums[i] = nums[i + <span class="number">1</span>];</span><br><span class="line">                nums[i + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>Solution 2:</strong> Greedy, O(N)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//     Assume [0,i-1] are all wiggled</span></span><br><span class="line"><span class="comment">//     for position i</span></span><br><span class="line"><span class="comment">//     if i is even, then a[i - 2] &lt;= a[i - 1]</span></span><br><span class="line"><span class="comment">//     if a[i - 1] &gt;= a[i], pass</span></span><br><span class="line"><span class="comment">//     if a[i - 1] &lt; a[i], swap a[i - 1] with a[i]. Since a[i - 2] &lt;= a[i -1], so a[i - 2] &lt; a[i], so [0, i] wiggled after swapping</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//     if i is odd, then a[i - 2] &gt;= a[i - 1]</span></span><br><span class="line"><span class="comment">//     if a[i - 1] &lt;= a[i], pass</span></span><br><span class="line"><span class="comment">//     if a[i - 1] &gt; a[i], swap a[i - 1] with a[i]. Since a[i - 2] &gt;= a[i - 1], so a[i - 2] &gt; a[i], so [0, i]wiggled after swapping </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wiggleSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i - <span class="number">1</span>] &lt; nums[i])&#123;</span><br><span class="line">                    swap(nums, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i - <span class="number">1</span>] &gt; nums[i])&#123;</span><br><span class="line">                    swap(nums, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> idx)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[idx - <span class="number">1</span>];</span><br><span class="line">        nums[idx - <span class="number">1</span>] = nums[idx];</span><br><span class="line">        nums[idx] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Array</tag>
        <tag>Greedy</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode350-intersectionOfTwoArraysII</title>
    <url>/2020/12/25/Leetcode350-intersectionOfTwoArraysII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two arrays, write a function to compute their intersection.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]</span><br><span class="line">Output: [2,2]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]</span><br><span class="line">Output: [4,9]</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ul>
<li>Each element in the result should appear as many times as it shows in both arrays.</li>
<li><p>The result can be in any order.<br><strong>Follow up:</strong></p>
</li>
<li><p>What if the given array is already sorted? How would you optimize your algorithm?</p>
</li>
<li>What if nums1’s size is small compared to nums2’s size? Which algorithm is better?</li>
<li>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersect(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums1)&#123;</span><br><span class="line">            map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(num) &amp;&amp; map.get(num) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                map.put(num, map.get(num) - <span class="number">1</span>);</span><br><span class="line">                res.add(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[res.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.size(); i++)</span><br><span class="line">            ans[i] = res.get(i);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Follow up</strong></p>
<ol>
<li>Two pointer iteration.</li>
<li>Let’s say nums1 is K size. Then we should do binary search for every element in nums1. Each lookup is O(log N), and if we do K times, we have O(K log N). If K this is small enough, O(K log N) &lt; O(max(N, M)). Otherwise, we have to use the previous two pointers method.</li>
<li>External Merge-Sort / MapReduced?</li>
</ol>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>Binary Search</tag>
        <tag>Hash Map</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode351-Android Unlock Patterns</title>
    <url>/2021/01/21/Leetcode351-androidUnlockPatterns/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Android devices have a special lock screen with a 3 x 3 grid of dots. Users can set an “unlock pattern” by connecting the dots in a specific sequence, forming a series of joined line segments where each segment’s endpoints are two consecutive dots in the sequence. A sequence of k dots is a valid unlock pattern if both of the following are true:</p>
<ul>
<li>All the dots in the sequence are distinct.</li>
<li>If the line segment connecting two consecutive dots in the sequence passes through any other dot, the other dot must have previously appeared in the sequence. No jumps through non-selected dots are allowed.</li>
</ul>
<p>Here are some example valid and invalid unlock patterns:<br><img src="https://assets.leetcode.com/uploads/2018/10/12/android-unlock.png" alt=""></p>
<ul>
<li>The 1st pattern [4,1,3,6] is invalid because the line connecting dots 1 and 3 pass through dot 2, but dot 2 did not previously appear in the sequence.</li>
<li>The 2nd pattern [4,1,9,2] is invalid because the line connecting dots 1 and 9 pass through dot 5, but dot 5 did not previously appear in the sequence.</li>
<li>The 3rd pattern [2,4,1,3,6] is valid because it follows the conditions. The line connecting dots 1 and 3 meets the condition because dot 2 previously appeared in the sequence.</li>
<li>The 4th pattern [6,5,4,1,9,2] is valid because it follows the conditions. The line connecting dots 1 and 9 meets the condition because dot 5 previously appeared in the sequence.</li>
</ul>
<p>Given two integers m and n, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of at least m keys and at most n keys.</p>
<p>Two unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: m &#x3D; 1, n &#x3D; 1</span><br><span class="line">Output: 9</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: m &#x3D; 1, n &#x3D; 2</span><br><span class="line">Output: 65</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &lt;&#x3D; m, n &lt;&#x3D; 9</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(n!)</script></li>
<li>Space Complexity: <script type="math/tex">O(n)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfPatterns</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Skip array represents number to skip between two pairs</span></span><br><span class="line">        <span class="keyword">int</span> skip[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">        skip[<span class="number">1</span>][<span class="number">3</span>] = skip[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        skip[<span class="number">1</span>][<span class="number">7</span>] = skip[<span class="number">7</span>][<span class="number">1</span>] = <span class="number">4</span>;</span><br><span class="line">        skip[<span class="number">3</span>][<span class="number">9</span>] = skip[<span class="number">9</span>][<span class="number">3</span>] = <span class="number">6</span>;</span><br><span class="line">        skip[<span class="number">7</span>][<span class="number">9</span>] = skip[<span class="number">9</span>][<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">        skip[<span class="number">1</span>][<span class="number">9</span>] = skip[<span class="number">9</span>][<span class="number">1</span>] = skip[<span class="number">2</span>][<span class="number">8</span>] = skip[<span class="number">8</span>][<span class="number">2</span>] = skip[<span class="number">3</span>][<span class="number">7</span>] = skip[<span class="number">7</span>][<span class="number">3</span>] = skip[<span class="number">4</span>][<span class="number">6</span>] = skip[<span class="number">6</span>][<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">boolean</span> vis[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> rst = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// DFS search each length from m to n</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = m; i &lt;= n; ++i) &#123;</span><br><span class="line">            rst += DFS(vis, skip, <span class="number">1</span>, i - <span class="number">1</span>) * <span class="number">4</span>;    <span class="comment">// 1, 3, 7, 9 are symmetric</span></span><br><span class="line">            rst += DFS(vis, skip, <span class="number">2</span>, i - <span class="number">1</span>) * <span class="number">4</span>;    <span class="comment">// 2, 4, 6, 8 are symmetric</span></span><br><span class="line">            rst += DFS(vis, skip, <span class="number">5</span>, i - <span class="number">1</span>);        <span class="comment">// 5</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rst;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cur: the current position</span></span><br><span class="line">    <span class="comment">// remain: the steps remaining</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">boolean</span> vis[], <span class="keyword">int</span>[][] skip, <span class="keyword">int</span> cur, <span class="keyword">int</span> remain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(remain &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(remain == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        vis[cur] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> rst = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i) &#123;</span><br><span class="line">            <span class="comment">// If vis[i] is not visited and (two numbers are adjacent or skip number is already visited)</span></span><br><span class="line">            <span class="keyword">if</span>(!vis[i] &amp;&amp; (skip[cur][i] == <span class="number">0</span> || (vis[skip[cur][i]]))) &#123;</span><br><span class="line">                rst += DFS(vis, skip, i, remain - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[cur] = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> rst;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode386-Lexicographical Numbers</title>
    <url>/2021/01/06/Leetcode386-lexicographicalNumbers/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer n, return 1 - n in lexicographical order.</p>
<p>For example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9].</p>
<p>Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">lexicalOrder</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">            helper(i, n, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> n, List&lt;Integer&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur &gt; n)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        res.add(cur);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> newInt = cur * <span class="number">10</span> + i;</span><br><span class="line">            <span class="keyword">if</span> (newInt &gt; n) <span class="keyword">return</span>;</span><br><span class="line">            helper(newInt, n, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode407-Trapping Rain Water II</title>
    <url>/2021/01/03/Leetcode407-trappingRainWaterII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an m x n matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given the following 3x6 height map:</span><br><span class="line">[</span><br><span class="line">  [1,4,3,1,3,2],</span><br><span class="line">  [3,2,1,3,2,4],</span><br><span class="line">  [2,3,3,2,3,1]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Return 4.</span><br></pre></td></tr></table></figure>
<p><img src="https://assets.leetcode.com/uploads/2018/10/13/rainwater_empty.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The above image represents the elevation map [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]] before the rain.</span><br></pre></td></tr></table></figure><br><img src="https://assets.leetcode.com/uploads/2018/10/13/rainwater_fill.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">After the rain, water is trapped between the blocks. The total volume of water trapped is 4.</span><br></pre></td></tr></table></figure><br><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= m, n &lt;= 110</li>
<li>0 &lt;= heightMap[i][j] &lt;= 20000</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(M * N)</script></li>
<li>Space Complexity: <script type="math/tex">O(M * N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Cell</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row;</span><br><span class="line">        <span class="keyword">int</span> col;</span><br><span class="line">        <span class="keyword">int</span> height;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Cell</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> c, <span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">            row = r;</span><br><span class="line">            col = c;</span><br><span class="line">            height = h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">trapRainWater</span><span class="params">(<span class="keyword">int</span>[][] heightMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (heightMap.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = heightMap.length, n = heightMap[<span class="number">0</span>].length;</span><br><span class="line">        PriorityQueue&lt;Cell&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;Cell&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Cell c1, Cell c2)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> c1.height - c2.height; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            visited[i][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">            visited[i][n - <span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">            pq.offer(<span class="keyword">new</span> Cell(i, <span class="number">0</span>, heightMap[i][<span class="number">0</span>]));</span><br><span class="line">            pq.offer(<span class="keyword">new</span> Cell(i, n - <span class="number">1</span>, heightMap[i][n - <span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            visited[<span class="number">0</span>][i] = <span class="keyword">true</span>;</span><br><span class="line">            visited[m- <span class="number">1</span>][i] = <span class="keyword">true</span>;</span><br><span class="line">            pq.offer(<span class="keyword">new</span> Cell(<span class="number">0</span>, i, heightMap[<span class="number">0</span>][i]));</span><br><span class="line">            pq.offer(<span class="keyword">new</span> Cell(m - <span class="number">1</span>, i, heightMap[m - <span class="number">1</span>][i]));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] dir = &#123;<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty())&#123;</span><br><span class="line">            Cell cur = pq.poll();</span><br><span class="line">            <span class="keyword">int</span> row = cur.row, col = cur.col, height = cur.height;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> nx = row + dir[i];</span><br><span class="line">                <span class="keyword">int</span> ny = col + dir[i + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (nx &gt; <span class="number">0</span> &amp;&amp; nx &lt; m - <span class="number">1</span> &amp;&amp; ny &gt; <span class="number">0</span> &amp;&amp; ny &lt; n - <span class="number">1</span> &amp;&amp; !visited[nx][ny])&#123;</span><br><span class="line">                    visited[nx][ny] = <span class="keyword">true</span>;</span><br><span class="line">                    res += Math.max(<span class="number">0</span>, height - heightMap[nx][ny]);</span><br><span class="line">                    pq.offer(<span class="keyword">new</span> Cell(nx, ny, Math.max(height, heightMap[nx][ny])));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>Heap</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode435 Non-overlapping Intervals</title>
    <url>/2021/01/05/Leetcode435non-overlappingIntervals/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,2],[2,3],[3,4],[1,3]]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,2],[1,2],[1,2]]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[1,2],[2,3]]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: You don&#39;t need to remove any of the intervals since they&#39;re already non-overlapping.</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ul>
<li>You may assume the interval’s end point is always bigger than its start point.</li>
<li>Intervals like [1,2] and [2,3] have borders “touching” but they don’t overlap each other.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Minimum number of intervals you need to remove == find the maximum number of intervals that are non-overlapping</p>
<ul>
<li>Time Complexity: <script type="math/tex">O(Nlog^N)</script></li>
<li>Space Complexity: <script type="math/tex">O(1)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(<span class="keyword">int</span>[][] intervals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intervals.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Arrays.sort(intervals, (a, b)-&gt;a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> end = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; intervals.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt;= end)&#123;</span><br><span class="line">                max++;</span><br><span class="line">                end = intervals[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> intervals.length - max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Similiar Problem</strong></p>
<ul>
<li>56 Merge Intervals</li>
<li>252 Meeting Rooms</li>
<li>253 Meeting Rooms II</li>
<li>452 Minimum Number of Arrows to Burst Balloons<hr /></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Greedy</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode449-Serialize And Deserialize BST</title>
    <url>/2021/01/04/Leetcode449-serializeAndDeserializeBST/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>
<p>Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.</p>
<p><strong>The encoded string should be as compact as possible.</strong></p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [2,1,3]</span><br><span class="line">Output: [2,1,3]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; []</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range [0, 104].</li>
<li>0 &lt;= Node.val &lt;= 104</li>
<li>The input tree is guaranteed to be a binary search tree.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">serialize</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        serializeHelper(sb, root);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">serializeHelper</span><span class="params">(StringBuilder sb, TreeNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        sb.append(node.val);</span><br><span class="line">        sb.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        serializeHelper(sb, node.left);</span><br><span class="line">        serializeHelper(sb, node.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deserialize</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Queue&lt;String&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;(Arrays.asList(data.split(<span class="string">&quot;,&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span> deserializeHelper(q, Integer.MIN_VALUE, Integer.MAX_VALUE);   </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">deserializeHelper</span><span class="params">(Queue&lt;String&gt; q, <span class="keyword">int</span> min, <span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (q.isEmpty()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = Integer.parseInt(q.peek());</span><br><span class="line">        <span class="keyword">if</span> (cur &lt; min || cur &gt; max) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        q.poll();</span><br><span class="line">        TreeNode node = <span class="keyword">new</span> TreeNode(cur);</span><br><span class="line">        node.left = deserializeHelper(q, min, cur);</span><br><span class="line">        node.right = deserializeHelper(q, cur, max);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec ser = new Codec();</span></span><br><span class="line"><span class="comment">// Codec deser = new Codec();</span></span><br><span class="line"><span class="comment">// String tree = ser.serialize(root);</span></span><br><span class="line"><span class="comment">// TreeNode ans = deser.deserialize(tree);</span></span><br><span class="line"><span class="comment">// return ans;</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Tree</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode493-Reverse Pairs</title>
    <url>/2020/12/24/Leetcode493-reversePairs/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array nums, we call (i, j) an important reverse pair if i &lt; j and nums[i] &gt; 2*nums[j].</p>
<p>You need to return the number of important reverse pairs in the given array.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,3,2,3,1]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><br><strong>Example2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,4,3,5,1]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(Nlog^N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reversePairs</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> mergeSort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        res += mergeSort(nums, left, mid);</span><br><span class="line">        res += mergeSort(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        res += merge(nums, left, mid, right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> p = left, q = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &lt;= mid &amp;&amp; q &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="keyword">long</span>) nums[p] &gt; <span class="number">2</span> * (<span class="keyword">long</span>) nums[q])&#123;</span><br><span class="line">                count += mid - p + <span class="number">1</span>;</span><br><span class="line">                q++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                p++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</span><br><span class="line">        p = left; </span><br><span class="line">        q = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &lt;= mid &amp;&amp; q &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[p] &gt; nums[q])&#123;</span><br><span class="line">                temp[index++] = nums[q++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                temp[index++] = nums[p++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (p &lt;= mid)&#123;</span><br><span class="line">            temp[index++] = nums[p++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q &lt;= right)&#123;</span><br><span class="line">            temp[index++] = nums[q++];</span><br><span class="line">        &#125;</span><br><span class="line">        System.arraycopy(temp, <span class="number">0</span>, nums, left, right - left + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>TikTok</tag>
        <tag>Merge Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode567-Permutation In String</title>
    <url>/2021/01/07/Leetcode567-permutationInString/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string’s permutations is the substring of the second string.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: s1 &#x3D; &quot;ab&quot; s2 &#x3D; &quot;eidbaooo&quot;</span><br><span class="line">Output: True</span><br><span class="line">Explanation: s2 contains one permutation of s1 (&quot;ba&quot;).</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:s1&#x3D; &quot;ab&quot; s2 &#x3D; &quot;eidboaoo&quot;</span><br><span class="line">Output: False</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>The input strings only contain lower case letters.</li>
<li>The length of both given strings is in range [1, 10,000].</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(1)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkInclusion</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); i++)&#123;</span><br><span class="line">            map[s1.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> match = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; s2.length(); j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map[s2.charAt(j) - <span class="string">&#x27;a&#x27;</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (++match == s1.length())&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            map[s2.charAt(j) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= s1.length() - <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (map[s2.charAt(i) - <span class="string">&#x27;a&#x27;</span>] &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    match--;</span><br><span class="line">                &#125;</span><br><span class="line">                map[s2.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="comment">// if (map[s2.charAt(i++) - &#x27;a&#x27;]++ &gt;= 0)&#123;</span></span><br><span class="line">                <span class="comment">//     match--;</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>Sliding Window</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode681-Next Closest Time</title>
    <url>/2021/01/04/Leetcode681-nextClosestTime/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a time represented in the format “HH:MM”, form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.</p>
<p>You may assume the given input string is always valid. For example, “01:34”, “12:09” are all valid. “1:34”, “12:9” are all invalid.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: time &#x3D; &quot;19:34&quot;</span><br><span class="line">Output: &quot;19:39&quot;</span><br><span class="line">Explanation: The next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later.</span><br><span class="line">It is not 19:33, because this occurs 23 hours and 59 minutes later.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: time &#x3D; &quot;23:59&quot;</span><br><span class="line">Output: &quot;22:22&quot;</span><br><span class="line">Explanation: The next closest time choosing from digits 2, 3, 5, 9, is 22:22.</span><br><span class="line">It may be assumed that the returned time is next day&#39;s time since it is smaller than the input time numerically.</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>time.length == 5</li>
<li>time is a valid time in the form “HH:MM”.</li>
<li>0 &lt;= HH &lt; 24</li>
<li>0 &lt;= MM &lt; 60</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(1)</script></li>
<li>Space Complexity: <script type="math/tex">O(1)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">nextClosestTime</span><span class="params">(String time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] timeArr = time.toCharArray();</span><br><span class="line">        Character[] digits = &#123;timeArr[<span class="number">0</span>], timeArr[<span class="number">1</span>], timeArr[<span class="number">3</span>], timeArr[<span class="number">4</span>]&#125;;</span><br><span class="line">        TreeSet&lt;Character&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;(Arrays.asList(digits));</span><br><span class="line">        </span><br><span class="line">        timeArr[<span class="number">4</span>] = findNext(set, timeArr[<span class="number">4</span>], <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (timeArr[<span class="number">4</span>] &gt; time.charAt(<span class="number">4</span>)) <span class="keyword">return</span> <span class="keyword">new</span> String(timeArr);</span><br><span class="line">        </span><br><span class="line">        timeArr[<span class="number">3</span>] = findNext(set, timeArr[<span class="number">3</span>], <span class="string">&#x27;5&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (timeArr[<span class="number">3</span>] &gt; time.charAt(<span class="number">3</span>)) <span class="keyword">return</span> <span class="keyword">new</span> String(timeArr);</span><br><span class="line">        </span><br><span class="line">        timeArr[<span class="number">1</span>] = findNext(set, timeArr[<span class="number">1</span>], timeArr[<span class="number">0</span>] == <span class="string">&#x27;2&#x27;</span> ? <span class="string">&#x27;3&#x27;</span> : <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (timeArr[<span class="number">1</span>] &gt; time.charAt(<span class="number">1</span>)) <span class="keyword">return</span> <span class="keyword">new</span> String(timeArr);</span><br><span class="line">        </span><br><span class="line">        timeArr[<span class="number">0</span>] = findNext(set, timeArr[<span class="number">0</span>], <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(timeArr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">char</span> <span class="title">findNext</span><span class="params">(TreeSet&lt;Character&gt; set, <span class="keyword">char</span> current, <span class="keyword">char</span> upperLimit)</span></span>&#123;</span><br><span class="line">        Character next = set.higher(current);</span><br><span class="line">        <span class="keyword">return</span> next == <span class="keyword">null</span> || next &gt; upperLimit ? set.first() :next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode726-Number Of Atoms</title>
    <url>/2020/12/24/Leetcode726-numberOfAtoms/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a chemical formula (given as a string), return the count of each atom.</p>
<p>The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.</p>
<p>One or more digits representing that element’s count may follow if the count is greater than 1. If the count is 1, no digits will follow. For example, H2O and H2O2 are possible, but H1O2 is impossible.</p>
<p>Two formulas concatenated together to produce another formula. For example, H2O2He3Mg4 is also a formula.</p>
<p>A formula placed in parentheses, and a count (optionally added) is also a formula. For example, (H2O2) and (H2O2)3 are formulas.</p>
<p>Given a formula, return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: formula &#x3D; &quot;H2O&quot;</span><br><span class="line">Output: &quot;H2O&quot;</span><br><span class="line">Explanation: The count of elements are &#123;&#39;H&#39;: 2, &#39;O&#39;: 1&#125;.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: formula &#x3D; &quot;Mg(OH)2&quot;</span><br><span class="line">Output: &quot;H2MgO2&quot;</span><br><span class="line">Explanation: The count of elements are &#123;&#39;H&#39;: 2, &#39;Mg&#39;: 1, &#39;O&#39;: 2&#125;.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: formula &#x3D; &quot;K4(ON(SO3)2)2&quot;</span><br><span class="line">Output: &quot;K4N2O14S4&quot;</span><br><span class="line">Explanation: The count of elements are &#123;&#39;K&#39;: 4, &#39;N&#39;: 2, &#39;O&#39;: 14, &#39;S&#39;: 4&#125;.</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: formula &#x3D; &quot;Be32&quot;</span><br><span class="line">Output: &quot;Be32&quot;</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= formula.length &lt;= 1000</li>
<li>formula consists of English letters, digits, ‘(‘, and ‘)’.</li>
<li>formula is always valid.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script> or <script type="math/tex">O(Mlog^M)  M = numOfAtomTypes</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">countOfAtoms</span><span class="params">(String formula)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (formula == <span class="keyword">null</span> || formula.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Map&lt;String, Integer&gt; count = helper(formula.toCharArray());</span><br><span class="line">        <span class="keyword">for</span> (String atom: count.keySet())&#123;</span><br><span class="line">            res.append(atom);</span><br><span class="line">            <span class="keyword">if</span> (count.get(atom) &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                res.append(Integer.toString(count.get(atom)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Integer&gt; <span class="title">helper</span><span class="params">(<span class="keyword">char</span>[] formula)</span></span>&#123;</span><br><span class="line">        Map&lt;String, Integer&gt; res = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(i &lt; formula.length)&#123;</span><br><span class="line">            <span class="keyword">if</span> (formula[i] == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                Map&lt;String, Integer&gt; tmp = helper(formula);</span><br><span class="line">                <span class="keyword">int</span> count = getCount(formula);</span><br><span class="line">                <span class="keyword">for</span> (String atom: tmp.keySet())&#123;</span><br><span class="line">                    res.put(atom, res.getOrDefault(atom, <span class="number">0</span>) + tmp.get(atom) * count);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (formula[i] == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                String name = getName(formula);</span><br><span class="line">                res.put(name, res.getOrDefault(name, <span class="number">0</span>) + getCount(formula));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getName</span><span class="params">(<span class="keyword">char</span>[] formula)</span></span>&#123;</span><br><span class="line">        StringBuilder name = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        name.append(formula[i++]);</span><br><span class="line">        <span class="keyword">while</span>(i &lt; formula.length &amp;&amp; formula[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; formula[i] &lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">            name.append(formula[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">(<span class="keyword">char</span>[] formula)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; formula.length &amp;&amp; formula[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; formula[i] &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            res = res * <span class="number">10</span> + (formula[i++] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == <span class="number">0</span> ? <span class="number">1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>String</tag>
        <tag>Recursion</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode735-Asteroid Collision</title>
    <url>/2021/01/04/Leetcode735-asteroidCollision/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We are given an array asteroids of integers representing asteroids in a row.</p>
<p>For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.</p>
<p>Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: asteroids &#x3D; [5,10,-5]</span><br><span class="line">Output: [5,10]</span><br><span class="line">Explanation: The 10 and -5 collide resulting in 10.  The 5 and 10 never collide.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: asteroids &#x3D; [8,-8]</span><br><span class="line">Output: []</span><br><span class="line">Explanation: The 8 and -8 collide exploding each other.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: asteroids &#x3D; [10,2,-5]</span><br><span class="line">Output: [10]</span><br><span class="line">Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: asteroids &#x3D; [-2,-1,1,2]</span><br><span class="line">Output: [-2,-1,1,2]</span><br><span class="line">Explanation: The -2 and -1 are moving left, while the 1 and 2 are moving right. Asteroids moving the same direction never meet, so no asteroids will meet each other.</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= asteroids &lt;= 104</li>
<li>-1000 &lt;= asteroids[i] &lt;= 1000</li>
<li>asteroids[i] != 0</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] asteroidCollision(<span class="keyword">int</span>[] asteroids) &#123;</span><br><span class="line">        Stack&lt;Integer&gt; st = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> asteroid: asteroids)&#123;</span><br><span class="line">            <span class="keyword">if</span> (asteroid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                st.push(asteroid);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;              </span><br><span class="line">                <span class="keyword">while</span> (!st.isEmpty() &amp;&amp; st.peek() &gt; <span class="number">0</span> &amp;&amp; st.peek() &lt; Math.abs(asteroid))&#123;</span><br><span class="line">                    st.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!st.isEmpty() &amp;&amp; st.peek() == Math.abs(asteroid))&#123;</span><br><span class="line">                    st.pop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (st.isEmpty() || st.peek() &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    st.push(asteroid);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[st.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = st.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            res[i] = st.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Stack</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode777-Swap Adjacent In LR String</title>
    <url>/2020/12/25/Leetcode777-swapAdjacentInLRString/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>In a string composed of ‘L’, ‘R’, and ‘X’ characters, like “RXXLRXRXL”, a move consists of either replacing one occurrence of “XL” with “LX”, or replacing one occurrence of “RX” with “XR”. Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform one string to the other.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: start &#x3D; &quot;RXXLRXRXL&quot;, end &#x3D; &quot;XRLXXRRLX&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: We can transform start to end following these steps:</span><br><span class="line">RXXLRXRXL -&gt;</span><br><span class="line">XRXLRXRXL -&gt;</span><br><span class="line">XRLXRXRXL -&gt;</span><br><span class="line">XRLXXRRXL -&gt;</span><br><span class="line">XRLXXRRLX</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: start &#x3D; &quot;X&quot;, end &#x3D; &quot;L&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: start &#x3D; &quot;LLR&quot;, end &#x3D; &quot;RRL&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><br><strong>Example 4:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: start &#x3D; &quot;XL&quot;, end &#x3D; &quot;LX&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><br><strong>Example 5:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: start &#x3D; &quot;XLLR&quot;, end &#x3D; &quot;LXLX&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= start.length &lt;= 104</li>
<li>start.length == end.length</li>
<li>Both start and end will only consist of characters in ‘L’, ‘R’, and ‘X’.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canTransform</span><span class="params">(String start, String end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start.length() != end.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// if (!start.replace(&quot;X&quot;, &quot;&quot;).equals(end.replace(&quot;X&quot;, &quot;&quot;))) return false;</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span>[] startArr = start.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] endArr = end.toCharArray();</span><br><span class="line">        <span class="comment">// while (i &lt; startArr.length &amp;&amp; j &lt; endArr.length)&#123;</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; startArr.length || j &lt; endArr.length)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; startArr.length &amp;&amp; startArr[i] == <span class="string">&#x27;X&#x27;</span>) i++;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; endArr.length &amp;&amp; endArr[j] == <span class="string">&#x27;X&#x27;</span>) j++;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (i == startArr.length &amp;&amp; j == endArr.length) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == startArr.length || j == endArr.length) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (startArr[i] != endArr[j]) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (startArr[i] == <span class="string">&#x27;L&#x27;</span> &amp;&amp; i &lt; j) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (startArr[i] == <span class="string">&#x27;R&#x27;</span> &amp;&amp; i &gt; j) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// return true;</span></span><br><span class="line">        <span class="keyword">return</span> i == j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode785-Is Graph Bipartite?</title>
    <url>/2021/01/06/Leetcode785-isGraphBipartite/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an undirected graph, return true if and only if it is bipartite.</p>
<p>Recall that a graph is bipartite if we can split its set of nodes into two independent subsets A and B, such that every edge in the graph has one node in A and another node in B.</p>
<p>The graph is given in the following form: graph[i] is a list of indexes j for which the edge between nodes i and j exists.  Each node is an integer between 0 and graph.length - 1.  There are no self edges or parallel edges: graph[i] does not contain i, and it doesn’t contain any element twice.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: graph &#x3D; [[1,3],[0,2],[1,3],[0,2]]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: We can divide the vertices into two groups: &#123;0, 2&#125; and &#123;1, 3&#125;.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: graph &#x3D; [[1,2,3],[0,2],[0,1,3],[0,2]]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: We cannot find a way to divide the set of nodes into two independent subsets.</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= graph.length &lt;= 100</li>
<li>0 &lt;= graph[i].length &lt; 100</li>
<li>0 &lt;= graph[i][j] &lt;= graph.length - 1</li>
<li>graph[i][j] != i</li>
<li>All the values of graph[i] are unique.</li>
<li>The graph is guaranteed to be undirected. </li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<h3 id="Solution-1-DFS"><a href="#Solution-1-DFS" class="headerlink" title="Solution 1: DFS"></a>Solution 1: DFS</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = graph.length;</span><br><span class="line">        <span class="keyword">int</span>[] colors = <span class="keyword">new</span> <span class="keyword">int</span>[n];  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (colors[i] == <span class="number">0</span> &amp;&amp; !valid(graph, colors, <span class="number">1</span>, i))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;      </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span>[] colors, <span class="keyword">int</span> color, <span class="keyword">int</span> node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (colors[node] != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> colors[node] == color;</span><br><span class="line">        &#125;</span><br><span class="line">        colors[node] = color;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> next : graph[node])&#123;</span><br><span class="line">            <span class="keyword">if</span> (!valid(graph, colors, -color, next))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-2-BFS"><a href="#Solution-2-BFS" class="headerlink" title="Solution 2: BFS"></a>Solution 2: BFS</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBipartite</span><span class="params">(<span class="keyword">int</span>[][] graph)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = graph.length;</span><br><span class="line">        <span class="keyword">int</span>[] colors = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (colors[i] != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            q.offer(i);</span><br><span class="line">            colors[i] = <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">int</span> cur = q.poll();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> next: graph[cur])&#123;</span><br><span class="line">                    <span class="keyword">if</span> (colors[next] == <span class="number">0</span>)&#123;</span><br><span class="line">                        colors[next] = -colors[cur];</span><br><span class="line">                        q.offer(next);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (colors[next] == colors[cur])&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>BFS</tag>
        <tag>TikTok</tag>
        <tag>Bipartite</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode864-Shortest Path To Get All Keys</title>
    <url>/2020/12/23/Leetcode864-shortestPathToGetAllKeys/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We are given a 2-dimensional grid. “.” is an empty cell, “#” is a wall, “@” is the starting point, (“a”, “b”, …) are keys, and (“A”, “B”, …) are locks.</p>
<p>We start at the starting point, and one move consists of walking one space in one of the 4 cardinal directions.  We cannot walk outside the grid, or walk into a wall.  If we walk over a key, we pick it up.  We can’t walk over a lock unless we have the corresponding key.</p>
<p>For some 1 &lt;= K &lt;= 6, there is exactly one lowercase and one uppercase letter of the first K letters of the English alphabet in the grid.  This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.</p>
<p>Return the lowest number of moves to acquire all keys.  If it’s impossible, return -1.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;@.a.#&quot;,&quot;###.#&quot;,&quot;b.A.B&quot;]</span><br><span class="line">Output: 8</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;@..aA&quot;,&quot;..B#.&quot;,&quot;....b&quot;]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure></p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(m * n * 2^{numOfKey})</script></li>
<li>Space Complexity: <script type="math/tex">O(m * n * 2^{numOfKey})</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">shortestPathAllKeys</span><span class="params">(String[] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (grid.length == <span class="number">0</span> || grid[<span class="number">0</span>].length() == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> m = grid.length;</span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length();</span><br><span class="line">        Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">// Original method 47ms</span></span><br><span class="line">        HashSet&lt;Integer&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">// Optimized method 13ms</span></span><br><span class="line">        <span class="comment">// int[][][] visited = new int[m][n][64];</span></span><br><span class="line">        <span class="keyword">int</span> allKeys = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i].charAt(j) == <span class="string">&#x27;@&#x27;</span>)&#123;</span><br><span class="line">                    q.offer((i &lt;&lt; <span class="number">16</span>) | (j &lt;&lt; <span class="number">8</span>));</span><br><span class="line">                    visited.add((i &lt;&lt; <span class="number">16</span>) | (j &lt;&lt; <span class="number">8</span>));</span><br><span class="line">                    <span class="comment">// visited[i][j][0] = 1;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (grid[i].charAt(j) &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; grid[i].charAt(j) &lt;= <span class="string">&#x27;f&#x27;</span>)&#123;</span><br><span class="line">                    allKeys |= <span class="number">1</span> &lt;&lt; (grid[i].charAt(j) - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span>[] dir = &#123;-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> cur = q.poll();</span><br><span class="line">                <span class="keyword">int</span> x = cur &gt;&gt; <span class="number">16</span>;</span><br><span class="line">                <span class="keyword">int</span> y = (cur &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">                <span class="keyword">int</span> key = cur &amp; <span class="number">0xFF</span>;</span><br><span class="line">                <span class="keyword">if</span> (key == allKeys) <span class="keyword">return</span> res;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)&#123;</span><br><span class="line">                    <span class="keyword">int</span> nx = x + dir[j];</span><br><span class="line">                    <span class="keyword">int</span> ny = y + dir[j + <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || ny &lt; <span class="number">0</span> || nx &gt;= m || ny &gt;= n)&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">char</span> ch = grid[nx].charAt(ny);</span><br><span class="line">                    <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;F&#x27;</span> &amp;&amp; ((key &amp; (<span class="number">1</span> &lt;&lt; (ch - <span class="string">&#x27;A&#x27;</span>))) == <span class="number">0</span>)) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">int</span> nkey = key;</span><br><span class="line">                    <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;f&#x27;</span>)&#123;</span><br><span class="line">                        nkey |= <span class="number">1</span> &lt;&lt; (ch - <span class="string">&#x27;a&#x27;</span>); </span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">int</span> ncur = (nx &lt;&lt; <span class="number">16</span>) | (ny &lt;&lt; <span class="number">8</span>) | nkey;</span><br><span class="line">                    <span class="keyword">if</span> (visited.contains(ncur))&#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// if (visited[nx][ny][nkey] == 1)&#123;</span></span><br><span class="line">                    <span class="comment">//     continue;</span></span><br><span class="line">                    <span class="comment">// &#125;</span></span><br><span class="line">                    q.offer(ncur);</span><br><span class="line">                    visited.add(ncur);</span><br><span class="line">                    <span class="comment">// visited[nx][ny][nkey] = 1;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>TikTok</tag>
        <tag>Bitwise Operation</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode889-Construct Binary Tree From Preorder And Postorder Traversal</title>
    <url>/2020/12/29/Leetcode889-constructBinaryTreeFromPreorderAndPostorderTraversal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Return any binary tree that matches the given preorder and postorder traversals.</p>
<p>Values in the traversals pre and post are distinct positive integers.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: pre &#x3D; [1,2,4,5,3,6,7], post &#x3D; [4,5,2,6,7,3,1]</span><br><span class="line">Output: [1,2,3,4,5,6,7]</span><br></pre></td></tr></table></figure>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(height)</script></li>
</ul>
<h3 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">constructFromPrePost</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span>[] post)</span> </span>&#123;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(pre[i++]);</span><br><span class="line">        <span class="keyword">if</span> (root.val != post[j])&#123;</span><br><span class="line">            root.left = constructFromPrePost(pre, post);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.val != post[j])&#123;</span><br><span class="line">            root.right = constructFromPrePost(pre, post);</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">constructFromPrePost</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span>[] post)</span> </span>&#123;</span><br><span class="line">    Deque&lt;TreeNode&gt; s = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    s.offer(<span class="keyword">new</span> TreeNode(pre[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; pre.length; ++i) &#123;</span><br><span class="line">        TreeNode node = <span class="keyword">new</span> TreeNode(pre[i]);</span><br><span class="line">        <span class="keyword">while</span> (s.getLast().val == post[j]) &#123;</span><br><span class="line">            s.pollLast(); j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s.getLast().left == <span class="keyword">null</span>) s.getLast().left = node;</span><br><span class="line">        <span class="keyword">else</span> s.getLast().right = node;</span><br><span class="line">        s.offer(node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.getFirst();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>Tree</tag>
        <tag>Iteration</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode974-Subarray Sums Divisible by K</title>
    <url>/2021/01/05/Leetcode974-subarraySumsDivisiblebyK/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array A of integers, return the number of (contiguous, non-empty) subarrays that have a sum divisible by K.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A &#x3D; [4,5,0,-2,-3,1], K &#x3D; 5</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: There are 7 subarrays with a sum divisible by K &#x3D; 5:</span><br><span class="line">[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt;= A.length &lt;= 30000</li>
<li>-10000 &lt;= A[i] &lt;= 10000</li>
<li>2 &lt;= K &lt;= 10000</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If a subarray is divisible by K, it has to be a multiple of K</span><br><span class="line"></span><br><span class="line">a-b&#x3D;n*k, a &#x3D; running total, b &#x3D; any previous subarray sum, same as original prefix sum problems.</span><br><span class="line"></span><br><span class="line">We want to solve for b, so using basic algebra, b&#x3D;a-n*k</span><br><span class="line"></span><br><span class="line">We don&#39;t know what n is, so we can get rid of n by modding every element by k</span><br><span class="line">(b%k) &#x3D; (a%k) - (n*k)%k</span><br><span class="line"></span><br><span class="line">since n*k is a multiple of k and k goes into it evenly, the result of the (n *k)%k will be 0</span><br><span class="line"></span><br><span class="line">therefore</span><br><span class="line">b%k &#x3D; a%k</span><br><span class="line"></span><br><span class="line">is the same as the formula we defined earlier, a-b&#x3D;n*k</span><br><span class="line"></span><br><span class="line">where b &#x3D; running total, a &#x3D; any previous subarray sum</span><br><span class="line"></span><br><span class="line">So we just have to see if running total mod k is equal to any previous running total mod k</span><br></pre></td></tr></table></figure>
<h3 id="Solution-1-Prefix-Hash-Table"><a href="#Solution-1-Prefix-Hash-Table" class="headerlink" title="Solution 1: Prefix + Hash Table"></a>Solution 1: Prefix + Hash Table</h3><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script>, N = A.length</li>
<li>Space Complexity: <script type="math/tex">O(K)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subarraysDivByK</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> prefix = <span class="number">0</span>;</span><br><span class="line">        map.put(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x: A)&#123;</span><br><span class="line">            prefix = (prefix + x % K + K) % K;</span><br><span class="line">            res += map.getOrDefault(prefix, <span class="number">0</span>);</span><br><span class="line">            map.put(prefix, map.getOrDefault(prefix, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Solution-2-Prefix-Array-faster"><a href="#Solution-2-Prefix-Array-faster" class="headerlink" title="Solution 2: Prefix + Array, faster"></a>Solution 2: Prefix + Array, faster</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subarraysDivByK</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[K];</span><br><span class="line">        count[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> prefix = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a : A) &#123;</span><br><span class="line">            prefix = (prefix + a % K + K) % K;</span><br><span class="line">            res += count[prefix]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Hash Table</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode924-Minimize Malware Spread</title>
    <url>/2021/01/04/Leetcode924-minimizeMalwareSpread/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.</p>
<p>Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.</p>
<p>Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.</p>
<p>We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.</p>
<p>Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: graph &#x3D; [[1,1,0],[1,1,0],[0,0,1]], initial &#x3D; [0,1]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: graph &#x3D; [[1,0,0],[0,1,0],[0,0,1]], initial &#x3D; [0,2]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: graph &#x3D; [[1,1,1],[1,1,1],[1,1,1]], initial &#x3D; [1,2]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure></p>
<p><strong>Note:</strong></p>
<ul>
<li>1 &lt; graph.length = graph[0].length &lt;= 300</li>
<li>0 &lt;= graph[i][j] == graph[j][i] &lt;= 1</li>
<li>graph[i][i] == 1</li>
<li>1 &lt;= initial.length &lt;= graph.length</li>
<li>0 &lt;= initial[i] &lt; graph.length</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Union found all nodes.</p>
<p>Count the union size of each union set.</p>
<p>Count the malware number of each union set.</p>
<p>Return the biggest union’s malware if there is one and only one malware.</p>
<p>If no such union that has and has only one malware,</p>
<p>return the malware with minimum index.</p>
<ul>
<li>Time Complexity: <script type="math/tex">O(N^2)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] parent;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minMalwareSpread</span><span class="params">(<span class="keyword">int</span>[][] graph, <span class="keyword">int</span>[] initial)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = graph.length;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) parent[i] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (graph[i][j] == <span class="number">1</span>) union(i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] unionSize = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span>[] malwareSize = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            unionSize[find(i)]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: initial)&#123;</span><br><span class="line">            malwareSize[find(i)]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = -<span class="number">1</span>;</span><br><span class="line">        Arrays.sort(initial);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: initial)&#123;</span><br><span class="line">            <span class="keyword">int</span> idx = find(i);</span><br><span class="line">            <span class="keyword">if</span> (malwareSize[idx] == <span class="number">1</span> &amp;&amp; unionSize[idx] &gt; max)&#123;</span><br><span class="line">                max = unionSize[idx];</span><br><span class="line">                res = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res == -<span class="number">1</span> ? initial[<span class="number">0</span>] : res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        parent[find(i)] = find(j);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[i] != i) </span><br><span class="line">            parent[i] = find(parent[i]);</span><br><span class="line">        <span class="keyword">return</span> parent[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Union Find</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode977-Squares of a Sorted Array</title>
    <url>/2021/01/05/Leetcode977-squaresofaSortedArray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [-4,-1,0,3,10]</span><br><span class="line">Output: [0,1,9,16,100]</span><br><span class="line">Explanation: After squaring, the array becomes [16,1,0,9,100].</span><br><span class="line">After sorting, it becomes [0,1,9,16,100].</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [-7,-3,2,3,11]</span><br><span class="line">Output: [4,9,9,49,121]</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= nums.length &lt;= 104</li>
<li>-104 &lt;= nums[i] &lt;= 104</li>
<li>nums is sorted in non-decreasing order.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortedSquares(<span class="keyword">int</span>[] A) &#123;</span><br><span class="line">        <span class="keyword">if</span> (A == <span class="keyword">null</span> || A.length == <span class="number">0</span>) <span class="keyword">return</span> A;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">        <span class="keyword">int</span> idx = A.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = A.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(A[left]) &gt; Math.abs(A[right]))&#123;</span><br><span class="line">                res[idx] = A[left] * A[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                res[idx] = A[right] * A[right];</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            idx--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>Two Pointers</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>React Router with MobX Doesn&#39;t Re-render Using History.push()</title>
    <url>/2021/02/28/ReactRouterNotRerender/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/react-mobx.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Issue-Description"><a href="#Issue-Description" class="headerlink" title="Issue Description"></a>Issue Description</h2><p>Issue happened with react-router-dom and MobX. Tryed to use <code>history.push()</code> for navigating after an action conducted. The problem is only updating the urls but components are not re-rendering.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Used <code>&lt;BrowserRouter&gt;</code> as router component in application. Followed by <a href="https://reactrouter.com/web/api/Router">offical document</a>, need to replace it with <code>&lt;Router history=&#123;history&#125;&gt;</code> because MobX was used to manage state, where <code>history</code> is return by <code>syncHistoryWithStore()</code> from <code>mobx-react-router</code>.</p>
<hr />]]></content>
      <categories>
        <category>Issues</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>React-Router</tag>
        <tag>MobX</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode349-Intersection Of Two Arrays</title>
    <url>/2020/12/27/leetcode349-intersectionOfTwoArrays/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given two arrays, write a function to compute their intersection.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums1 &#x3D; [1,2,2,1], nums2 &#x3D; [2,2]</span><br><span class="line">Output: [2]</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums1 &#x3D; [4,9,5], nums2 &#x3D; [9,4,9,8,4]</span><br><span class="line">Output: [9,4]</span><br></pre></td></tr></table></figure><br><strong>Note:</strong></p>
<ul>
<li>Each element in the result must be unique.</li>
<li>The result can be in any order.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1.length == <span class="number">0</span> || nums2.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums1)&#123;</span><br><span class="line">            set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num: nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(num))&#123;</span><br><span class="line">                tmp.add(num);</span><br><span class="line">                set.remove(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[tmp.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tmp.size(); i++)&#123;</span><br><span class="line">            res[i] = tmp.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>TikTok</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode211-Design Add and Search Words Data Structure</title>
    <url>/2022/01/13/Leetcode211-designAddandSearchWordsDataStructure/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a data structure that supports adding new words and finding if a string matches any previously added string.</p>
<p>Implement the WordDictionary class:</p>
<ul>
<li>WordDictionary() Initializes the object.</li>
<li>void addWord(word) Adds word to the data structure, it can be matched later.</li>
<li>bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots ‘.’ where dots can be matched with any letter.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;WordDictionary&quot;,&quot;addWord&quot;,&quot;addWord&quot;,&quot;addWord&quot;,&quot;search&quot;,&quot;search&quot;,&quot;search&quot;,&quot;search&quot;]</span><br><span class="line">[[],[&quot;bad&quot;],[&quot;dad&quot;],[&quot;mad&quot;],[&quot;pad&quot;],[&quot;bad&quot;],[&quot;.ad&quot;],[&quot;b..&quot;]]</span><br><span class="line">Output</span><br><span class="line">[null,null,null,null,false,true,true,true]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">WordDictionary wordDictionary &#x3D; new WordDictionary();</span><br><span class="line">wordDictionary.addWord(&quot;bad&quot;);</span><br><span class="line">wordDictionary.addWord(&quot;dad&quot;);</span><br><span class="line">wordDictionary.addWord(&quot;mad&quot;);</span><br><span class="line">wordDictionary.search(&quot;pad&quot;); &#x2F;&#x2F; return False</span><br><span class="line">wordDictionary.search(&quot;bad&quot;); &#x2F;&#x2F; return True</span><br><span class="line">wordDictionary.search(&quot;.ad&quot;); &#x2F;&#x2F; return True</span><br><span class="line">wordDictionary.search(&quot;b..&quot;); &#x2F;&#x2F; return True</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= word.length &lt;= 500</li>
<li>word in addWord consists lower-case English letters.</li>
<li>word in search consist of  ‘.’ or lower-case English letters.</li>
<li>At most 50000 calls will be made to addWord and search.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1:</strong> HashMap, O(MN^2)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// O(N^2 * M)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span> </span>&#123;</span><br><span class="line">    Map&lt;Integer, Set&lt;String&gt;&gt; d;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WordDictionary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        d = <span class="keyword">new</span> HashMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Adds a word into the data structure. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWord</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = word.length();</span><br><span class="line">        <span class="keyword">if</span> (!d.containsKey(m)) &#123;</span><br><span class="line">            d.put(m, <span class="keyword">new</span> HashSet());</span><br><span class="line">        &#125;</span><br><span class="line">        d.get(m).add(word);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns if the word is in the data structure. A word could contain the dot character &#x27;.&#x27; to represent any one letter. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = word.length();</span><br><span class="line">        <span class="keyword">if</span> (d.containsKey(m)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String w : d.get(m)) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> ((i &lt; m) &amp;&amp; (w.charAt(i) == word.charAt(i) || word.charAt(i) == <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i == m) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2:</strong> Trie Tree, O(MN) for defined words without dots, O(NM^26) for undefined words<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">    Map&lt;Character, TrieNode&gt; children = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">boolean</span> isWord = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TrieNode node;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WordDictionary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        node = <span class="keyword">new</span> TrieNode();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWord</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        TrieNode cur = node;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: word.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span> (!cur.children.containsKey(ch))&#123;</span><br><span class="line">                cur.children.put(ch, <span class="keyword">new</span> TrieNode());</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.children.get(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        cur.isWord = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">searchTrieTree</span><span class="params">(TrieNode node, String word)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> ch = word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (!node.children.containsKey(ch))&#123;</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">char</span> c: node.children.keySet()) &#123;</span><br><span class="line">                        TrieNode child = node.children.get(c);</span><br><span class="line">                        <span class="keyword">if</span> (searchTrieTree(child, word.substring(i + <span class="number">1</span>)))&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                node = node.children.get(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.isWord;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> searchTrieTree(node,word);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Amazon</tag>
        <tag>String</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode450-Delete Node in a BST</title>
    <url>/2022/01/13/Leetcode450-deletNodeinABST/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.</p>
<p>Basically, the deletion can be divided into two stages:</p>
<ul>
<li>Search for a node to remove.</li>
<li>If the node is found, delete the node.</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [5,3,6,2,4,null,7], key &#x3D; 3</span><br><span class="line">Output: [5,4,6,2,null,null,7]</span><br><span class="line">Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.</span><br><span class="line">One valid answer is [5,4,6,2,null,null,7], shown in the above BST.</span><br><span class="line">Please notice that another valid answer is [5,2,6,null,4,null,7] and it&#39;s also accepted.</span><br></pre></td></tr></table></figure>
<p><img src="https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg" alt=""></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [5,3,6,2,4,null,7], key &#x3D; 0</span><br><span class="line">Output: [5,3,6,2,4,null,7]</span><br><span class="line">Explanation: The tree does not contain a node with value &#x3D; 0.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [], key &#x3D; 0</span><br><span class="line">Output: []</span><br></pre></td></tr></table></figure><br><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range [0, 104].</li>
<li>-105 &lt;= Node.val &lt;= 105</li>
<li>Each node has a unique value.</li>
<li>root is a valid binary search tree.</li>
<li>-105 &lt;= key &lt;= 105</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(logN)</script> or <script type="math/tex">O(H)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// O(logN) = O(H)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (key &lt; root.val)&#123;</span><br><span class="line">            root.left = deleteNode(root.left, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; root.val)&#123;</span><br><span class="line">            root.right = deleteNode(root.right, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">                root = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (root.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                root.val = nextLarger(root);</span><br><span class="line">                root.right = deleteNode(root.right, root.val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                root.val = preSmaller(root);</span><br><span class="line">                root.left = deleteNode(root.left, root.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">nextLarger</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        root = root.right;</span><br><span class="line">        <span class="keyword">while</span>(root.left != <span class="keyword">null</span>) root = root.left;</span><br><span class="line">        <span class="keyword">return</span> root.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">preSmaller</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">        root = root.left;</span><br><span class="line">        <span class="keyword">while</span>(root.right != <span class="keyword">null</span>) root = root.right;</span><br><span class="line">        <span class="keyword">return</span> root.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Amazon</tag>
        <tag>Tree</tag>
        <tag>BST</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode339-nestedListWeightSum</title>
    <url>/2022/01/24/Leetcode339-nestedListWeightSum/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists.</p>
<p>The <strong>depth</strong> of an integer is the number of lists that it is inside of. For example, the nested list [1,[2,2],[[3],2],1] has each integer’s value set to its <strong>depth</strong>.</p>
<p>Return the sum of each integer in nestedList multiplied by its <strong>depth</strong>.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><img src="https://assets.leetcode.com/uploads/2021/01/14/nestedlistweightsumex1.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nestedList &#x3D; [[1,1],2,[1,1]]</span><br><span class="line">Output: 10</span><br><span class="line">Explanation: Four 1&#39;s at depth 2, one 2 at depth 1. 1*2 + 1*2 + 2*1 + 1*2 + 1*2 &#x3D; 10.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><img src="https://assets.leetcode.com/uploads/2021/01/14/nestedlistweightsumex2.png" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nestedList &#x3D; [1,[4,[6]]]</span><br><span class="line">Output: 27</span><br><span class="line">Explanation: One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3. 1*1 + 4*2 + 6*3 &#x3D; 27.</span><br></pre></td></tr></table></figure><br><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nestedList &#x3D; [0]</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><br><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= nestedList.length &lt;= 50</li>
<li>The values of the integers in the nested list is in the range [-100, 100].</li>
<li>The maximum depth of any integer is less than or equal to 50.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<p><strong>Solution 1: DFS</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // This is the interface that allows for creating nested lists.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * public interface NestedInteger &#123;</span></span><br><span class="line"><span class="comment"> *     // Constructor initializes an empty nested list.</span></span><br><span class="line"><span class="comment"> *     public NestedInteger();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // Constructor initializes a single integer.</span></span><br><span class="line"><span class="comment"> *     public NestedInteger(int value);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // <span class="doctag">@return</span> true if this NestedInteger holds a single integer, rather than a nested list.</span></span><br><span class="line"><span class="comment"> *     public boolean isInteger();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // <span class="doctag">@return</span> the single integer that this NestedInteger holds, if it holds a single integer</span></span><br><span class="line"><span class="comment"> *     // Return null if this NestedInteger holds a nested list</span></span><br><span class="line"><span class="comment"> *     public Integer getInteger();</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // Set this NestedInteger to hold a single integer.</span></span><br><span class="line"><span class="comment"> *     public void setInteger(int value);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.</span></span><br><span class="line"><span class="comment"> *     public void add(NestedInteger ni);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     // <span class="doctag">@return</span> the nested list that this NestedInteger holds, if it holds a nested list</span></span><br><span class="line"><span class="comment"> *     // Return empty list if this NestedInteger holds a single integer</span></span><br><span class="line"><span class="comment"> *     public List&lt;NestedInteger&gt; getList();</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// DFS, O(N)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depthSum</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (NestedInteger element: nestedList)&#123;</span><br><span class="line">            res += helper(element, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(NestedInteger cur, <span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur.isInteger())&#123;</span><br><span class="line">            <span class="keyword">return</span> cur.getInteger() * depth;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (NestedInteger next: cur.getList())&#123;</span><br><span class="line">            res += helper(next, depth + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2: BFS</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depthSum</span><span class="params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        Queue&lt;NestedInteger&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q.addAll(nestedList);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> depth = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = q.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                NestedInteger cur = q.poll();</span><br><span class="line">                <span class="keyword">if</span>(cur.isInteger())&#123;</span><br><span class="line">                    res += cur.getInteger() * depth;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    q.addAll(cur.getList());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            depth++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>BFS</tag>
        <tag>Linkedin</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode671-Second Minimum Node In a BinaryTree</title>
    <url>/2022/01/24/Leetcode671-secondMinimumNodeInABinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node’s value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.</p>
<p>Given such a binary tree, you need to output the second minimum value in the set made of all the nodes’ value in the whole tree.</p>
<p>If no such second minimum value exists, output -1 instead.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1</strong><br><img src="https://assets.leetcode.com/uploads/2020/10/15/smbt1.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [2,2,5,null,null,5,7]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: The smallest value is 2, the second smallest value is 5.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2</strong><br><img src="https://assets.leetcode.com/uploads/2020/10/15/smbt2.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: root &#x3D; [2,2,2]</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: The smallest value is 2, but there isn&#39;t any second smallest value.</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>The number of nodes in the tree is in the range [1, 25].</li>
<li>1 &lt;= Node.val &lt;= 231 - 1</li>
<li>root.val == min(root.left.val, root.right.val) for each internal node of the tree.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<p>In this tree, the root should be the smallest node.</p>
<p>If the value of the children of the root node is not same, root val should be the smaller child value, but the larger one may not the second smallest one, cause the second smallest one may also in the subtree of the smaller value node.</p>
<p>Similar, if the two children value are the same, then calculate the second smallest value of each subtree, then compare them to find the smaller one as the second smallest value.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findSecondMinimumValue</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || root.left == <span class="keyword">null</span> || root.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left = root.left.val;</span><br><span class="line">        <span class="keyword">int</span> right = root.right.val;</span><br><span class="line">        <span class="keyword">if</span> (root.val ==  left)&#123;</span><br><span class="line">            left = findSecondMinimumValue(root.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.val == right)&#123;</span><br><span class="line">            right = findSecondMinimumValue(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (right == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(left, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Tree</tag>
        <tag>Linkedin</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode244-Shortest Word Distance II</title>
    <url>/2022/01/25/Leetcode244-shortestWordDistanceII/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.</p>
<p>Implement the WordDistance class:</p>
<p>WordDistance(String[] wordsDict) initializes the object with the strings array wordsDict.<br>int shortest(String word1, String word2) returns the shortest distance between word1 and word2 in the array wordsDict.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;WordDistance&quot;, &quot;shortest&quot;, &quot;shortest&quot;]</span><br><span class="line">[[[&quot;practice&quot;, &quot;makes&quot;, &quot;perfect&quot;, &quot;coding&quot;, &quot;makes&quot;]], [&quot;coding&quot;, &quot;practice&quot;], [&quot;makes&quot;, &quot;coding&quot;]]</span><br><span class="line">Output</span><br><span class="line">[null, 3, 1]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">WordDistance wordDistance &#x3D; new WordDistance([&quot;practice&quot;, &quot;makes&quot;, &quot;perfect&quot;, &quot;coding&quot;, &quot;makes&quot;]);</span><br><span class="line">wordDistance.shortest(&quot;coding&quot;, &quot;practice&quot;); &#x2F;&#x2F; return 3</span><br><span class="line">wordDistance.shortest(&quot;makes&quot;, &quot;coding&quot;);    &#x2F;&#x2F; return 1</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= wordsDict.length &lt;= 3 * 104</li>
<li>1 &lt;= wordsDict[i].length &lt;= 10</li>
<li>wordsDict[i] consists of lowercase English letters.</li>
<li>word1 and word2 are in wordsDict.</li>
<li>word1 != word2</li>
<li>At most 5000 calls will be made to shortest.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Store index of each words of words dictionary in a map, then using two pointers to compare sorted index array.</p>
<p>if w[i]&lt;w[j], i plus 1, else j plus 1.</p>
<ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(N)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordDistance</span> </span>&#123;</span><br><span class="line">    HashMap&lt;String, List&lt;Integer&gt;&gt; map;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WordDistance</span><span class="params">(String[] wordsDict)</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordsDict.length; i++)&#123;</span><br><span class="line">            List&lt;Integer&gt; list = map.getOrDefault(wordsDict[i], <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            list.add(i);</span><br><span class="line">            map.put(wordsDict[i], list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">shortest</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; l1 = map.get(word1);</span><br><span class="line">        List&lt;Integer&gt; l2 = map.get(word2);</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; l1.size() &amp;&amp; j &lt; l2.size())&#123;</span><br><span class="line">            res = Math.min(res, Math.abs(l1.get(i) - l2.get(j)));</span><br><span class="line">            <span class="keyword">if</span> (l1.get(i) &lt; l2.get(j))&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your WordDistance object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * WordDistance obj = new WordDistance(wordsDict);</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.shortest(word1,word2);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Hash Table</tag>
        <tag>Two Pointers</tag>
        <tag>Linkedin</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode243-Shortest Word Distance</title>
    <url>/2022/01/25/Leetcode243-shortestWordDistance/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of strings wordsDict and two different strings that already exist in the array word1 and word2, return the shortest distance between these two words in the list.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: wordsDict &#x3D; [&quot;practice&quot;, &quot;makes&quot;, &quot;perfect&quot;, &quot;coding&quot;, &quot;makes&quot;], word1 &#x3D; &quot;coding&quot;, word2 &#x3D; &quot;practice&quot;</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: wordsDict &#x3D; [&quot;practice&quot;, &quot;makes&quot;, &quot;perfect&quot;, &quot;coding&quot;, &quot;makes&quot;], word1 &#x3D; &quot;makes&quot;, word2 &#x3D; &quot;coding&quot;</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure></p>
<p><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= wordsDict.length &lt;= 3 * 104</li>
<li>1 &lt;= wordsDict[i].length &lt;= 10</li>
<li>wordsDict[i] consists of lowercase English letters.</li>
<li>word1 and word2 are in wordsDict.</li>
<li>word1 != word2</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Time Complexity: <script type="math/tex">O(NM)</script>, N is the number of words, M is the length of target word(equal needs O(M) to compare)</li>
<li>Space Complexity: <script type="math/tex">O(1)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">shortestDistance</span><span class="params">(String[] wordsDict, String word1, String word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p1 = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> p2 = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordsDict.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (wordsDict[i].equals(word1))&#123;</span><br><span class="line">                p1 = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (wordsDict[i].equals(word2))&#123;</span><br><span class="line">                p2 = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p1 != -<span class="number">1</span> &amp;&amp; p2 != -<span class="number">1</span>)&#123;</span><br><span class="line">                res = Math.min(res, Math.abs(p1 - p2));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
        <tag>Linkedin</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode152-Maximum Product Subarray</title>
    <url>/2022/01/25/Leetcode152-maximumProductSubarray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p>

<p><img src="/images/LeetCode.jpg" alt="" style="width:100%" /> <!-- 首页和文章内都会显示 --></p>
<span id="more"></span>
<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.</p>
<p>The test cases are generated so that the answer will fit in a 32-bit integer.</p>
<p>A subarray is a contiguous subsequence of the array.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [2,3,-2,4]</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [2,3] has the largest product 6.</span><br></pre></td></tr></table></figure><br><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums &#x3D; [-2,0,-1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The result cannot be 2, because [-2,-1] is not a subarray.</span><br></pre></td></tr></table></figure><br><strong>Constraints:</strong></p>
<ul>
<li>1 &lt;= nums.length &lt;= 2 * 104</li>
<li>-10 &lt;= nums[i] &lt;= 10</li>
<li>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</li>
</ul>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Solution 1: DP</strong></p>
<ul>
<li>Time Complexity: <script type="math/tex">O(N)</script></li>
<li>Space Complexity: <script type="math/tex">O(1)</script></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">//    DP</span></span><br><span class="line"><span class="comment">// dp[i][0] = min( min(dp[i - 1][0] * nums[i], dp[i - 1][1] * nums[i]), nums[i])</span></span><br><span class="line"><span class="comment">// dp[i][1] = max( max(dp[i - 1][0] * nums[i], dp[i - 1][1] * nums[i]), nums[i])</span></span><br><span class="line"><span class="comment">// improved:</span></span><br><span class="line"><span class="comment">// minPro = min( min(minPro * nums[i], maxPro * nums[i]), nums[i])</span></span><br><span class="line"><span class="comment">// maxPro = max( max(minPro * nums[i], maxPro * nums[i]), nums[i])</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> premax = nums[<span class="number">0</span>], premin = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = premax;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            min = premin * nums[i];</span><br><span class="line">            max = premax * nums[i];</span><br><span class="line">            premax = Math.max(Math.max(min, max), nums[i]);</span><br><span class="line">            premin = Math.min(Math.min(min, max), nums[i]);</span><br><span class="line">            res = Math.max(res, premax);            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Solution 2: cal prefix and suffix</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    Solution 2: cal prefix and suffix </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> prefix = <span class="number">0</span>, suffix = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            prefix = (prefix == <span class="number">0</span> ? <span class="number">1</span> : prefix) * nums[i];</span><br><span class="line">            suffix = (suffix == <span class="number">0</span> ? <span class="number">1</span> : suffix) * nums[nums.length - i - <span class="number">1</span>];</span><br><span class="line">            res = Math.max(res, Math.max(prefix, suffix));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr />]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>Linkedin</tag>
      </tags>
  </entry>
</search>
